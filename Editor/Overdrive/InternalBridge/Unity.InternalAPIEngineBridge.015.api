// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace UnityEditor.GraphToolsFoundation.Overdrive.Bridge
{
    public static class ConsoleWindowBridge
    {
        public static T FindBoundGraphViewToolWindow<T>(UnityEngine.UIElements.VisualElement gv) where T : UnityEditor.GraphToolsFoundation.Overdrive.Bridge.GraphViewToolWindowBridge;
        public static void LogSticky(string message, string file, UnityEngine.LogType logType, UnityEngine.LogOption logOptions, int instanceId);
        public static void RemoveLogEntries();
        public static void SetEntryDoubleClickedDelegate(System.Action<string, int> doubleClickedCallback);
        public static void SpawnAttachedViewToolWindow<T>(UnityEditor.EditorWindow window, UnityEngine.UIElements.VisualElement gv) where T : UnityEditor.GraphToolsFoundation.Overdrive.Bridge.GraphViewToolWindowBridge;
    }

    [UnityEditor.InitializeOnLoad] public class EditorTitle
    {
        public EditorTitle() {}
    }

    [System.Runtime.CompilerServices.Extension] public static class GraphViewStaticBridge
    {
        public static readonly int s_EditorPixelsPerPointId;
        public static readonly int s_GraphViewScaleId;
        public static UnityEngine.Color EditorPlayModeTint { get; }
        public static float PixelPerPoint { get; }
        public static UnityEngine.UIElements.MeshWriteData AllocateMeshWriteData(UnityEngine.UIElements.MeshGenerationContext mgc, int vertexCount, int indexCount);
        public static void ApplyWireMaterial();
        [System.Runtime.CompilerServices.Extension] public static void ClearPersistentViewData(UnityEditor.EditorWindow window);
        [System.Runtime.CompilerServices.Extension] public static void DisableViewDataPersistence(UnityEditor.EditorWindow window);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.Vector2 DoMeasure(UnityEngine.UIElements.VisualElement ve, float desiredWidth, UnityEngine.UIElements.VisualElement.MeasureMode widthMode, float desiredHeight, UnityEngine.UIElements.VisualElement.MeasureMode heightMode);
        public static void DrawImmediate(UnityEngine.UIElements.MeshGenerationContext mgc, System.Action callback);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.UIElements.StyleLength GetComputedStyleWidth(UnityEngine.UIElements.VisualElement ve);
        [System.Runtime.CompilerServices.Extension] public static System.UInt32 GetControlId(UnityEngine.UIElements.VisualElement self);
        [System.Runtime.CompilerServices.Extension] public static bool GetDisabledPseudoState(UnityEngine.UIElements.VisualElement ve);
        [System.Runtime.CompilerServices.IteratorStateMachine(typeof(UnityEditor.GraphToolsFoundation.Overdrive.Bridge.GraphViewStaticBridge.<GetGraphViewWindows>d__20<>))] public static System.Collections.Generic.IEnumerable<T> GetGraphViewWindows<T>(System.Type typeFilter) where T : UnityEditor.EditorWindow;
        public static UnityEngine.Vector2 GetMousePosition();
        [System.Runtime.CompilerServices.Extension] public static bool IsLayoutManual(UnityEngine.UIElements.VisualElement ve);
        [System.Runtime.CompilerServices.Extension] public static T MandatoryQ<T>(UnityEngine.UIElements.VisualElement e, string name = default(string), string className = default(string)) where T : UnityEngine.UIElements.VisualElement;
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.UIElements.VisualElement MandatoryQ(UnityEngine.UIElements.VisualElement e, string name = default(string), string className = default(string));
        [System.Runtime.CompilerServices.Extension] public static void ResetPositionProperties(UnityEngine.UIElements.VisualElement ve);
        public static float RoundToPixelGrid(float v);
        public static UnityEngine.Rect RoundToPixelGrid(UnityEngine.Rect r);
        public static UnityEngine.Vector2 RoundToPixelGrid(UnityEngine.Vector2 v);
        [System.Runtime.CompilerServices.Extension] public static void SetCheckedPseudoState(UnityEngine.UIElements.VisualElement ve, bool set);
        [System.Runtime.CompilerServices.Extension] public static void SetDisabledPseudoState(UnityEngine.UIElements.VisualElement ve, bool set);
        [System.Runtime.CompilerServices.Extension] public static void SetDisableInputEvents(UnityEditor.EditorWindow window, bool value);
        public static void SetDisableThrottling(bool disable);
        [System.Runtime.CompilerServices.Extension] public static void SetEventPropagationToNormal(UnityEngine.UIElements.EventBase e);
        [System.Runtime.CompilerServices.Extension] public static void SetLayout(UnityEngine.UIElements.VisualElement ve, UnityEngine.Rect layout);
        [System.Runtime.CompilerServices.Extension] public static void SetNextVertex(UnityEngine.UIElements.MeshWriteData md, UnityEngine.Vector3 pos, UnityEngine.Vector2 uv, UnityEngine.Color32 tint);
        [System.Runtime.CompilerServices.Extension] public static void SetRenderHintsForGraphView(UnityEngine.UIElements.VisualElement ve);
        public static void SetTimeSinceStartupCB(System.Func<long> cb);
        [System.Runtime.CompilerServices.Extension] public static void SetUpRender(UnityEngine.UIElements.VisualElement self, System.Action<UnityEngine.Material> onUpdateMaterial, System.Action<UnityEngine.UIElements.IPanel> onBeforeUpdate);
        public static void ShowColorPicker(System.Action<UnityEngine.Color> callback, UnityEngine.Color initialColor, bool withAlpha);
        public static System.Collections.Generic.List<UnityEditor.EditorWindow> ShowGraphViewWindowWithTools(System.Type blackboardType, System.Type minimapType, System.Type graphViewType);
        public static void SolidRectangle(UnityEngine.UIElements.MeshGenerationContext mgc, UnityEngine.Rect rectParams, UnityEngine.Color color, UnityEngine.UIElements.ContextType context);
        [System.Runtime.CompilerServices.Extension] public static void TearDownRender(UnityEngine.UIElements.VisualElement self, System.Action<UnityEngine.Material> onUpdateMaterial, System.Action<UnityEngine.UIElements.IPanel> onBeforeUpdate);
        [System.Runtime.CompilerServices.Extension] public static void UpdateScheduledEvents(UnityEngine.UIElements.VisualElement ve);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.Matrix4x4 WorldTransformInverse(UnityEngine.UIElements.VisualElement ve);
        public static class EventCommandNames
        {
            public const string Copy = Copy;
            public const string Cut = Cut;
            public const string Delete = Delete;
            public const string Duplicate = Duplicate;
            public const string FrameSelected = FrameSelected;
            public const string Paste = Paste;
            public const string SoftDelete = SoftDelete;
        }
    }

    [System.Runtime.CompilerServices.Extension] public static class GraphViewTestHelpers
    {
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.Bridge.GraphViewTestHelpers.TimerEventSchedulerWrapper CreateTimerEventSchedulerWrapper(UnityEngine.UIElements.VisualElement graphView);
        public class TimerEventSchedulerWrapper : System.IDisposable
        {
            public long TimeSinceStartup { get; set; }
            public virtual void Dispose();
            public void UpdateScheduledEvents();
        }
    }

    public abstract class GraphViewToolWindowBridge : UnityEditor.EditorWindow
    {
        protected GraphViewToolWindowBridge() {}
        public abstract void SelectGraphViewFromWindow(UnityEditor.EditorWindow window, UnityEngine.UIElements.VisualElement graphView, int graphViewIndexInWindow = 0);
    }

    public interface IDiscoveryShortcutProviderProxy
    {
        public abstract System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.Bridge.ShortcutDefinition> GetDefinedShortcuts();
    }

    public struct ShortcutDefinition
    {
        public System.Type Context;
        public UnityEditor.ShortcutManagement.ShortcutBinding DefaultBinding;
        public string DisplayName;
        public bool IsClutch;
        public System.Reflection.MethodInfo MethodInfo;
        public string ShortcutId;
        public string ToolName;
    }

    public sealed class ToolShortcutDiscoveryProvider : UnityEditor.ShortcutManagement.IDiscoveryShortcutProvider
    {
        public static UnityEditor.GraphToolsFoundation.Overdrive.Bridge.ToolShortcutDiscoveryProvider Instance { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.Bridge.IDiscoveryShortcutProviderProxy Proxy { get; set; }
        public static void RebuildShortcuts();
    }
}
