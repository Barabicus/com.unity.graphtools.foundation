// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace UnityEditor.GraphToolsFoundation.Overdrive.Bridge
{
    public static class ConsoleWindowBridge
    {
        public static T FindBoundGraphViewToolWindow<T>(UnityEditor.GraphToolsFoundation.Overdrive.Bridge.GraphViewBridge gv) where T : UnityEditor.GraphToolsFoundation.Overdrive.Bridge.GraphViewToolWindowBridge;
        public static void LogSticky(string message, string file, UnityEngine.LogType logType, UnityEngine.LogOption logOptions, int instanceId);
        public static void RemoveLogEntries();
        public static void SetEntryDoubleClickedDelegate(System.Action<string, int> doubleClickedCallback);
        public static void SpawnAttachedViewToolWindow<T>(UnityEditor.EditorWindow window, UnityEditor.GraphToolsFoundation.Overdrive.Bridge.GraphViewBridge gv) where T : UnityEditor.GraphToolsFoundation.Overdrive.Bridge.GraphViewToolWindowBridge;
    }

    [UnityEditor.InitializeOnLoad] public class EditorTitle
    {
        public EditorTitle() {}
    }

    public abstract class GraphViewBridge : UnityEditor.GraphToolsFoundation.Overdrive.Bridge.VisualElementBridge
    {
        public UnityEngine.UIElements.VisualElement contentViewContainer { get; protected set; }
        public System.Action redrawn { get; set; }
        public UnityEngine.UIElements.ITransform viewTransform { get; }
        protected GraphViewBridge() {}
        protected void OnEnterPanel();
        protected void OnLeavePanel();
        protected static class EventCommandNames
        {
            public const string Copy = Copy;
            public const string Cut = Cut;
            public const string Delete = Delete;
            public const string Duplicate = Duplicate;
            public const string FrameSelected = FrameSelected;
            public const string Paste = Paste;
            public const string SoftDelete = SoftDelete;
        }
    }

    [System.Runtime.CompilerServices.Extension] public static class GraphViewStaticBridge
    {
        public static UnityEngine.Color EditorPlayModeTint { get; }
        public static float PixelPerPoint { get; }
        public static UnityEngine.UIElements.MeshWriteData AllocateMeshWriteData(UnityEngine.UIElements.MeshGenerationContext mgc, int vertexCount, int indexCount);
        public static void ApplyWireMaterial();
        [System.Runtime.CompilerServices.Extension] public static void ClearPersistentViewData(UnityEditor.EditorWindow window);
        [System.Runtime.CompilerServices.Extension] public static void DisableViewDataPersistence(UnityEditor.EditorWindow window);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.Vector2 DoMeasure(UnityEngine.UIElements.VisualElement ve, float desiredWidth, UnityEngine.UIElements.VisualElement.MeasureMode widthMode, float desiredHeight, UnityEngine.UIElements.VisualElement.MeasureMode heightMode);
        public static void DrawImmediate(UnityEngine.UIElements.MeshGenerationContext mgc, System.Action callback);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.UIElements.StyleLength GetComputedStyleWidth(UnityEngine.UIElements.VisualElement ve);
        [System.Runtime.CompilerServices.Extension] public static bool GetDisabledPseudoState(UnityEngine.UIElements.VisualElement ve);
        [System.Runtime.CompilerServices.IteratorStateMachine(typeof(UnityEditor.GraphToolsFoundation.Overdrive.Bridge.GraphViewStaticBridge.<GetGraphViewWindows>d__17<>))] public static System.Collections.Generic.IEnumerable<T> GetGraphViewWindows<T>(System.Type typeFilter) where T : UnityEditor.EditorWindow;
        [System.Runtime.CompilerServices.Extension] public static bool IsLayoutManual(UnityEngine.UIElements.VisualElement ve);
        [System.Runtime.CompilerServices.Extension] public static T MandatoryQ<T>(UnityEngine.UIElements.VisualElement e, string name = default(string), string className = default(string)) where T : UnityEngine.UIElements.VisualElement;
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.UIElements.VisualElement MandatoryQ(UnityEngine.UIElements.VisualElement e, string name = default(string), string className = default(string));
        [System.Runtime.CompilerServices.Extension] public static void ResetPositionProperties(UnityEngine.UIElements.VisualElement ve);
        public static float RoundToPixelGrid(float v);
        public static UnityEngine.Rect RoundToPixelGrid(UnityEngine.Rect r);
        public static UnityEngine.Vector2 RoundToPixelGrid(UnityEngine.Vector2 v);
        public static string SearchField(UnityEngine.Rect position, string text);
        [System.Runtime.CompilerServices.Extension] public static void SetCheckedPseudoState(UnityEngine.UIElements.VisualElement ve, bool set);
        [System.Runtime.CompilerServices.Extension] public static void SetDisabledPseudoState(UnityEngine.UIElements.VisualElement ve, bool set);
        [System.Runtime.CompilerServices.Extension] public static void SetDisableInputEvents(UnityEditor.EditorWindow window, bool value);
        public static void SetDisableThrottling(bool disable);
        [System.Runtime.CompilerServices.Extension] public static void SetLayout(UnityEngine.UIElements.VisualElement ve, UnityEngine.Rect layout);
        [System.Runtime.CompilerServices.Extension] public static void SetNextVertex(UnityEngine.UIElements.MeshWriteData md, UnityEngine.Vector3 pos, UnityEngine.Vector2 uv, UnityEngine.Color32 tint);
        [System.Runtime.CompilerServices.Extension] public static void SetRenderHintsForGraphView(UnityEngine.UIElements.VisualElement ve);
        public static void SetTimeSinceStartupCB(System.Func<long> cb);
        public static void ShowColorPicker(System.Action<UnityEngine.Color> callback, UnityEngine.Color initialColor, bool withAlpha);
        public static System.Collections.Generic.List<UnityEditor.EditorWindow> ShowGraphViewWindowWithTools(System.Type blackboardType, System.Type minimapType, System.Type graphViewType);
        public static void SolidRectangle(UnityEngine.UIElements.MeshGenerationContext mgc, UnityEngine.Rect rectParams, UnityEngine.Color color, UnityEngine.UIElements.ContextType context);
        [System.Runtime.CompilerServices.Extension] public static void UpdateScheduledEvents(UnityEngine.UIElements.VisualElement ve);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.Matrix4x4 WorldTransformInverse(UnityEngine.UIElements.VisualElement ve);
    }

    public abstract class GraphViewToolWindowBridge : UnityEditor.EditorWindow
    {
        protected GraphViewToolWindowBridge() {}
        public abstract void SelectGraphViewFromWindow(UnityEditor.EditorWindow window, UnityEditor.GraphToolsFoundation.Overdrive.Bridge.GraphViewBridge graphView, int graphViewIndexInWindow = 0);
    }

    public class PromptSearcherEvent : UnityEngine.UIElements.EventBase<UnityEditor.GraphToolsFoundation.Overdrive.Bridge.PromptSearcherEvent>
    {
        public UnityEngine.Vector2 MenuPosition;
        public PromptSearcherEvent() {}
        public static UnityEditor.GraphToolsFoundation.Overdrive.Bridge.PromptSearcherEvent GetPooled(UnityEngine.Vector2 menuPosition);
        protected virtual void Init();
    }

    public abstract class VisualElementBridge : UnityEngine.UIElements.VisualElement
    {
        public System.UInt32 controlid { get; }
        protected VisualElementBridge() {}
        public static void ChangeMouseCursorTo(UnityEngine.UIElements.VisualElement ve, int internalCursorId);
        protected string GetFullHierarchicalViewDataKey();
        protected T GetOrCreateViewData<T>(object existing, string key) where T : class, new();
        protected void SaveViewData();
        protected void SetIsCompositeRoot();
    }
}
