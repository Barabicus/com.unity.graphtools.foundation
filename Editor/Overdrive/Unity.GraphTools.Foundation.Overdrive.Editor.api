// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace UnityEditor.GraphToolsFoundation.Overdrive
{
    public class AddControlPointOnEdgeCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public readonly int AtIndex;
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.IEditableEdge EdgeModel;
        public readonly UnityEngine.Vector2 Position;
        public AddControlPointOnEdgeCommand() {}
        public AddControlPointOnEdgeCommand(UnityEditor.GraphToolsFoundation.Overdrive.IEditableEdge edgeModel, int atIndex, UnityEngine.Vector2 position) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.AddControlPointOnEdgeCommand command);
    }

    public class AlignNodesCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public readonly bool Follow;
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.GraphView GraphView;
        public readonly System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> Nodes;
        public AlignNodesCommand() {}
        public AlignNodesCommand(UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView, System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> nodes, bool follow) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.AlignNodesCommand command);
    }

    public class AssemblyCache
    {
        public AssemblyCache() {}
    }

    public static class AssetActionHelper
    {
        public static void InitTemplate(UnityEditor.GraphToolsFoundation.Overdrive.IGraphTemplate template, UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
    }

    public static class AssetHelper
    {
        public const string AssetPath = Packages/com.unity.graphtools.foundation/Editor/Overdrive/;
    }

    public class Attacher
    {
        public UnityEngine.SpriteAlignment Alignment { get; set; }
        public float Distance { get; set; }
        public UnityEngine.UIElements.VisualElement Element { get; }
        public UnityEngine.Vector2 Offset { get; set; }
        public UnityEngine.UIElements.VisualElement Target { get; }
        public Attacher(UnityEngine.UIElements.VisualElement anchored, UnityEngine.UIElements.VisualElement target, UnityEngine.SpriteAlignment alignment) {}
        public void Detach();
        public void Reattach();
    }

    public class AutomaticGraphProcessor : UnityEngine.GraphToolsFoundation.CommandStateObserver.StateObserver<UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState>
    {
        public AutomaticGraphProcessor(UnityEditor.GraphToolsFoundation.Overdrive.PluginRepository pluginRepository) {}
        protected virtual void Observe(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState state);
        public void ResetTimer();
        public void StopTimer();
    }

    public class AutoPlaceElementsCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.IMovable>
    {
        public System.Collections.Generic.IReadOnlyList<UnityEngine.Vector2> Deltas;
        public AutoPlaceElementsCommand() {}
        public AutoPlaceElementsCommand(System.Collections.Generic.IReadOnlyList<UnityEngine.Vector2> delta, System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IMovable> models) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.AutoPlaceElementsCommand command);
    }

    public abstract class Badge : UnityEditor.GraphToolsFoundation.Overdrive.GraphElement
    {
        protected UnityEngine.UIElements.VisualElement m_Target;
        protected UnityEngine.SpriteAlignment Alignment { get; }
        protected UnityEditor.GraphToolsFoundation.Overdrive.Attacher Attacher { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.IBadgeModel BadgeModel { get; }
        protected Badge() {}
        protected virtual void Attach();
        protected void AttachTo(UnityEngine.UIElements.VisualElement target, UnityEngine.SpriteAlignment alignment);
        protected virtual void Detach();
    }

    public abstract class BaseModelUIPart : UnityEditor.GraphToolsFoundation.Overdrive.IModelUIPart
    {
        protected UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel m_Model;
        protected UnityEditor.GraphToolsFoundation.Overdrive.IModelUI m_OwnerElement;
        protected string m_ParentClassName;
        public UnityEditor.GraphToolsFoundation.Overdrive.ModelUIPartList PartList { get; }
        public virtual string PartName { get; }
        public abstract UnityEngine.UIElements.VisualElement Root { get; }
        protected BaseModelUIPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected abstract void BuildPartUI(UnityEngine.UIElements.VisualElement parent);
        public virtual void BuildUI(UnityEngine.UIElements.VisualElement parent);
        public virtual void OwnerAddedToView();
        public virtual void OwnerRemovedFromView();
        protected virtual void PartOwnerAddedToView();
        protected virtual void PartOwnerRemovedFromView();
        protected virtual void PostBuildPartUI();
        public virtual void PostBuildUI();
        public virtual void UpdateFromModel();
        protected abstract void UpdatePartFromModel();
    }

    public class Blackboard : UnityEditor.GraphToolsFoundation.Overdrive.GraphElement, UnityEditor.GraphToolsFoundation.Overdrive.IDragSource
    {
        public static readonly string blackboardContentPartName;
        public static readonly string blackboardHeaderPartName;
        protected UnityEngine.UIElements.VisualElement m_ContentContainer;
        protected UnityEditor.GraphToolsFoundation.Overdrive.Dragger m_Dragger;
        protected UnityEngine.UIElements.ScrollView m_ScrollView;
        public static readonly string persistenceKey;
        public static readonly string ussClassName;
        public static readonly string windowedModifierUssClassName;
        public virtual UnityEngine.UIElements.VisualElement contentContainer { get; }
        protected UnityEditor.GraphToolsFoundation.Overdrive.Dragger Dragger { get; set; }
        public System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.IHighlightable> Highlightables { get; }
        public bool Windowed { set; }
        public Blackboard() {}
        protected virtual void BuildContextualMenu(UnityEngine.UIElements.ContextualMenuPopulateEvent evt);
        protected virtual void BuildElementUI();
        protected virtual void BuildPartList();
        public virtual System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> GetSelection();
        public virtual bool IsMovable();
        protected virtual void OnEnterPanel(UnityEngine.UIElements.AttachToPanelEvent e);
        protected virtual void OnLeavePanel(UnityEngine.UIElements.DetachFromPanelEvent e);
        protected void OnRenameKeyDown(UnityEngine.UIElements.KeyDownEvent e);
        protected void OnShortcutDisplaySmartSearchEvent(UnityEditor.GraphToolsFoundation.Overdrive.ShortcutDisplaySmartSearchEvent e);
        protected virtual void PostBuildUI();
    }

    public class BlackboardDragAndDropHandler : UnityEditor.GraphToolsFoundation.Overdrive.DragAndDropHandler
    {
        protected UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher Dispatcher { get; }
        protected UnityEditor.GraphToolsFoundation.Overdrive.IDragSource DragSource { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.Stencil Stencil { get; }
        public BlackboardDragAndDropHandler(UnityEditor.GraphToolsFoundation.Overdrive.Blackboard blackboard) {}
        public BlackboardDragAndDropHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView) {}
        [JetBrains.Annotations.PublicAPI] public BlackboardDragAndDropHandler(UnityEditor.GraphToolsFoundation.Overdrive.IDragSource dragSource, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher dispatcher) {}
        public virtual void OnDragPerform(UnityEngine.UIElements.DragPerformEvent e);
        public virtual void OnDragUpdated(UnityEngine.UIElements.DragUpdatedEvent e);
    }

    public class BlackboardField : UnityEditor.GraphToolsFoundation.Overdrive.GraphElement, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElement, UnityEditor.GraphToolsFoundation.Overdrive.IHighlightable, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI
    {
        public static readonly string capsuleUssClassName;
        public static readonly string highlightedModifierUssClassName;
        public static readonly string iconExposedModifierUssClassName;
        public static readonly string iconUssClassName;
        public static readonly string nameLabelUssClassName;
        public static readonly string readOnlyModifierUssClassName;
        public static readonly string selectionBorderElementName;
        public static readonly string typeLabelUssClassName;
        public static readonly string ussClassName;
        public static readonly string writeOnlyModifierUssClassName;
        public virtual bool Highlighted { get; set; }
        public UnityEditor.GraphToolsFoundation.Overdrive.EditableLabel NameLabel { get; protected set; }
        protected UnityEditor.GraphToolsFoundation.Overdrive.SelectionDropper SelectionDropper { get; set; }
        public BlackboardField() {}
        protected virtual void BuildElementUI();
        protected virtual void PostBuildUI();
        public virtual bool ShouldHighlightItemUsage(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel elementModel);
        protected virtual void UpdateElementFromModel();
    }

    public class BlackboardHeaderPart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        protected static readonly string defaultSubTitle;
        protected static readonly string defaultTitle;
        public static readonly string subTitleUssClassName;
        public static readonly string titleUssClassName;
        public static readonly string ussClassName;
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected BlackboardHeaderPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement parent);
        public static UnityEditor.GraphToolsFoundation.Overdrive.BlackboardHeaderPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName);
        protected virtual void UpdatePartFromModel();
    }

    public class BlackboardRow : UnityEditor.GraphToolsFoundation.Overdrive.GraphElement
    {
        public static readonly string collapseButtonUssClassName;
        public static readonly string expandedModifierUssClassName;
        public static readonly string headerContainerUssClassName;
        public static readonly string headerUssClassName;
        protected UnityEditor.GraphToolsFoundation.Overdrive.CollapseButton m_CollapseButton;
        protected UnityEngine.UIElements.VisualElement m_HeaderContainer;
        protected UnityEngine.UIElements.VisualElement m_PropertyViewContainer;
        public static readonly string propertyViewUssClassName;
        public static readonly string rowFieldPartName;
        public static readonly string rowPropertiesPartName;
        public static readonly string ussClassName;
        public UnityEngine.UIElements.VisualElement FieldSlot { get; }
        public UnityEngine.UIElements.VisualElement PropertiesSlot { get; }
        public BlackboardRow() {}
        protected virtual void BuildElementUI();
        protected virtual void BuildPartList();
        protected virtual void PostBuildUI();
        protected virtual void UpdateElementFromModel();
    }

    public class BlackboardSection : UnityEngine.UIElements.VisualElement
    {
        public static readonly string addButtonUssClassName;
        public static readonly string dragIndicatorUssClassName;
        public static readonly string headerUssClassName;
        public static readonly string rowsUssClassName;
        public static readonly string titleLabelUssClassName;
        public static readonly string ussClassName;
        public virtual UnityEngine.UIElements.VisualElement contentContainer { get; }
        public BlackboardSection(UnityEditor.GraphToolsFoundation.Overdrive.Blackboard blackboard, string name) {}
    }

    public class BlackboardSectionListPart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        protected System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.GraphElement> m_Rows;
        protected System.Collections.Generic.Dictionary<string, UnityEditor.GraphToolsFoundation.Overdrive.BlackboardSection> m_Sections;
        public static readonly string ussClassName;
        public UnityEditor.GraphToolsFoundation.Overdrive.Blackboard Blackboard { get; }
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected BlackboardSectionListPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement parent);
        public static UnityEditor.GraphToolsFoundation.Overdrive.BlackboardSectionListPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName);
        protected virtual void PartOwnerAddedToView();
        protected virtual void PartOwnerRemovedFromView();
        protected virtual void UpdatePartFromModel();
    }

    public class BlackboardUpdateObserver : UnityEngine.GraphToolsFoundation.CommandStateObserver.StateObserver<UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState>
    {
        public BlackboardUpdateObserver(UnityEditor.GraphToolsFoundation.Overdrive.Blackboard blackboard) {}
        protected virtual void Observe(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState state);
    }

    public class BlackboardVariablePart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        public static readonly string blackboardVariablePartCreationContext;
        public static readonly string ussClassName;
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected BlackboardVariablePart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement parent);
        public static UnityEditor.GraphToolsFoundation.Overdrive.BlackboardVariablePart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName);
        protected virtual void PartOwnerAddedToView();
        protected virtual void PartOwnerRemovedFromView();
        protected virtual void UpdatePartFromModel();
    }

    public class BlackboardVariablePropertiesPart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        public static readonly string blackboardVariablePropertiesPartCreationContext;
        public static readonly string ussClassName;
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected BlackboardVariablePropertiesPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement parent);
        public static UnityEditor.GraphToolsFoundation.Overdrive.BlackboardVariablePropertiesPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName);
        protected virtual void PartOwnerAddedToView();
        protected virtual void PartOwnerRemovedFromView();
        protected virtual void UpdatePartFromModel();
    }

    public class BlackboardVariablePropertyView : UnityEditor.GraphToolsFoundation.Overdrive.GraphElement
    {
        protected UnityEngine.UIElements.Toggle m_ExposedToggle;
        protected UnityEngine.UIElements.TextField m_TooltipTextField;
        protected UnityEngine.UIElements.Button m_TypeSelectorButton;
        public static readonly string rowControlUssClassName;
        public static readonly string rowExposedUssClassName;
        public static readonly string rowInitValueUssClassName;
        public static readonly string rowLabelUssClassName;
        public static readonly string rowTooltipUssClassName;
        public static readonly string rowTypeSelectorUssClassName;
        public static readonly string rowUssClassName;
        public static readonly string ussClassName;
        public BlackboardVariablePropertyView() {}
        protected void AddExposedToggle();
        protected void AddInitializationField();
        protected void AddRow(string labelText, UnityEngine.UIElements.VisualElement control, string ussClassName);
        protected void AddTooltipField();
        protected void AddTypeSelector();
        protected virtual void BuildElementUI();
        protected virtual void BuildRows();
        protected void InsertRow(int index, string labelText, UnityEngine.UIElements.VisualElement control, string ussClassName);
        protected virtual void PostBuildUI();
        protected virtual void UpdateElementFromModel();
    }

    public class BlackboardViewStateComponent : UnityEngine.GraphToolsFoundation.CommandStateObserver.AssetStateComponent<UnityEditor.GraphToolsFoundation.Overdrive.BlackboardViewStateComponent.StateUpdater>
    {
        public BlackboardViewStateComponent() {}
        protected virtual void Dispose(bool disposing);
        public bool GetVariableDeclarationModelExpanded(UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel model);
        public class StateUpdater : UnityEngine.GraphToolsFoundation.CommandStateObserver.StateComponent<UnityEditor.GraphToolsFoundation.Overdrive.BlackboardViewStateComponent.StateUpdater, UnityEditor.GraphToolsFoundation.Overdrive.BlackboardViewStateComponent>
        {
            public StateUpdater() {}
            public void SetVariableDeclarationModelExpanded(UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel model, bool expanded);
        }
    }

    public class BlankPage : UnityEngine.UIElements.VisualElement
    {
        public static readonly string ussClassName;
        public System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.OnboardingProvider> OnboardingProviders { get; protected set; }
        public BlankPage(UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.OnboardingProvider> onboardingProviders) {}
        public virtual void CreateUI();
        public virtual void UpdateUI();
    }

    public class BoolPref : UnityEngine.GraphToolsFoundation.Overdrive.Enumeration
    {
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.BoolPref AutoAlignDraggedEdges;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.BoolPref AutoItemizeConstants;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.BoolPref AutoItemizeVariables;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.BoolPref AutoProcess;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.BoolPref DependenciesLogging;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.BoolPref ErrorOnMultipleDispatchesPerFrame;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.BoolPref ErrorOnRecursiveDispatch;
        [JetBrains.Annotations.PublicAPI] protected static readonly int k_ToolBasePrefId;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.BoolPref LogAllDispatchedCommands;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.BoolPref LogUIBuildTime;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.BoolPref LogUIUpdate;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.BoolPref SearcherInRegularWindow;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.BoolPref ShowUnusedNodes;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.BoolPref WarnOnUIFullRebuild;
        protected BoolPref(int id, string name, string[] obsoleteNames = default(string[])) {}
    }

    public class BuildAllEditorCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public BuildAllEditorCommand() {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.BuildAllEditorCommand command);
    }

    public class BypassNodesCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel>
    {
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.IInputOutputPortsNodeModel[] NodesToBypass;
        public BypassNodesCommand() {}
        public BypassNodesCommand(UnityEditor.GraphToolsFoundation.Overdrive.IInputOutputPortsNodeModel[] nodesToBypass, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel[] elementsToRemove) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.BypassNodesCommand command);
    }

    public class ChangeElementColorCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel>
    {
        public readonly UnityEngine.Color Color;
        public ChangeElementColorCommand() {}
        public ChangeElementColorCommand(UnityEngine.Color color, System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> elementModels) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.ChangeElementColorCommand command);
    }

    public class ChangeElementLayoutCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public UnityEngine.Rect Layout;
        public UnityEditor.GraphToolsFoundation.Overdrive.IResizable Model;
        public ChangeElementLayoutCommand() {}
        public ChangeElementLayoutCommand(UnityEditor.GraphToolsFoundation.Overdrive.IResizable resizableModel, UnityEngine.Rect newLayout) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.ChangeElementLayoutCommand command);
    }

    public class ChangePlacematZOrdersCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.IPlacematModel, int[]>
    {
        public ChangePlacematZOrdersCommand() {}
        public ChangePlacematZOrdersCommand(int[] zOrders, UnityEditor.GraphToolsFoundation.Overdrive.IPlacematModel[] placematModels) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.ChangePlacematZOrdersCommand command);
    }

    public class ChangeVariableDeclarationCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.IVariableNodeModel>
    {
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel Variable;
        public ChangeVariableDeclarationCommand() {}
        public ChangeVariableDeclarationCommand(System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IVariableNodeModel> models, UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel variable) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.ChangeVariableDeclarationCommand command);
    }

    public class ChangeVariableTypeCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public UnityEngine.GraphToolsFoundation.Overdrive.TypeHandle Handle;
        public UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel VariableDeclarationModel;
        public ChangeVariableTypeCommand() {}
        public ChangeVariableTypeCommand(UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel variableDeclarationModel, UnityEngine.GraphToolsFoundation.Overdrive.TypeHandle handle) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.ChangeVariableTypeCommand command);
    }

    public class ClearSelectionCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public ClearSelectionCommand() {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState state, UnityEditor.GraphToolsFoundation.Overdrive.ClearSelectionCommand command);
    }

    public class ClickSelector : UnityEngine.UIElements.MouseManipulator
    {
        public ClickSelector() {}
        protected void OnMouseDown(UnityEngine.UIElements.MouseDownEvent e);
        protected virtual void RegisterCallbacksOnTarget();
        protected virtual void UnregisterCallbacksFromTarget();
    }

    public class CollapseButton : UnityEngine.UIElements.VisualElement, UnityEngine.UIElements.INotifyValueChanged<bool>
    {
        public static readonly string collapsedUssClassName;
        public static readonly string iconElementName;
        public static readonly string iconElementUssClassName;
        public static readonly string ussClassName;
        protected UnityEngine.UIElements.Clickable Clickable { get; set; }
        public virtual bool value { get; set; }
        public CollapseButton() {}
        public virtual void SetValueWithoutNotify(bool newValue);
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEditor.GraphToolsFoundation.Overdrive.CollapseButton, UnityEditor.GraphToolsFoundation.Overdrive.CollapseButton.UxmlTraits>
        {
            public UxmlFactory() {}
        }
        public class UxmlTraits : UnityEngine.UIElements.VisualElement.UxmlTraits
        {
            public UxmlTraits() {}
            public virtual void Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        }
    }

    public class CollapseButtonPart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        protected UnityEditor.GraphToolsFoundation.Overdrive.CollapseButton CollapseButton { get; set; }
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected CollapseButtonPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement container);
        public static UnityEditor.GraphToolsFoundation.Overdrive.CollapseButtonPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI, string parentClassName);
        protected virtual void UpdatePartFromModel();
    }

    public class CollapsibleInOutNode : UnityEditor.GraphToolsFoundation.Overdrive.Node, UnityEditor.GraphToolsFoundation.Overdrive.ICustomSearcherHandler
    {
        public static readonly string bottomPortContainerPartName;
        public static readonly string collapseButtonPartName;
        public static readonly string collapsedUssClassName;
        public static readonly string titleIconContainerPartName;
        public static readonly string topPortContainerPartName;
        public System.Func<UnityEditor.GraphToolsFoundation.Overdrive.Node, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher, UnityEngine.Vector2, UnityEditor.GraphToolsFoundation.Overdrive.SearcherFilter, bool> CustomSearcherHandler { get; set; }
        public byte Progress { set; }
        public CollapsibleInOutNode() {}
        protected virtual void BuildPartList();
        public virtual bool HandleCustomSearcher(UnityEngine.Vector2 mousePosition, UnityEditor.GraphToolsFoundation.Overdrive.SearcherFilter filter = default(UnityEditor.GraphToolsFoundation.Overdrive.SearcherFilter));
        protected void OnCollapseChangeEvent(UnityEngine.UIElements.ChangeEvent<bool> evt);
        protected virtual void PostBuildUI();
        protected virtual void UpdateElementFromModel();
    }

    public class CommandDispatcher : UnityEngine.GraphToolsFoundation.CommandStateObserver.Dispatcher
    {
        [System.Obsolete(@"Please use State instead. Added in 0.9+.")] public UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState GraphToolState { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState State { get; }
        public CommandDispatcher(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState state) {}
        protected virtual bool IsDiagnosticFlagSet(UnityEngine.GraphToolsFoundation.CommandStateObserver.Diagnostics flag);
        protected virtual void PreDispatchCommand(UnityEngine.GraphToolsFoundation.CommandStateObserver.ICommand command);
        public void RegisterCommandHandler<TCommand>(UnityEngine.GraphToolsFoundation.CommandStateObserver.CommandHandler<UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState, TCommand> commandHandler) where TCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.ICommand;
    }

    public static class CommandDispatcherHelper
    {
    }

    public enum CommonSearcherTags
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.CommonSearcherTags StickyNote = 0;
        public int value__;
    }

    public class ConstantEditorBuilder : UnityEditor.GraphToolsFoundation.Overdrive.IConstantEditorBuilder
    {
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher CommandDispatcher { get; }
        public virtual bool ConstantIsLocked { get; }
        public virtual System.Action<UnityEngine.UIElements.IChangeEvent> OnValueChanged { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IPortModel PortModel { get; }
        public ConstantEditorBuilder(System.Action<UnityEngine.UIElements.IChangeEvent> onValueChanged, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, bool constantIsLocked, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel) {}
        public static bool FilterMethods(System.Reflection.MethodInfo x);
        public static System.Type KeySelector(System.Reflection.MethodInfo x);
    }

    [System.Runtime.CompilerServices.Extension] [UnityEditor.GraphToolsFoundation.Overdrive.GraphElementsExtensionMethodsCache(0)] public static class ConstantEditorExtensions
    {
        public static readonly string ussClassName;
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.UIElements.VisualElement BuildDefaultConstantEditor(UnityEditor.GraphToolsFoundation.Overdrive.IConstantEditorBuilder builder, UnityEditor.GraphToolsFoundation.Overdrive.IConstant constant);
        public static UnityEngine.UIElements.VisualElement BuildInlineValueEditor<T>(object oldValue, UnityEngine.UIElements.BaseField<T> field, System.Action<UnityEngine.UIElements.IChangeEvent> valueChangedCallback);
    }

    public class ConstantNodeEditorPart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        public static readonly string constantEditorElementUssClassName;
        public static readonly string labelUssName;
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected ConstantNodeEditorPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement container);
        public static UnityEditor.GraphToolsFoundation.Overdrive.ConstantNodeEditorPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI, string parentClassName);
        protected virtual void UpdatePartFromModel();
    }

    public class ContentDragger : UnityEngine.UIElements.MouseManipulator
    {
        public bool clampToParentEdges { get; set; }
        public UnityEngine.Vector2 panSpeed { get; set; }
        public ContentDragger() {}
        protected void OnMouseDown(UnityEngine.UIElements.MouseDownEvent e);
        protected void OnMouseMove(UnityEngine.UIElements.MouseMoveEvent e);
        protected void OnMouseUp(UnityEngine.UIElements.MouseUpEvent e);
        protected virtual void RegisterCallbacksOnTarget();
        protected virtual void UnregisterCallbacksFromTarget();
    }

    public class ContentZoomer : UnityEngine.UIElements.Manipulator
    {
        public static readonly float DefaultMaxScale;
        public static readonly float DefaultMinScale;
        public static readonly float DefaultReferenceScale;
        public static readonly float DefaultScaleStep;
        public float maxScale { get; set; }
        public float minScale { get; set; }
        public float referenceScale { get; set; }
        public float scaleStep { get; set; }
        public ContentZoomer() {}
        protected void OnWheel(UnityEngine.UIElements.WheelEvent evt);
        protected virtual void RegisterCallbacksOnTarget();
        protected virtual void UnregisterCallbacksFromTarget();
    }

    public class ContextBlocksPart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected ContextBlocksPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IContextNodeModel nodeModel, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement container);
        public static UnityEditor.GraphToolsFoundation.Overdrive.ContextBlocksPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI, string parentClassName);
        protected virtual void UpdatePartFromModel();
    }

    public class ContextNode : UnityEditor.GraphToolsFoundation.Overdrive.CollapsibleInOutNode
    {
        public static readonly string blocksPartName;
        public static readonly string ussClassName;
        public UnityEditor.GraphToolsFoundation.Overdrive.IContextNodeModel ContextNodeModel { get; }
        public ContextNode() {}
        protected virtual void BuildPartList();
        protected virtual void PostBuildUI();
        protected virtual void UpdateElementFromModel();
    }

    public class ConvertConstantNodesAndVariableNodesCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IConstantNodeModel> ConstantModels;
        public System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IVariableNodeModel> VariableModels;
        public ConvertConstantNodesAndVariableNodesCommand() {}
        public ConvertConstantNodesAndVariableNodesCommand(System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IConstantNodeModel> constantModels, System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IVariableNodeModel> variableModels) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.ConvertConstantNodesAndVariableNodesCommand command);
    }

    public class ConvertEdgesToPortalsCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        [System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])] public System.ValueTuple<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel, UnityEngine.Vector2, UnityEngine.Vector2>[] EdgeData;
        public ConvertEdgesToPortalsCommand() {}
        public ConvertEdgesToPortalsCommand(System.Collections.Generic.IReadOnlyList<System.ValueTuple<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel, UnityEngine.Vector2, UnityEngine.Vector2>> edgeData) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.ConvertEdgesToPortalsCommand command);
    }

    public class CopyPasteData
    {
        public System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> edges;
        public System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel> nodes;
        public System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.IPlacematModel> placemats;
        public static UnityEditor.GraphToolsFoundation.Overdrive.CopyPasteData s_LastCopiedData;
        public System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.IStickyNoteModel> stickyNotes;
        public UnityEngine.Vector2 topLeftNodePosition;
        public System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel> variableDeclarations;
        public CopyPasteData() {}
        public bool IsEmpty();
        public string ToJson();
    }

    public class CreateEdgeCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> EdgeModelsToDelete;
        public UnityEditor.GraphToolsFoundation.Overdrive.IPortModel FromPortModel;
        public UnityEditor.GraphToolsFoundation.Overdrive.Direction PortAlignment;
        public UnityEditor.GraphToolsFoundation.Overdrive.IPortModel ToPortModel;
        public CreateEdgeCommand() {}
        public CreateEdgeCommand(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel toPortModel, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel fromPortModel, System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> edgeModelsToDelete = default(System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel>), UnityEditor.GraphToolsFoundation.Overdrive.Direction portAlignment = 0) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.CreateEdgeCommand command);
    }

    public class CreateGraphVariableDeclarationCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public UnityEngine.GraphToolsFoundation.Overdrive.SerializableGUID Guid;
        public bool IsExposed;
        public UnityEditor.GraphToolsFoundation.Overdrive.ModifierFlags ModifierFlags;
        public UnityEngine.GraphToolsFoundation.Overdrive.TypeHandle TypeHandle;
        public string VariableName;
        public System.Type VariableType;
        public CreateGraphVariableDeclarationCommand() {}
        public CreateGraphVariableDeclarationCommand(string name, bool isExposed, UnityEngine.GraphToolsFoundation.Overdrive.TypeHandle typeHandle, UnityEditor.GraphToolsFoundation.Overdrive.ModifierFlags modifierFlags = 0, UnityEngine.GraphToolsFoundation.Overdrive.SerializableGUID guid = default(UnityEngine.GraphToolsFoundation.Overdrive.SerializableGUID)) {}
        public CreateGraphVariableDeclarationCommand(string name, bool isExposed, UnityEngine.GraphToolsFoundation.Overdrive.TypeHandle typeHandle, System.Type variableType, UnityEditor.GraphToolsFoundation.Overdrive.ModifierFlags modifierFlags = 0, UnityEngine.GraphToolsFoundation.Overdrive.SerializableGUID guid = default(UnityEngine.GraphToolsFoundation.Overdrive.SerializableGUID)) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.CreateGraphVariableDeclarationCommand command);
    }

    public class CreateNodeFromPortCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> EdgesToDelete;
        public System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> PortModels;
        public UnityEngine.Vector2 Position;
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphNodeModelSearcherItem SelectedItem;
        public CreateNodeFromPortCommand() {}
        public CreateNodeFromPortCommand(System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> portModel, UnityEngine.Vector2 position, UnityEditor.GraphToolsFoundation.Overdrive.GraphNodeModelSearcherItem selectedItem, System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> edgesToDelete = default(System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel>)) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.CreateNodeFromPortCommand command);
    }

    public class CreateNodeFromSearcherCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public UnityEngine.GraphToolsFoundation.Overdrive.SerializableGUID Guid;
        public UnityEngine.Vector2 Position;
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphNodeModelSearcherItem SelectedItem;
        public CreateNodeFromSearcherCommand() {}
        public CreateNodeFromSearcherCommand(UnityEngine.Vector2 position, UnityEditor.GraphToolsFoundation.Overdrive.GraphNodeModelSearcherItem selectedItem, UnityEngine.GraphToolsFoundation.Overdrive.SerializableGUID guid = default(UnityEngine.GraphToolsFoundation.Overdrive.SerializableGUID)) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.CreateNodeFromSearcherCommand command);
    }

    public class CreateNodeOnEdgeCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel EdgeModel;
        public UnityEngine.GraphToolsFoundation.Overdrive.SerializableGUID Guid;
        public UnityEngine.Vector2 Position;
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphNodeModelSearcherItem SelectedItem;
        public CreateNodeOnEdgeCommand() {}
        public CreateNodeOnEdgeCommand(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edgeModel, UnityEngine.Vector2 position, UnityEditor.GraphToolsFoundation.Overdrive.GraphNodeModelSearcherItem selectedItem, UnityEngine.GraphToolsFoundation.Overdrive.SerializableGUID guid = default(UnityEngine.GraphToolsFoundation.Overdrive.SerializableGUID)) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.CreateNodeOnEdgeCommand command);
    }

    public class CreateOppositePortalCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel>
    {
        public CreateOppositePortalCommand() {}
        public CreateOppositePortalCommand(System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel> portalModels) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.CreateOppositePortalCommand command);
    }

    public class CreatePlacematCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public UnityEngine.Rect Position;
        public string Title;
        public CreatePlacematCommand() {}
        public CreatePlacematCommand(UnityEngine.Rect position, string title = default(string)) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.CreatePlacematCommand command);
    }

    public class CreateStickyNoteCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public readonly UnityEngine.Rect Position;
        public CreateStickyNoteCommand() {}
        public CreateStickyNoteCommand(UnityEngine.Rect position) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.CreateStickyNoteCommand command);
    }

    public class CreateVariableNodesCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public bool AutoAlign;
        public UnityEditor.GraphToolsFoundation.Overdrive.IPortModel ConnectAfterCreation;
        public System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> EdgeModelsToDelete;
        public System.Collections.Generic.List<System.ValueTuple<UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel, UnityEngine.GraphToolsFoundation.Overdrive.SerializableGUID, UnityEngine.Vector2>> VariablesToCreate;
        public CreateVariableNodesCommand() {}
        public CreateVariableNodesCommand(System.Collections.Generic.IReadOnlyList<System.ValueTuple<UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel, UnityEngine.GraphToolsFoundation.Overdrive.SerializableGUID, UnityEngine.Vector2>> variablesToCreate) {}
        public CreateVariableNodesCommand(UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel graphElementModel, UnityEngine.Vector2 mousePosition, System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> edgeModelsToDelete = default(System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel>), UnityEditor.GraphToolsFoundation.Overdrive.IPortModel connectAfterCreation = default(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel), bool autoAlign = False) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.CreateVariableNodesCommand command);
    }

    [System.Runtime.CompilerServices.Extension] [UnityEditor.GraphToolsFoundation.Overdrive.GraphElementsExtensionMethodsCache(0)] public static class DefaultFactoryExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IModelUI CreateBlackboard(UnityEditor.GraphToolsFoundation.Overdrive.ElementBuilder elementBuilder, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.IBlackboardGraphModel model);
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IModelUI CreateContext(UnityEditor.GraphToolsFoundation.Overdrive.ElementBuilder elementBuilder, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.IContextNodeModel nodeModel);
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IModelUI CreateEdge(UnityEditor.GraphToolsFoundation.Overdrive.ElementBuilder elementBuilder, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel model);
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IModelUI CreateEdgePortal(UnityEditor.GraphToolsFoundation.Overdrive.ElementBuilder elementBuilder, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel model);
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IModelUI CreateErrorBadgeModelUI(UnityEditor.GraphToolsFoundation.Overdrive.ElementBuilder elementBuilder, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.IErrorBadgeModel model);
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IModelUI CreateNode(UnityEditor.GraphToolsFoundation.Overdrive.ElementBuilder elementBuilder, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel model);
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IModelUI CreatePlacemat(UnityEditor.GraphToolsFoundation.Overdrive.ElementBuilder elementBuilder, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.IPlacematModel model);
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IModelUI CreatePort(UnityEditor.GraphToolsFoundation.Overdrive.ElementBuilder elementBuilder, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel model);
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IModelUI CreateStickyNote(UnityEditor.GraphToolsFoundation.Overdrive.ElementBuilder elementBuilder, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.IStickyNoteModel model);
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IModelUI CreateValueBadgeModelUI(UnityEditor.GraphToolsFoundation.Overdrive.ElementBuilder elementBuilder, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.IValueBadgeModel model);
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IModelUI CreateVariableDeclarationModelUI(UnityEditor.GraphToolsFoundation.Overdrive.ElementBuilder elementBuilder, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel model);
    }

    public class DefaultSearcherDatabaseProvider : UnityEditor.GraphToolsFoundation.Overdrive.ISearcherDatabaseProvider
    {
        public DefaultSearcherDatabaseProvider(UnityEditor.GraphToolsFoundation.Overdrive.Stencil stencil) {}
        public virtual System.Collections.Generic.List<UnityEditor.Searcher.SearcherDatabaseBase> GetDynamicSearcherDatabases(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> portModel);
        public virtual System.Collections.Generic.List<UnityEditor.Searcher.SearcherDatabaseBase> GetDynamicSearcherDatabases(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel);
        public virtual System.Collections.Generic.List<UnityEditor.Searcher.SearcherDatabaseBase> GetGraphElementsSearcherDatabases(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
        public virtual System.Collections.Generic.List<UnityEditor.Searcher.SearcherDatabaseBase> GetGraphVariablesSearcherDatabases(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
        public virtual System.Collections.Generic.List<UnityEditor.Searcher.SearcherDatabase> GetVariableTypesSearcherDatabases();
    }

    public class DeleteEdgeCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel>
    {
        public DeleteEdgeCommand() {}
        public DeleteEdgeCommand(System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> edgesToDelete) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.DeleteEdgeCommand command);
    }

    public class DeleteElementsCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel>
    {
        public DeleteElementsCommand() {}
        public DeleteElementsCommand(System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> elementsToRemove) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.DeleteElementsCommand command);
    }

    [System.Flags] public enum DependencyType
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.DependencyType Geometry = 2;
        public const UnityEditor.GraphToolsFoundation.Overdrive.DependencyType None = 0;
        public const UnityEditor.GraphToolsFoundation.Overdrive.DependencyType Removal = 4;
        public const UnityEditor.GraphToolsFoundation.Overdrive.DependencyType Style = 1;
        public int value__;
    }

    [System.Runtime.CompilerServices.Extension] public static class DependencyTypeExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static bool HasFlagFast(UnityEditor.GraphToolsFoundation.Overdrive.DependencyType value, UnityEditor.GraphToolsFoundation.Overdrive.DependencyType flag);
    }

    public class DisconnectNodeCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel>
    {
        public DisconnectNodeCommand() {}
        public DisconnectNodeCommand(params UnityEditor.GraphToolsFoundation.Overdrive.INodeModel[] nodeModels) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.DisconnectNodeCommand command);
    }

    public abstract class DragAndDropHandler : UnityEditor.GraphToolsFoundation.Overdrive.IDragAndDropHandler
    {
        protected DragAndDropHandler() {}
        public virtual void OnDragEnter(UnityEngine.UIElements.DragEnterEvent e);
        public virtual void OnDragExited(UnityEngine.UIElements.DragExitedEvent e);
        public virtual void OnDragLeave(UnityEngine.UIElements.DragLeaveEvent e);
        public virtual void OnDragPerform(UnityEngine.UIElements.DragPerformEvent evt);
        public virtual void OnDragUpdated(UnityEngine.UIElements.DragUpdatedEvent e);
    }

    public class Dragger : UnityEngine.UIElements.MouseManipulator
    {
        public bool ClampToParentEdges { get; set; }
        public Dragger() {}
        protected UnityEngine.Rect CalculatePosition(float x, float y, float width, float height);
        protected void OnMouseDown(UnityEngine.UIElements.MouseDownEvent e);
        protected void OnMouseMove(UnityEngine.UIElements.MouseMoveEvent e);
        protected void OnMouseUp(UnityEngine.UIElements.MouseUpEvent e);
        protected virtual void RegisterCallbacksOnTarget();
        protected virtual void UnregisterCallbacksFromTarget();
    }

    public abstract class DropTarget : UnityEditor.GraphToolsFoundation.Overdrive.ModelUI
    {
        protected bool CurrentDropAccepted { get; }
        public DropTarget() {}
        public abstract bool CanAcceptSelectionDrop(System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> selection);
        protected virtual void OnDragEnd();
        public virtual void OnDragEnter(UnityEngine.UIElements.DragEnterEvent evt);
        public virtual void OnDragExited(UnityEngine.UIElements.DragExitedEvent evt);
        public virtual void OnDragLeave(UnityEngine.UIElements.DragLeaveEvent evt);
        public virtual void OnDragPerform(UnityEngine.UIElements.DragPerformEvent evt);
        public virtual void OnDragUpdated(UnityEngine.UIElements.DragUpdatedEvent evt);
    }

    public class Edge : UnityEditor.GraphToolsFoundation.Overdrive.GraphElement
    {
        public static readonly string edgeBubblePartName;
        public static readonly string edgeControlPartName;
        public static readonly string editModeModifierUssClassName;
        public static readonly string ghostModifierUssClassName;
        public static readonly string ussClassName;
        public UnityEditor.GraphToolsFoundation.Overdrive.EdgeControl EdgeControl { get; }
        protected UnityEditor.GraphToolsFoundation.Overdrive.EdgeManipulator EdgeManipulator { get; set; }
        public UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel EdgeModel { get; }
        public UnityEngine.Vector2 From { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.IPortModel Input { get; }
        public bool IsGhostEdge { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.IPortModel Output { get; }
        public virtual bool ShowInMiniMap { get; }
        public UnityEngine.Vector2 To { get; }
        public Edge() {}
        public virtual void AddBackwardDependencies();
        public virtual void AddModelDependencies();
        protected virtual void BuildContextualMenu(UnityEngine.UIElements.ContextualMenuPopulateEvent evt);
        protected virtual void BuildPartList();
        public virtual bool ContainsPoint(UnityEngine.Vector2 localPoint);
        public virtual bool Overlaps(UnityEngine.Rect rectangle);
        protected virtual void PostBuildUI();
        protected virtual void UpdateElementFromModel();
    }

    public class EdgeBubble : UnityEngine.UIElements.Label
    {
        public static readonly string ussClassName;
        public virtual string text { get; set; }
        public EdgeBubble() {}
        public void AttachTo(UnityEngine.UIElements.VisualElement edgeControlTarget, UnityEngine.SpriteAlignment align);
        public void Detach();
        public void SetAttacherOffset(UnityEngine.Vector2 offset);
    }

    public class EdgeBubblePart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        protected UnityEditor.GraphToolsFoundation.Overdrive.EdgeBubble m_EdgeBubble;
        public static readonly string ussClassName;
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected EdgeBubblePart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement container);
        public static UnityEditor.GraphToolsFoundation.Overdrive.EdgeBubblePart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI, string parentClassName);
        protected virtual void PostBuildPartUI();
        protected virtual bool ShouldShow();
        protected virtual void UpdatePartFromModel();
    }

    public class EdgeConnector : UnityEngine.UIElements.MouseManipulator
    {
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.EdgeDragHelper edgeDragHelper { get; }
        public EdgeConnector(UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView, UnityEditor.GraphToolsFoundation.Overdrive.EdgeConnectorListener listener, System.Func<UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel, UnityEditor.GraphToolsFoundation.Overdrive.InternalModels.GhostEdgeModel> ghostEdgeViewModelCreator = default(System.Func<UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel, UnityEditor.GraphToolsFoundation.Overdrive.InternalModels.GhostEdgeModel>)) {}
        protected virtual void OnMouseDown(UnityEngine.UIElements.MouseDownEvent e);
        protected virtual void OnMouseMove(UnityEngine.UIElements.MouseMoveEvent e);
        protected virtual void OnMouseUp(UnityEngine.UIElements.MouseUpEvent e);
        protected virtual void RegisterCallbacksOnTarget();
        public void SetDropDelegate(System.Action<UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.Edge> action);
        public void SetDropOutsideDelegate(System.Action<UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher, System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.Edge>, System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel>, UnityEngine.Vector2> action);
        protected virtual void UnregisterCallbacksFromTarget();
    }

    public class EdgeConnectorListener
    {
        public EdgeConnectorListener() {}
        public static System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> GetDropEdgeModelsToDelete(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edge);
        public void OnDrop(UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.Edge edge, UnityEditor.GraphToolsFoundation.Overdrive.Edge originalEdge);
        public void OnDropOutsidePort(UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.Edge> edges, System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> ports, UnityEngine.Vector2 position, UnityEditor.GraphToolsFoundation.Overdrive.Edge originalEdge);
        public void SetDropDelegate(System.Action<UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.Edge> action);
        public void SetDropOutsideDelegate(System.Action<UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher, System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.Edge>, System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel>, UnityEngine.Vector2> action);
    }

    public class EdgeControl : UnityEngine.UIElements.VisualElement
    {
        public UnityEngine.Vector2 ControlPointOffset { get; set; }
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphView GraphView { get; }
        public UnityEngine.Color InputColor { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.Orientation InputOrientation { get; set; }
        public int LineWidth { get; set; }
        public UnityEngine.Color OutputColor { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.Orientation OutputOrientation { get; set; }
        public System.Collections.Generic.List<UnityEngine.Vector2> RenderPoints { get; }
        public EdgeControl() {}
        public virtual bool ContainsPoint(UnityEngine.Vector2 localPoint);
        public void FindNearestCurveSegment(UnityEngine.Vector2 localPoint, out float minSquareDistance, out int nearestControlPointIndex, out int nearestRenderPointIndex);
        protected void OnCustomStyleResolved(UnityEngine.UIElements.CustomStyleResolvedEvent e);
        public virtual bool Overlaps(UnityEngine.Rect rect);
        public void RebuildControlPointsUI();
        public void ResetColor();
        public void SetColor(UnityEngine.Color inputColor, UnityEngine.Color outputColor);
        public void UpdateLayout();
        protected virtual void UpdateRenderPoints();
    }

    public class EdgeControlPart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected EdgeControlPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement container);
        public static UnityEditor.GraphToolsFoundation.Overdrive.EdgeControlPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName);
        protected virtual void UpdatePartFromModel();
    }

    public class EdgeControlPoint : UnityEngine.UIElements.VisualElement
    {
        public static readonly string removeControlPointMenuItem;
        public static readonly string ussClassName;
        protected UnityEngine.UIElements.ContextualMenuManipulator ContextualMenuManipulator { get; set; }
        public EdgeControlPoint(UnityEditor.GraphToolsFoundation.Overdrive.EdgeControl edgeControl, UnityEditor.GraphToolsFoundation.Overdrive.IEditableEdge edgeModel, int controlPointIndex) {}
        protected virtual void BuildContextualMenu(UnityEngine.UIElements.ContextualMenuPopulateEvent evt);
        public void SetPositions(UnityEngine.Vector2 cpPosition, UnityEngine.Vector2 lhPosition, UnityEngine.Vector2 rhPosition);
    }

    public class EdgeDragHelper
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.IPortModel draggedPort { get; set; }
        public UnityEditor.GraphToolsFoundation.Overdrive.InternalModels.GhostEdgeModel edgeCandidateModel { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphView GraphView { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.Edge originalEdge { get; set; }
        public EdgeDragHelper(UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView, UnityEditor.GraphToolsFoundation.Overdrive.EdgeConnectorListener listener, System.Func<UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel, UnityEditor.GraphToolsFoundation.Overdrive.InternalModels.GhostEdgeModel> ghostEdgeViewModelCreator) {}
        public void CreateEdgeCandidate(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
        public UnityEditor.GraphToolsFoundation.Overdrive.Edge CreateGhostEdge(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
        public bool HandleMouseDown(UnityEngine.UIElements.MouseDownEvent evt);
        public void HandleMouseMove(UnityEngine.UIElements.MouseMoveEvent evt);
        public void HandleMouseUp(UnityEngine.UIElements.MouseUpEvent evt, bool isFirstEdge, System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.Edge> otherEdges, System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> otherPorts);
        public void Reset(bool didConnect = False);
    }

    public class EdgeManipulator : UnityEngine.UIElements.MouseManipulator
    {
        public EdgeManipulator() {}
        protected void OnKeyDown(UnityEngine.UIElements.KeyDownEvent evt);
        protected void OnMouseDown(UnityEngine.UIElements.MouseDownEvent evt);
        protected void OnMouseMove(UnityEngine.UIElements.MouseMoveEvent evt);
        protected void OnMouseUp(UnityEngine.UIElements.MouseUpEvent evt);
        protected virtual void RegisterCallbacksOnTarget();
        protected virtual void UnregisterCallbacksFromTarget();
    }

    public class EditableLabel : UnityEngine.UIElements.VisualElement
    {
        public static readonly string labelName;
        public static readonly string textFieldName;
        protected UnityEngine.UIElements.ContextualMenuManipulator ContextualMenuManipulator { get; set; }
        public bool multiline { set; }
        public EditableLabel() {}
        public void BeginEditing();
        protected virtual void BuildContextualMenu(UnityEngine.UIElements.ContextualMenuPopulateEvent evt);
        public void SetValueWithoutNotify(string value);
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEditor.GraphToolsFoundation.Overdrive.EditableLabel, UnityEditor.GraphToolsFoundation.Overdrive.EditableLabel.UxmlTraits>
        {
            public UxmlFactory() {}
        }
        public class UxmlTraits : UnityEngine.UIElements.VisualElement.UxmlTraits
        {
            public UxmlTraits() {}
            public virtual void Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        }
    }

    public class EditableTitlePart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        public static readonly string titleLabelName;
        public static readonly string ussClassName;
        protected virtual bool HasEditableLabel { get; }
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected UnityEngine.UIElements.VisualElement TitleContainer { get; set; }
        public UnityEngine.UIElements.VisualElement TitleLabel { get; protected set; }
        protected EditableTitlePart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName, bool multiline) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement container);
        public static UnityEditor.GraphToolsFoundation.Overdrive.EditableTitlePart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI, string parentClassName, bool multiline = False);
        protected void OnRename(UnityEngine.UIElements.ChangeEvent<string> e);
        protected virtual void PostBuildPartUI();
        protected virtual void UpdatePartFromModel();
    }

    public class ElementBuilder
    {
        public string Context { get; set; }
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphView GraphView { get; set; }
        public ElementBuilder() {}
    }

    public class ErrorBadge : UnityEditor.GraphToolsFoundation.Overdrive.Badge
    {
        public static readonly string hasErrorUssClassName;
        public static readonly string iconUssClassName;
        public static readonly string textUssClassName;
        public static readonly string tipUssClassName;
        public static readonly string ussClassName;
        public string VisualStyle { set; }
        public ErrorBadge() {}
        protected virtual void Attach();
        protected virtual void BuildElementUI();
        protected virtual void Detach();
        protected virtual void ExecuteDefaultAction(UnityEngine.UIElements.EventBase evt);
        protected virtual void PostBuildUI();
        protected virtual void UpdateElementFromModel();
    }

    public class ErrorToolbar : UnityEditor.GraphToolsFoundation.Overdrive.Toolbar
    {
        public ErrorToolbar(UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView) {}
        public void UpdateUI();
    }

    public class ExpandOrCollapseBlackboardRowCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public readonly bool Expand;
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel Row;
        public ExpandOrCollapseBlackboardRowCommand() {}
        public ExpandOrCollapseBlackboardRowCommand(bool expand, UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel row) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.ExpandOrCollapseBlackboardRowCommand command);
    }

    public static class ExtensionMethodCache<TExtendedType>
    {
        public static System.Reflection.MethodInfo GetExtensionMethod(System.Type targetType, System.Func<System.Reflection.MethodInfo, bool> filterMethods, System.Func<System.Reflection.MethodInfo, System.Type> keySelector);
    }

    public class FindInGraphAdapter : UnityEditor.GraphToolsFoundation.Overdrive.SimpleSearcherAdapter
    {
        public FindInGraphAdapter(System.Action<UnityEditor.GraphToolsFoundation.Overdrive.FindInGraphAdapter.FindSearcherItem> onHighlightDelegate) {}
        public virtual void OnSelectionChanged(System.Collections.Generic.IEnumerable<UnityEditor.Searcher.SearcherItem> items);
        public class FindSearcherItem : UnityEditor.Searcher.SearcherItem
        {
            public UnityEditor.GraphToolsFoundation.Overdrive.INodeModel Node { get; }
            public FindSearcherItem(UnityEditor.GraphToolsFoundation.Overdrive.INodeModel node, string title, string help = , System.Collections.Generic.List<UnityEditor.Searcher.SearcherItem> children = default(System.Collections.Generic.List<UnityEditor.Searcher.SearcherItem>)) {}
        }
    }

    public class FourWayResizerPart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected FourWayResizerPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement container);
        public static UnityEditor.GraphToolsFoundation.Overdrive.FourWayResizerPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI, string parentClassName);
        protected virtual void UpdatePartFromModel();
    }

    public class FreehandSelector : UnityEngine.UIElements.MouseManipulator
    {
        public FreehandSelector() {}
        protected void OnKeyDown(UnityEngine.UIElements.KeyDownEvent e);
        protected void OnKeyUp(UnityEngine.UIElements.KeyUpEvent e);
        protected void OnMouseDown(UnityEngine.UIElements.MouseDownEvent e);
        protected void OnMouseMove(UnityEngine.UIElements.MouseMoveEvent e);
        protected void OnMouseUp(UnityEngine.UIElements.MouseUpEvent e);
        protected virtual void RegisterCallbacksOnTarget();
        protected virtual void UnregisterCallbacksFromTarget();
    }

    public static class GraphAssetCreationHelpers<TGraphAssetModelType> where TGraphAssetModelType : UnityEngine.ScriptableObject, UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel
    {
        public static UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel CreateGraphAsset(System.Type stencilType, string name, string assetPath, UnityEditor.GraphToolsFoundation.Overdrive.IGraphTemplate graphTemplate = default(UnityEditor.GraphToolsFoundation.Overdrive.IGraphTemplate), bool writeOnDisk = True);
        public static UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel CreateInMemoryGraphAsset(System.Type stencilType, string name, string assetPath, UnityEditor.GraphToolsFoundation.Overdrive.IGraphTemplate graphTemplate = default(UnityEditor.GraphToolsFoundation.Overdrive.IGraphTemplate));
        public static void CreateInProjectWindow(UnityEditor.GraphToolsFoundation.Overdrive.IGraphTemplate template, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, string path);
        public static UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel PromptToCreate(UnityEditor.GraphToolsFoundation.Overdrive.IGraphTemplate template, string title, string prompt, string assetExtension);
    }

    public abstract class GraphElement : UnityEditor.GraphToolsFoundation.Overdrive.ModelUI, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElement, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI
    {
        public static readonly string selectableModifierUssClassName;
        public static readonly string ussClassName;
        protected UnityEditor.GraphToolsFoundation.Overdrive.ClickSelector ClickSelector { get; set; }
        public int Layer { get; set; }
        public UnityEngine.Color MinimapColor { get; protected set; }
        public virtual bool ShowInMiniMap { get; set; }
        protected GraphElement() {}
        public virtual bool IsMovable();
        public static bool IsRenameKey<T>(UnityEngine.UIElements.KeyboardEventBase<T> e) where T : UnityEngine.UIElements.KeyboardEventBase<T>, new();
        public bool IsSelected();
        protected void OnRenameKeyDown(UnityEngine.UIElements.KeyDownEvent e);
        protected virtual void PostBuildUI();
        public virtual bool Rename();
        public void ResetLayer();
        public virtual void SetPosition(UnityEngine.Rect newPos);
        protected virtual void UpdateElementFromModel();
    }

    public static class GraphElementFactory
    {
        [JetBrains.Annotations.CanBeNull] public static T CreateUI<T>(UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model) where T : class, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI;
        public static T CreateUI<T>(UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, string context) where T : class, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI;
    }

    [System.Runtime.CompilerServices.Extension] public static class GraphElementHelper
    {
        public static UnityEngine.UIElements.VisualTreeAsset LoadUXML(string uxmlName);
    }

    public abstract class GraphElementSearcherAdapter : UnityEditor.Searcher.SearcherAdapter, UnityEditor.GraphToolsFoundation.Overdrive.IGTFSearcherAdapter, UnityEditor.Searcher.ISearcherAdapter
    {
        protected UnityEngine.UIElements.VisualElement m_DetailsPanel;
        protected UnityEngine.UIElements.Label m_DetailsTitle;
        protected UnityEngine.UIElements.ScrollView m_Scrollview;
        public virtual float InitialSplitterDetailRatio { get; }
        protected GraphElementSearcherAdapter(string title) {}
        protected virtual System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> CreateGraphElements(UnityEditor.Searcher.SearcherItem item);
        public virtual void InitDetailsPanel(UnityEngine.UIElements.VisualElement detailsPanel);
        protected virtual void OnGraphElementsCreated(UnityEditor.Searcher.SearcherItem searcherItem, System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> elements);
        public virtual void OnSelectionChanged(System.Collections.Generic.IEnumerable<UnityEditor.Searcher.SearcherItem> items);
        public virtual void SetInitialSplitterDetailRatio(float ratio);
    }

    [JetBrains.Annotations.PublicAPI] public class GraphElementSearcherDatabase
    {
        public readonly System.Collections.Generic.List<UnityEditor.Searcher.SearcherItem> Items;
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.Stencil Stencil;
        public GraphElementSearcherDatabase(UnityEditor.GraphToolsFoundation.Overdrive.Stencil stencil, UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel) {}
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphElementSearcherDatabase AddConstants(System.Collections.Generic.IEnumerable<System.Type> types);
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphElementSearcherDatabase AddConstants(System.Type type);
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphElementSearcherDatabase AddGraphVariables(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphElementSearcherDatabase AddNodesWithSearcherItemAttribute();
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphElementSearcherDatabase AddStickyNote();
        public UnityEditor.Searcher.LuceneSearcherDatabase Build();
    }

    [JetBrains.Annotations.MeansImplicitUse(3)] public class GraphElementsExtensionMethodsCacheAttribute : System.Attribute
    {
        public const int toolDefaultPriority = 1;
        public int Priority { get; }
        public GraphElementsExtensionMethodsCacheAttribute(int priority = 1) {}
    }

    public struct GraphNodeCreationData : UnityEditor.GraphToolsFoundation.Overdrive.IGraphNodeCreationData
    {
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel GraphModel { get; }
        public virtual UnityEngine.GraphToolsFoundation.Overdrive.SerializableGUID Guid { get; }
        public virtual UnityEngine.Vector2 Position { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.SpawnFlags SpawnFlags { get; }
        public GraphNodeCreationData(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel, UnityEngine.Vector2 position, UnityEditor.GraphToolsFoundation.Overdrive.SpawnFlags spawnFlags = 0, UnityEngine.GraphToolsFoundation.Overdrive.SerializableGUID guid = default(UnityEngine.GraphToolsFoundation.Overdrive.SerializableGUID)) {}
    }

    public class GraphNodeModelSearcherItem : UnityEditor.Searcher.SearcherItem, UnityEditor.GraphToolsFoundation.Overdrive.ISearcherItemDataProvider
    {
        public System.Func<UnityEditor.GraphToolsFoundation.Overdrive.GraphNodeCreationData, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel[]> CreateElements { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.ISearcherItemData Data { get; }
        public virtual string Name { get; }
        public GraphNodeModelSearcherItem(UnityEditor.GraphToolsFoundation.Overdrive.ISearcherItemData data, System.Func<UnityEditor.GraphToolsFoundation.Overdrive.GraphNodeCreationData, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> createElement, System.Func<string> getName, System.Collections.Generic.List<UnityEditor.Searcher.SearcherItem> children = default(System.Collections.Generic.List<UnityEditor.Searcher.SearcherItem>), string help = default(string)) {}
        public GraphNodeModelSearcherItem(UnityEditor.GraphToolsFoundation.Overdrive.ISearcherItemData data, System.Func<UnityEditor.GraphToolsFoundation.Overdrive.GraphNodeCreationData, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> createElement, string name, System.Collections.Generic.List<UnityEditor.Searcher.SearcherItem> children = default(System.Collections.Generic.List<UnityEditor.Searcher.SearcherItem>), System.Func<string> getName = default(System.Func<string>), string help = default(string)) {}
    }

    public class GraphNodeSearcherAdapter : UnityEditor.GraphToolsFoundation.Overdrive.GraphElementSearcherAdapter
    {
        public GraphNodeSearcherAdapter(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel, string title) {}
        public static System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> CreateGraphElementModels(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel mGraphModel, UnityEditor.Searcher.SearcherItem item);
        protected virtual System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> CreateGraphElements(UnityEditor.Searcher.SearcherItem item);
    }

    public class GraphProcessingError
    {
        public string Description { get; set; }
        public UnityEditor.GraphToolsFoundation.Overdrive.QuickFix Fix { get; set; }
        public bool IsWarning { get; set; }
        public UnityEditor.GraphToolsFoundation.Overdrive.INodeModel SourceNode { get; set; }
        public UnityEngine.GraphToolsFoundation.Overdrive.SerializableGUID SourceNodeGuid { get; set; }
        public GraphProcessingError() {}
        public virtual string ToString();
    }

    public class GraphProcessingErrorBadgeModel : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.ErrorBadgeModel
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.QuickFix Fix { get; }
        public GraphProcessingErrorBadgeModel(UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingError error) {}
    }

    public class GraphProcessingErrorModel : UnityEditor.GraphToolsFoundation.Overdrive.IBadgeModel, UnityEditor.GraphToolsFoundation.Overdrive.IErrorBadgeModel, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IGraphProcessingErrorModel
    {
        protected System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.Capabilities> m_Capabilities;
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel AssetModel { get; set; }
        public virtual System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.Capabilities> Capabilities { get; }
        public virtual UnityEngine.Color Color { get; set; }
        public virtual string ErrorMessage { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.QuickFix Fix { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel GraphModel { get; }
        public virtual UnityEngine.GraphToolsFoundation.Overdrive.SerializableGUID Guid { get; set; }
        public virtual bool HasUserColor { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel ParentModel { get; }
        public GraphProcessingErrorModel(UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingError error) {}
        public virtual void AssignNewGuid();
        public virtual void ResetColor();
    }

    [System.Runtime.CompilerServices.Extension] public static class GraphProcessingHelper
    {
        public static System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IGraphProcessingErrorModel> GetErrors(UnityEditor.GraphToolsFoundation.Overdrive.Stencil stencil, UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingResult results);
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingResult ProcessGraph(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel, UnityEditor.GraphToolsFoundation.Overdrive.PluginRepository pluginRepository, UnityEditor.GraphToolsFoundation.Overdrive.RequestGraphProcessingOptions options, bool tracingEnabled);
    }

    public class GraphProcessingResult
    {
        public System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingError> Errors { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingStatus Status { get; }
        public GraphProcessingResult() {}
        public void AddError(string description, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel node = default(UnityEditor.GraphToolsFoundation.Overdrive.INodeModel), UnityEditor.GraphToolsFoundation.Overdrive.QuickFix quickFix = default(UnityEditor.GraphToolsFoundation.Overdrive.QuickFix));
        public void AddWarning(string description, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel node = default(UnityEditor.GraphToolsFoundation.Overdrive.INodeModel), UnityEditor.GraphToolsFoundation.Overdrive.QuickFix quickFix = default(UnityEditor.GraphToolsFoundation.Overdrive.QuickFix));
    }

    public class GraphProcessingStateComponent : UnityEngine.GraphToolsFoundation.CommandStateObserver.AssetStateComponent<UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingStateComponent.StateUpdater>
    {
        public System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IGraphProcessingErrorModel> Errors { get; }
        public bool GraphProcessingPending { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingResult RawResults { get; }
        public GraphProcessingStateComponent() {}
        protected virtual void Dispose(bool disposing);
        public class StateUpdater : UnityEngine.GraphToolsFoundation.CommandStateObserver.StateComponent<UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingStateComponent.StateUpdater, UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingStateComponent>
        {
            public bool GraphProcessingPending { set; }
            public StateUpdater() {}
            public void SetResults(UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingResult results, System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IGraphProcessingErrorModel> errorModels);
        }
    }

    [JetBrains.Annotations.PublicAPI] public enum GraphProcessingStatus
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingStatus Failed = 2;
        public const UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingStatus Restart = 1;
        public const UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingStatus Succeeded = 0;
        public int value__;
    }

    public class GraphToolState : UnityEngine.GraphToolsFoundation.CommandStateObserver.State
    {
        protected readonly UnityEngine.Hash128 m_GraphViewEditorWindowGUID;
        public virtual System.Collections.Generic.IEnumerable<UnityEngine.GraphToolsFoundation.CommandStateObserver.IStateComponent> AllStateComponents { get; }
        [System.Obsolete(@"2021-02-19 Use WindowState.AssetModel instead.")] public UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel AssetModel { get; }
        [System.Obsolete(@"2021-02-19 Use WindowState.BlackboardGraphModel instead.")] public virtual UnityEditor.GraphToolsFoundation.Overdrive.IBlackboardGraphModel BlackboardGraphModel { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.BlackboardViewStateComponent BlackboardViewState { get; }
        [System.Obsolete(@"2021-02-19 Use WindowState.GraphModel instead.")] public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel GraphModel { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingStateComponent GraphProcessingState { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphViewStateComponent GraphViewState { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.Preferences Preferences { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.SelectionStateComponent SelectionState { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.TracingControlStateComponent TracingControlState { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.TracingDataStateComponent TracingDataState { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.TracingStatusStateComponent TracingStatusState { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.WindowStateComponent WindowState { get; }
        public GraphToolState(UnityEngine.Hash128 graphViewEditorWindowGUID, UnityEditor.GraphToolsFoundation.Overdrive.Preferences preferences) {}
        protected virtual void DeserializeFromUndo(UnityEngine.GraphToolsFoundation.CommandStateObserver.SerializedReferenceDictionary<string, string> stateComponentUndoData);
        protected virtual void Dispose(bool disposing);
        protected virtual void Finalize();
        public void GraphAssetChanged(string assetGUID);
        public void LoadGraphAsset(UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel assetModel, UnityEngine.GameObject boundObject);
        [System.Obsolete(@"2021-02-19 Use IGraphViewStateComponentUpdater.MarkChanged instead.")] public void MarkChanged(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> models);
        [System.Obsolete(@"2021-02-19 Use IGraphViewStateComponentUpdater.MarkDeleted instead.")] public void MarkDeleted(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> models);
        [System.Obsolete(@"2021-02-19 Use IGraphViewStateComponentUpdater.MarkModelToAutoAlign instead.")] public void MarkModelToAutoAlign(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model);
        [System.Obsolete(@"2021-02-19 Use IGraphViewStateComponentUpdater.MarkNew instead.")] public void MarkNew(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> models);
        public virtual void PushUndo(UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand command);
        public virtual void RegisterCommandHandlers(UnityEngine.GraphToolsFoundation.CommandStateObserver.Dispatcher dispatcher);
        [System.Obsolete(@"2021-02-19 Use GraphViewState.ForceCompleteUpdate instead.")] public void RequestUIRebuild();
        protected virtual void ResetStateCaches();
        protected virtual void SerializeForUndo(UnityEngine.GraphToolsFoundation.CommandStateObserver.SerializedReferenceDictionary<string, string> stateComponentUndoData);
        public static void UndoRedoCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState state, UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoRedoCommand command);
        protected virtual void ValidateAfterDeserialize();
    }

    [System.Obsolete] [System.Runtime.CompilerServices.Extension] public static class GraphToolStateExtensions
    {
        [System.Obsolete(@"2021-02-19 Use IGraphViewStateComponentUpdater.MarkChanged() instead.")] [System.Runtime.CompilerServices.Extension] public static void MarkChanged(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model);
        [System.Obsolete(@"2021-02-19 Use IGraphViewStateComponentUpdater.MarkDeleted() instead.")] [System.Runtime.CompilerServices.Extension] public static void MarkDeleted(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model);
        [System.Obsolete(@"2021-02-19 Use IGraphViewStateComponentUpdater.MarkNew() instead.")] [System.Runtime.CompilerServices.Extension] public static void MarkNew(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model);
    }

    public class GraphView : UnityEngine.UIElements.VisualElement, UnityEditor.GraphToolsFoundation.Overdrive.IDragAndDropHandler, UnityEditor.GraphToolsFoundation.Overdrive.IDragSource
    {
        protected UnityEngine.Vector2 m_LastMousePosition;
        protected bool m_SelectionDraggerWasActive;
        public static readonly string ussClassName;
        public virtual bool CanCopySelection { get; }
        public virtual bool CanCutSelection { get; }
        public virtual bool CanDeleteSelection { get; }
        public virtual bool CanDuplicateSelection { get; }
        public virtual bool CanPaste { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphView.CanPasteSerializedDataDelegate CanPasteSerializedDataCallback { get; set; }
        protected UnityEngine.UIElements.Clickable Clickable { get; set; }
        public UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher CommandDispatcher { get; }
        public virtual UnityEngine.UIElements.VisualElement contentContainer { get; }
        protected UnityEditor.GraphToolsFoundation.Overdrive.ContentDragger ContentDragger { get; set; }
        public UnityEngine.UIElements.VisualElement ContentViewContainer { get; }
        protected UnityEditor.GraphToolsFoundation.Overdrive.ContentZoomer ContentZoomer { get; set; }
        protected UnityEngine.UIElements.ContextualMenuManipulator ContextualMenuManipulator { get; set; }
        public UnityEngine.UIElements.UQueryState<UnityEditor.GraphToolsFoundation.Overdrive.Edge> Edges { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.FreehandSelector FreehandSelector { get; set; }
        public UnityEngine.UIElements.UQueryState<UnityEditor.GraphToolsFoundation.Overdrive.GraphElement> GraphElements { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel GraphModel { get; }
        public virtual System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IHighlightable> Highlightables { get; }
        public UnityEngine.UIElements.UQueryState<UnityEditor.GraphToolsFoundation.Overdrive.Node> Nodes { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.PlacematContainer PlacematContainer { get; }
        public UnityEngine.UIElements.UQueryState<UnityEditor.GraphToolsFoundation.Overdrive.Port> Ports { get; }
        protected UnityEditor.GraphToolsFoundation.Overdrive.RectangleSelector RectangleSelector { get; set; }
        protected UnityEditor.GraphToolsFoundation.Overdrive.SelectionDragger SelectionDragger { get; set; }
        public virtual bool SupportsWindowedBlackboard { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphView.UnserializeAndPasteDelegate UnserializeAndPasteCallback { get; set; }
        public UnityEngine.UIElements.ITransform ViewTransform { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphViewEditorWindow Window { get; }
        public GraphView(UnityEditor.GraphToolsFoundation.Overdrive.GraphViewEditorWindow window, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, string graphViewName) {}
        public virtual void AddElement(UnityEditor.GraphToolsFoundation.Overdrive.GraphElement graphElement);
        protected void AddPortalDependency(UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel model);
        protected void AddPositionDependency(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel model);
        protected virtual void BuildContextualMenu(UnityEngine.UIElements.ContextualMenuPopulateEvent evt);
        public void CalculateFrameTransform(UnityEngine.Rect rectToFit, UnityEngine.Rect clientRect, int border, out UnityEngine.Vector3 frameTranslation, out UnityEngine.Vector3 frameScaling);
        public UnityEngine.Rect CalculateRectToFitAll(UnityEngine.UIElements.VisualElement container);
        protected bool CanPasteSerializedData(string data);
        protected virtual void CollectCopyableGraphElements(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> elements, System.Collections.Generic.HashSet<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> elementsToCopySet);
        protected void CopySelectionCallback();
        protected void CutSelectionCallback();
        public virtual void DisplaySmartSearch(UnityEngine.Vector2 mousePosition);
        protected void DuplicateSelectionCallback();
        public UnityEditor.GraphToolsFoundation.Overdrive.Blackboard GetBlackboard();
        protected virtual UnityEditor.GraphToolsFoundation.Overdrive.BlackboardDragAndDropHandler GetBlackboardDragAndDropHandler();
        protected virtual UnityEditor.GraphToolsFoundation.Overdrive.IDragAndDropHandler GetExternalDragNDropHandler(UnityEngine.UIElements.DragEnterEvent evt);
        public bool GetPortCenterOverride(UnityEditor.GraphToolsFoundation.Overdrive.Port port, out UnityEngine.Vector2 overriddenPosition);
        public virtual System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> GetSelection();
        protected void OnCustomStyleResolved(UnityEngine.UIElements.CustomStyleResolvedEvent evt);
        protected void OnDoubleClick();
        public virtual void OnDragEnter(UnityEngine.UIElements.DragEnterEvent evt);
        public virtual void OnDragExited(UnityEngine.UIElements.DragExitedEvent e);
        public virtual void OnDragLeave(UnityEngine.UIElements.DragLeaveEvent evt);
        public virtual void OnDragPerform(UnityEngine.UIElements.DragPerformEvent e);
        public virtual void OnDragUpdated(UnityEngine.UIElements.DragUpdatedEvent e);
        protected void OnEnterPanel(UnityEngine.UIElements.AttachToPanelEvent e);
        protected void OnExecuteCommand(UnityEngine.UIElements.ExecuteCommandEvent evt);
        protected void OnLeavePanel(UnityEngine.UIElements.DetachFromPanelEvent e);
        protected void OnMouseMove(UnityEngine.UIElements.MouseMoveEvent evt);
        protected void OnMouseOver(UnityEngine.UIElements.MouseOverEvent evt);
        protected void OnRenameKeyDown(UnityEngine.UIElements.KeyDownEvent e);
        protected static string OnSerializeGraphElements(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> elements);
        protected void OnShortcutAlignNodeHierarchyEvent(UnityEditor.GraphToolsFoundation.Overdrive.ShortcutAlignNodeHierarchiesEvent e);
        protected void OnShortcutAlignNodesEvent(UnityEditor.GraphToolsFoundation.Overdrive.ShortcutAlignNodesEvent e);
        protected void OnShortcutConvertVariableAndConstantEvent(UnityEditor.GraphToolsFoundation.Overdrive.ShortcutConvertConstantAndVariableEvent e);
        protected void OnShortcutCreateStickyNoteEvent(UnityEditor.GraphToolsFoundation.Overdrive.ShortcutCreateStickyNoteEvent e);
        protected void OnShortcutDeleteEvent(UnityEditor.GraphToolsFoundation.Overdrive.ShortcutDeleteEvent e);
        protected void OnShortcutDisplaySmartSearchEvent(UnityEditor.GraphToolsFoundation.Overdrive.ShortcutDisplaySmartSearchEvent e);
        protected void OnShortcutFrameAllEvent(UnityEditor.GraphToolsFoundation.Overdrive.ShortcutFrameAllEvent e);
        protected void OnShortcutFrameNextEvent(UnityEditor.GraphToolsFoundation.Overdrive.ShortcutFrameNextEvent e);
        protected void OnShortcutFrameOriginEvent(UnityEditor.GraphToolsFoundation.Overdrive.ShortcutFrameOriginEvent e);
        protected void OnShortcutFramePreviousEvent(UnityEditor.GraphToolsFoundation.Overdrive.ShortcutFramePreviousEvent e);
        protected void OnValidateCommand(UnityEngine.UIElements.ValidateCommandEvent evt);
        protected void PasteCallback();
        public virtual void RemoveElement(UnityEditor.GraphToolsFoundation.Overdrive.GraphElement graphElement);
        protected void RemovePortalDependency(UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel model);
        protected void RemovePositionDependency(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edgeModel);
        protected string SerializeGraphElements(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> elements);
        public void SetupZoom(float minScaleSetup, float maxScaleSetup, float maxScaleOnFrame);
        public void SetupZoom(float minScaleSetup, float maxScaleSetup, float maxScaleOnFrame, float scaleStepSetup, float referenceScaleSetup);
        public virtual void StopSelectionDragger();
        protected void UnserializeAndPasteOperation(string operationName, string data);
        protected virtual void Update(UnityEngine.GraphToolsFoundation.CommandStateObserver.IStateObserver observer, UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState state);
        public void UpdateViewTransform(UnityEngine.Vector3 pan, UnityEngine.Vector3 zoom);
        public delegate bool CanPasteSerializedDataDelegate(string data);
        public class Layer : UnityEngine.UIElements.VisualElement
        {
            public Layer() {}
        }
        public delegate void UnserializeAndPasteDelegate(string operationName, string data);
    }

    public class GraphViewBlackboardWindow : UnityEditor.GraphToolsFoundation.Overdrive.GraphViewToolWindow
    {
        protected virtual string ToolName { get; }
        public GraphViewBlackboardWindow() {}
        protected virtual bool IsGraphViewSupported(UnityEditor.GraphToolsFoundation.Overdrive.GraphView gv);
        protected virtual void OnDisable();
        protected virtual void OnEnable();
        protected virtual void OnGraphViewChanged();
        protected virtual void OnGraphViewChanging();
        protected virtual void Update();
    }

    [System.Runtime.CompilerServices.Extension] public static class GraphViewCommandsExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static void DispatchFrameAndSelectElementsCommand(UnityEditor.GraphToolsFoundation.Overdrive.GraphView self, bool select, params UnityEditor.GraphToolsFoundation.Overdrive.GraphElement[] graphElements);
        [System.Runtime.CompilerServices.Extension] public static void DispatchFrameNextCommand(UnityEditor.GraphToolsFoundation.Overdrive.GraphView self, System.Func<UnityEditor.GraphToolsFoundation.Overdrive.GraphElement, bool> predicate);
        [System.Runtime.CompilerServices.Extension] public static void DispatchFramePrevCommand(UnityEditor.GraphToolsFoundation.Overdrive.GraphView self, System.Func<UnityEditor.GraphToolsFoundation.Overdrive.GraphElement, bool> predicate);
    }

    public abstract class GraphViewEditorWindow : UnityEditor.EditorWindow, UnityEditor.IHasCustomMenu
    {
        public static readonly string graphProcessingPendingUssClassName;
        protected UnityEditor.GraphToolsFoundation.Overdrive.BlankPage m_BlankPage;
        protected UnityEditor.GraphToolsFoundation.Overdrive.ErrorToolbar m_ErrorToolbar;
        protected UnityEngine.UIElements.VisualElement m_GraphContainer;
        protected UnityEngine.UIElements.Label m_GraphProcessingPendingLabel;
        protected UnityEditor.GraphToolsFoundation.Overdrive.GraphView m_GraphView;
        protected UnityEditor.GraphToolsFoundation.Overdrive.MainToolbar m_MainToolbar;
        protected UnityEngine.UIElements.VisualElement m_SidePanel;
        protected UnityEngine.UIElements.Label m_SidePanelTitle;
        public UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher CommandDispatcher { get; }
        public string EditorToolName { get; protected set; }
        protected virtual System.Collections.Generic.IEnumerable<System.Type> GraphProcessingTriggerCommands { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphView GraphView { get; }
        public virtual System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.GraphView> GraphViews { get; }
        public UnityEngine.GraphToolsFoundation.Overdrive.SerializableGUID GUID { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.MainToolbar MainToolbar { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.PluginRepository PluginRepository { get; }
        public bool WithSidePanel { get; set; }
        protected GraphViewEditorWindow() {}
        public virtual void AddItemsToMenu(UnityEditor.GenericMenu menu);
        public void AdjustWindowMinSize(UnityEngine.Vector2 size);
        protected abstract bool CanHandleAssetType(UnityEditor.GraphToolsFoundation.Overdrive.GraphAssetModel asset);
        public void ClearNodeInSidePanel();
        protected virtual UnityEditor.GraphToolsFoundation.Overdrive.BlankPage CreateBlankPage();
        protected virtual UnityEditor.GraphToolsFoundation.Overdrive.ErrorToolbar CreateErrorToolbar();
        protected virtual UnityEditor.GraphToolsFoundation.Overdrive.GraphView CreateGraphView();
        protected virtual UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState CreateInitialState();
        protected virtual UnityEditor.GraphToolsFoundation.Overdrive.MainToolbar CreateMainToolbar();
        public static WindowT FindOrCreateGraphWindow<WindowT>() where WindowT : UnityEditor.GraphToolsFoundation.Overdrive.GraphViewEditorWindow;
        public virtual System.Collections.Generic.IEnumerable<System.Type> GetExtraPaneTypes();
        protected virtual void OnDestroy();
        protected virtual void OnDisable();
        protected virtual void OnEnable();
        protected virtual void OnFocus();
        protected virtual void OnLostFocus();
        protected virtual void Reset();
        protected void ResetGraphProcessorTimer(UnityEngine.UIElements.MouseMoveEvent e);
        public void SetCurrentSelection(string graphAssetFilePath, UnityEditor.GraphToolsFoundation.Overdrive.GraphViewEditorWindow.OpenMode mode, UnityEngine.GameObject boundObject = default(UnityEngine.GameObject));
        public static void ShowGraphViewWindowWithTools<T>() where T : UnityEditor.GraphToolsFoundation.Overdrive.GraphViewEditorWindow;
        public void ShowNodeInSidePanel(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, bool show);
        public virtual void UnloadGraph();
        public void UnloadGraphIfDeleted();
        protected virtual void Update();
        protected void UpdateGraphContainer();
        public enum OpenMode
        {
            public const UnityEditor.GraphToolsFoundation.Overdrive.GraphViewEditorWindow.OpenMode Open = 0;
            public const UnityEditor.GraphToolsFoundation.Overdrive.GraphViewEditorWindow.OpenMode OpenAndFocus = 1;
            public int value__;
        }
    }

    public class GraphViewMinimapWindow : UnityEditor.GraphToolsFoundation.Overdrive.GraphViewToolWindow
    {
        protected virtual string ToolName { get; }
        public GraphViewMinimapWindow() {}
        protected virtual bool IsGraphViewSupported(UnityEditor.GraphToolsFoundation.Overdrive.GraphView gv);
        protected virtual void OnDestroy();
        protected virtual void OnEnable();
        protected virtual void OnGraphViewChanged();
        protected virtual void OnGraphViewChanging();
    }

    public class GraphViewSettings
    {
        public GraphViewSettings() {}
    }

    public class GraphViewStateComponent : UnityEngine.GraphToolsFoundation.CommandStateObserver.AssetStateComponent<UnityEditor.GraphToolsFoundation.Overdrive.GraphViewStateComponent.StateUpdater>
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel AssetModel { get; }
        public string AssetModelGUID { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel GraphModel { get; }
        public UnityEngine.Vector3 Position { get; }
        public UnityEngine.Vector3 Scale { get; }
        public GraphViewStateComponent() {}
        protected virtual void Dispose(bool disposing);
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphViewStateComponent.Changeset GetAggregatedChangeset(System.UInt32 sinceVersion);
        public virtual void PurgeOldChangesets(System.UInt32 untilVersion);
        protected virtual void PushChangeset(System.UInt32 version);
        public virtual void SetUpdateType(UnityEngine.GraphToolsFoundation.CommandStateObserver.UpdateType type, bool force = False);
        public virtual void ValidateAfterDeserialize();
        public class Changeset : UnityEngine.GraphToolsFoundation.CommandStateObserver.IChangeset
        {
            public System.Collections.Generic.HashSet<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> ChangedModels { get; }
            public System.Collections.Generic.HashSet<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> DeletedModels { get; }
            public System.Collections.Generic.HashSet<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> ModelsToAutoAlign { get; }
            public System.Collections.Generic.HashSet<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> NewModels { get; }
            public Changeset() {}
            public virtual void AggregateFrom(System.Collections.Generic.IEnumerable<UnityEngine.GraphToolsFoundation.CommandStateObserver.IChangeset> changesets);
            public virtual void Clear();
        }
        public class StateUpdater : UnityEngine.GraphToolsFoundation.CommandStateObserver.StateComponent<UnityEditor.GraphToolsFoundation.Overdrive.GraphViewStateComponent.StateUpdater, UnityEditor.GraphToolsFoundation.Overdrive.GraphViewStateComponent>
        {
            public UnityEngine.Vector3 Position { set; }
            public UnityEngine.Vector3 Scale { set; }
            public StateUpdater() {}
            public void AssetChangedOnDisk();
            public void LoadGraphAsset(UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel assetModel);
            public void MarkChanged(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> models);
            public void MarkChanged(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model);
            public void MarkDeleted(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> models);
            public void MarkDeleted(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model);
            public void MarkModelToAutoAlign(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model);
            public void MarkNew(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> models);
            public void MarkNew(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model);
        }
    }

    public abstract class GraphViewToolWindow : UnityEditor.GraphToolsFoundation.Overdrive.Bridge.GraphViewToolWindowBridge
    {
        protected UnityEditor.GraphToolsFoundation.Overdrive.GraphView m_SelectedGraphView;
        protected UnityEngine.UIElements.VisualElement m_ToolbarContainer;
        public UnityEngine.GraphToolsFoundation.Overdrive.SerializableGUID GUID { get; }
        protected abstract string ToolName { get; }
        protected GraphViewToolWindow() {}
        public virtual System.Collections.Generic.IEnumerable<System.Type> GetExtraPaneTypes();
        protected virtual bool IsGraphViewSupported(UnityEditor.GraphToolsFoundation.Overdrive.GraphView gv);
        protected virtual void OnDestroy();
        protected virtual void OnDisable();
        protected virtual void OnEnable();
        protected abstract void OnGraphViewChanged();
        protected abstract void OnGraphViewChanging();
        public virtual void SelectGraphViewFromWindow(UnityEditor.EditorWindow window, UnityEngine.UIElements.VisualElement graphView, int graphViewIndexInWindow = 0);
        protected virtual void Update();
    }

    public class GridBackground : UnityEngine.UIElements.ImmediateModeElement
    {
        public float Spacing { get; }
        public GridBackground() {}
        protected virtual void ImmediateRepaint();
    }

    [System.Runtime.CompilerServices.Extension] public static class HighlightHelper
    {
        [System.Runtime.CompilerServices.Extension] public static void ClearGraphElementsHighlight(UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView);
        [System.Runtime.CompilerServices.Extension] public static void ClearGraphElementsHighlight(UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView, System.Func<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, bool> predicate);
        [System.Runtime.CompilerServices.Extension] public static void HighlightGraphElements(UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView);
    }

    public interface IConstantEditorBuilder
    {
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher CommandDispatcher { get; }
        public abstract bool ConstantIsLocked { get; }
        public abstract System.Action<UnityEngine.UIElements.IChangeEvent> OnValueChanged { get; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IPortModel PortModel { get; }
    }

    public class IconTitleProgressPart : UnityEditor.GraphToolsFoundation.Overdrive.EditableTitlePart
    {
        public static readonly string collapseButtonPartName;
        public UnityEditor.UIElements.ProgressBar CoroutineProgressBar;
        public static readonly string ussClassName;
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected IconTitleProgressPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement container);
        public static UnityEditor.GraphToolsFoundation.Overdrive.IconTitleProgressPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI, string parentClassName);
        protected virtual void PostBuildPartUI();
        protected virtual void UpdatePartFromModel();
    }

    public interface ICustomSearcherHandler
    {
        public abstract bool HandleCustomSearcher(UnityEngine.Vector2 mousePosition, UnityEditor.GraphToolsFoundation.Overdrive.SearcherFilter filter = default(UnityEditor.GraphToolsFoundation.Overdrive.SearcherFilter));
    }

    public interface IDebugger
    {
        public abstract System.Collections.Generic.IEnumerable<int> GetDebuggingTargets(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IGraphTrace GetGraphTrace(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel assetModelGraphModel, int currentTracingTarget);
        public abstract string GetTargetLabel(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel, int target);
        public abstract bool GetTracingSteps(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel currentGraphModel, int frame, int tracingTarget, out System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.TracingStep> stepList);
        public abstract void OnToggleTracing(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel currentGraphModel, bool enabled);
        public abstract void Start(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel, bool tracingEnabled);
        public abstract void Stop();
    }

    public interface IDocumentIndexer
    {
        public abstract void IndexField<T>(string fieldName, T fieldValue);
    }

    [JetBrains.Annotations.PublicAPI] public interface IDragAndDropHandler
    {
        public abstract void OnDragEnter(UnityEngine.UIElements.DragEnterEvent evt);
        public abstract void OnDragExited(UnityEngine.UIElements.DragExitedEvent evt);
        public abstract void OnDragLeave(UnityEngine.UIElements.DragLeaveEvent evt);
        public abstract void OnDragPerform(UnityEngine.UIElements.DragPerformEvent evt);
        public abstract void OnDragUpdated(UnityEngine.UIElements.DragUpdatedEvent evt);
    }

    public interface IDragSource
    {
        public abstract System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> GetSelection();
    }

    public interface IFrameData
    {
        public abstract int Frame { get; }
        public abstract System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.TracingStep> GetDebuggingSteps(UnityEditor.GraphToolsFoundation.Overdrive.Stencil stencil);
    }

    public interface IGraphElement : UnityEditor.GraphToolsFoundation.Overdrive.IModelUI
    {
    }

    public interface IGraphNodeCreationData
    {
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel GraphModel { get; }
        public abstract UnityEngine.GraphToolsFoundation.Overdrive.SerializableGUID Guid { get; }
        public abstract UnityEngine.Vector2 Position { get; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.SpawnFlags SpawnFlags { get; }
    }

    public interface IGraphProcessingErrorModel : UnityEditor.GraphToolsFoundation.Overdrive.IBadgeModel, UnityEditor.GraphToolsFoundation.Overdrive.IErrorBadgeModel, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel
    {
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.QuickFix Fix { get; }
    }

    public interface IGraphTemplate
    {
        public abstract string DefaultAssetName { get; }
        public abstract string GraphTypeName { get; }
        public abstract System.Type StencilType { get; }
        public abstract void InitBasicGraph(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
    }

    public interface IGraphTrace
    {
        public abstract System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IFrameData> AllFrames { get; }
    }

    public interface IGTFSearcherAdapter : UnityEditor.Searcher.ISearcherAdapter
    {
        public abstract void SetInitialSplitterDetailRatio(float ratio);
    }

    public interface IHighlightable : UnityEditor.GraphToolsFoundation.Overdrive.IGraphElement, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI
    {
        public abstract bool Highlighted { get; set; }
        public abstract bool ShouldHighlightItemUsage(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel graphElementModel);
    }

    public interface IIndexableSearcherDatabaseProvider : UnityEditor.GraphToolsFoundation.Overdrive.ISearcherDatabaseProvider
    {
        public abstract bool Index<T>(UnityEditor.GraphToolsFoundation.Overdrive.ISearcherItemDataProvider item, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, ref T indexer) where T : System.ValueType, UnityEditor.GraphToolsFoundation.Overdrive.IDocumentIndexer, new();
    }

    public interface IModelUI
    {
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher CommandDispatcher { get; }
        public abstract string Context { get; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.GraphView GraphView { get; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel Model { get; }
        public abstract void AddBackwardDependencies();
        public abstract void AddForwardDependencies();
        public abstract void AddModelDependencies();
        public abstract void AddToGraphView(UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView);
        public abstract void BuildUI();
        public abstract void RemoveFromGraphView();
        public abstract void Setup(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView, string context);
        public abstract void SetupBuildAndUpdate(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView, string context);
        public abstract void UpdateFromModel();
    }

    public interface IModelUIPart
    {
        public abstract string PartName { get; }
        public abstract UnityEngine.UIElements.VisualElement Root { get; }
        public abstract void BuildUI(UnityEngine.UIElements.VisualElement parent);
        public abstract void OwnerAddedToView();
        public abstract void OwnerRemovedFromView();
        public abstract void PostBuildUI();
        public abstract void UpdateFromModel();
    }

    public class InitializeVariableCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel VariableDeclarationModel;
        public InitializeVariableCommand() {}
        public InitializeVariableCommand(UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel variableDeclarationModel) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.InitializeVariableCommand command);
    }

    [JetBrains.Annotations.PublicAPI] public static class InlineValueEditor
    {
        public static UnityEngine.UIElements.VisualElement CreateEditorForConstant(UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel graphAsset, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel, UnityEditor.GraphToolsFoundation.Overdrive.IConstant constant, System.Action<UnityEngine.UIElements.IChangeEvent, object> onValueChanged, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, bool modelIsLocked);
        public static UnityEngine.UIElements.VisualElement CreateEditorForNodeModel(UnityEditor.GraphToolsFoundation.Overdrive.IConstantNodeModel model, System.Action<UnityEngine.UIElements.IChangeEvent, object> onValueChanged, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher);
    }

    public class InOutPortContainerPart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        public static readonly string inputPortsUssName;
        protected UnityEditor.GraphToolsFoundation.Overdrive.PortContainer m_InputPortContainer;
        protected UnityEditor.GraphToolsFoundation.Overdrive.PortContainer m_OutputPortContainer;
        public static readonly string outputPortsUssName;
        public static readonly string ussClassName;
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected InOutPortContainerPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement container);
        public static UnityEditor.GraphToolsFoundation.Overdrive.InOutPortContainerPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI, string parentClassName);
        protected virtual void PostBuildPartUI();
        protected virtual void UpdatePartFromModel();
    }

    public class IntPref : UnityEngine.GraphToolsFoundation.Overdrive.Enumeration
    {
        [JetBrains.Annotations.PublicAPI] protected static readonly int k_ToolBasePrefId;
        protected IntPref(int id, string name, string[] obsoleteNames = default(string[])) {}
    }

    public interface IPluginHandler
    {
        public abstract void OptionsMenu(UnityEditor.GenericMenu menu);
        public abstract void Register(UnityEditor.GraphToolsFoundation.Overdrive.GraphViewEditorWindow window);
        public abstract void Unregister();
    }

    public interface IPropertyVisitorNodeTarget
    {
        public abstract object Target { get; set; }
    }

    public interface ISearcherDatabaseProvider
    {
        public abstract System.Collections.Generic.List<UnityEditor.Searcher.SearcherDatabaseBase> GetDynamicSearcherDatabases(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> portModel);
        public abstract System.Collections.Generic.List<UnityEditor.Searcher.SearcherDatabaseBase> GetDynamicSearcherDatabases(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel);
        public abstract System.Collections.Generic.List<UnityEditor.Searcher.SearcherDatabaseBase> GetGraphElementsSearcherDatabases(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
        public abstract System.Collections.Generic.List<UnityEditor.Searcher.SearcherDatabaseBase> GetGraphVariablesSearcherDatabases(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
        public abstract System.Collections.Generic.List<UnityEditor.Searcher.SearcherDatabase> GetVariableTypesSearcherDatabases();
    }

    public interface ISearcherFilterProvider
    {
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.SearcherFilter GetEdgeSearcherFilter(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edgeModel);
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.SearcherFilter GetGraphSearcherFilter();
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.SearcherFilter GetInputToGraphSearcherFilter(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> portModels);
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.SearcherFilter GetInputToGraphSearcherFilter(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel);
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.SearcherFilter GetOutputToGraphSearcherFilter(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> portModels);
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.SearcherFilter GetOutputToGraphSearcherFilter(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel);
    }

    public interface ISearcherItemData
    {
    }

    public interface ISearcherItemDataProvider
    {
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.ISearcherItemData Data { get; }
    }

    public interface IShortcutEvent
    {
        public abstract UnityEngine.Vector2 MousePosition { get; }
        public abstract UnityEditor.ShortcutManagement.ShortcutStage Stage { get; }
    }

    public class ItemizeNodeCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.ISingleOutputPortNodeModel>
    {
        public ItemizeNodeCommand() {}
        public ItemizeNodeCommand(params UnityEditor.GraphToolsFoundation.Overdrive.ISingleOutputPortNodeModel[] models) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.ItemizeNodeCommand command);
    }

    public interface IToolbarProvider
    {
        public abstract bool ShowButton(string buttonName);
    }

    public class LoadGraphAssetCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel Asset;
        public readonly string AssetPath;
        public readonly UnityEngine.GameObject BoundObject;
        public readonly long FileId;
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.LoadGraphAssetCommand.Type LoadType;
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.PluginRepository PluginRepository;
        public readonly int TruncateHistoryIndex;
        public LoadGraphAssetCommand(UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel assetModel, UnityEngine.GameObject boundObject = default(UnityEngine.GameObject), UnityEditor.GraphToolsFoundation.Overdrive.LoadGraphAssetCommand.Type loadType = 0) {}
        public LoadGraphAssetCommand(string assetPath, UnityEditor.GraphToolsFoundation.Overdrive.PluginRepository pluginRepository, UnityEngine.GameObject boundObject = default(UnityEngine.GameObject), UnityEditor.GraphToolsFoundation.Overdrive.LoadGraphAssetCommand.Type loadType = 0, long filedId = 0, int truncateHistoryIndex = -1) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.LoadGraphAssetCommand command);
        public enum Type
        {
            public const UnityEditor.GraphToolsFoundation.Overdrive.LoadGraphAssetCommand.Type KeepHistory = 2;
            public const UnityEditor.GraphToolsFoundation.Overdrive.LoadGraphAssetCommand.Type PushOnStack = 1;
            public const UnityEditor.GraphToolsFoundation.Overdrive.LoadGraphAssetCommand.Type Replace = 0;
            public int value__;
        }
    }

    public class MainToolbar : UnityEditor.GraphToolsFoundation.Overdrive.Toolbar
    {
        public static readonly string BuildAllButton;
        public static readonly string EnableTracingButton;
        protected UnityEditor.UIElements.ToolbarBreadcrumbs m_Breadcrumb;
        protected UnityEditor.UIElements.ToolbarButton m_BuildAllButton;
        protected UnityEditor.UIElements.ToolbarToggle m_EnableTracingButton;
        protected UnityEditor.UIElements.ToolbarButton m_NewGraphButton;
        protected UnityEditor.UIElements.ToolbarButton m_OptionsButton;
        protected UnityEditor.UIElements.ToolbarButton m_SaveAllButton;
        protected UnityEditor.UIElements.ToolbarButton m_ShowBlackboardButton;
        protected UnityEditor.UIElements.ToolbarButton m_ShowMiniMapButton;
        public static readonly string NewGraphButton;
        public static readonly string OptionsButton;
        public static readonly string SaveAllButton;
        public static readonly string ShowBlackboardButton;
        public static readonly string ShowMiniMapButton;
        public static readonly string ussClassName;
        public MainToolbar(UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView) {}
        protected void BreadcrumbClickedEvent(int i);
        protected virtual void BuildOptionMenu(UnityEditor.GenericMenu menu);
        protected virtual string GetBreadcrumbLabel(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState state, int index);
        protected virtual void OnBreadcrumbClick(UnityEditor.GraphToolsFoundation.Overdrive.OpenedGraph graphToLoad, int breadcrumbIndex);
        protected virtual void OnEnterPanel(UnityEngine.UIElements.AttachToPanelEvent e);
        protected virtual void OnLeavePanel(UnityEngine.UIElements.DetachFromPanelEvent e);
        protected virtual void UpdateCommonMenu();
    }

    public class MiniMap : UnityEditor.GraphToolsFoundation.Overdrive.GraphElement
    {
        public static readonly string anchoredModifierClassName;
        protected readonly UnityEngine.Color m_SelectedChildrenColor;
        public static readonly string ussClassName;
        public static readonly string windowedModifierClassName;
        public bool Anchored { get; set; }
        protected UnityEditor.GraphToolsFoundation.Overdrive.Dragger Dragger { get; set; }
        public float MaxHeight { get; set; }
        public float MaxWidth { get; set; }
        public bool Windowed { get; set; }
        public System.Action<string> ZoomFactorTextChanged { get; set; }
        public MiniMap() {}
        public virtual bool IsMovable();
    }

    [System.Runtime.CompilerServices.Extension] public static class ModelDependencies
    {
        [System.Runtime.CompilerServices.Extension] public static void AddDependency(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ui);
        [System.Runtime.CompilerServices.Extension] public static System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IModelUI> GetDependencies(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model);
        [System.Runtime.CompilerServices.Extension] public static void RemoveDependency(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ui);
    }

    public abstract class ModelUI : UnityEngine.UIElements.VisualElement, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI
    {
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher CommandDispatcher { get; }
        public virtual string Context { get; }
        protected UnityEngine.UIElements.ContextualMenuManipulator ContextualMenuManipulator { get; set; }
        protected UnityEditor.GraphToolsFoundation.Overdrive.UIDependencies Dependencies { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.GraphView GraphView { get; protected set; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel Model { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.ModelUIPartList PartList { get; }
        protected ModelUI() {}
        public virtual void AddBackwardDependencies();
        public virtual void AddForwardDependencies();
        public virtual void AddModelDependencies();
        public virtual void AddToGraphView(UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView);
        protected virtual void BuildContextualMenu(UnityEngine.UIElements.ContextualMenuPopulateEvent evt);
        protected virtual void BuildElementUI();
        protected virtual void BuildPartList();
        public virtual void BuildUI();
        protected virtual void ClearElementUI();
        protected virtual void PostBuildUI();
        public virtual void RemoveFromGraphView();
        public virtual void Setup(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView, string context);
        public virtual void SetupBuildAndUpdate(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView, string context = default(string));
        protected virtual void UpdateElementFromModel();
        public virtual void UpdateFromModel();
    }

    public class ModelUIPartList : System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IModelUIPart>, System.Collections.IEnumerable
    {
        public ModelUIPartList() {}
        public void AppendPart(UnityEditor.GraphToolsFoundation.Overdrive.IModelUIPart child);
        public virtual System.Collections.Generic.IEnumerator<UnityEditor.GraphToolsFoundation.Overdrive.IModelUIPart> GetEnumerator();
        public UnityEditor.GraphToolsFoundation.Overdrive.IModelUIPart GetPart(string name);
        public void InsertPartAfter(string afterChild, UnityEditor.GraphToolsFoundation.Overdrive.IModelUIPart child);
        public void InsertPartBefore(string beforeChild, UnityEditor.GraphToolsFoundation.Overdrive.IModelUIPart child);
        public void RemovePart(string name);
        public void ReplacePart(string componentToReplace, UnityEditor.GraphToolsFoundation.Overdrive.IModelUIPart child);
    }

    public class MoveEdgeControlPointCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public readonly int EdgeIndex;
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.IEditableEdge EdgeModel;
        public readonly UnityEngine.Vector2 NewPosition;
        public readonly float NewTightness;
        public MoveEdgeControlPointCommand() {}
        public MoveEdgeControlPointCommand(UnityEditor.GraphToolsFoundation.Overdrive.IEditableEdge edgeModel, int edgeIndex, UnityEngine.Vector2 newPosition, float newTightness) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.MoveEdgeControlPointCommand command);
    }

    public class MoveElementsCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.IMovable, UnityEngine.Vector2>
    {
        public MoveElementsCommand() {}
        public MoveElementsCommand(UnityEngine.Vector2 delta, System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IMovable> models) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.MoveElementsCommand command);
    }

    public class Node : UnityEditor.GraphToolsFoundation.Overdrive.GraphElement, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElement, UnityEditor.GraphToolsFoundation.Overdrive.IHighlightable, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI
    {
        public static readonly string disabledModifierUssClassName;
        public static readonly string disabledOverlayElementName;
        public static readonly string emptyModifierUssClassName;
        public static readonly string highlightedModifierUssClassName;
        public static readonly string notConnectedModifierUssClassName;
        public static readonly string portContainerPartName;
        public static readonly string readOnlyModifierUssClassName;
        public static readonly string selectionBorderElementName;
        public static readonly string titleContainerPartName;
        public static readonly string unusedModifierUssClassName;
        public static readonly string ussClassName;
        public static readonly string writeOnlyModifierUssClassName;
        public virtual UnityEngine.UIElements.VisualElement contentContainer { get; }
        public virtual bool Highlighted { get; set; }
        public UnityEditor.GraphToolsFoundation.Overdrive.INodeModel NodeModel { get; }
        public Node() {}
        protected virtual void BuildElementUI();
        protected virtual void BuildPartList();
        public virtual void EditTitle();
        protected virtual void PostBuildUI();
        public virtual bool ShouldHighlightItemUsage(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel graphElementModel);
        protected virtual void UpdateElementFromModel();
    }

    public class NodeCollapseButtonPart : UnityEditor.GraphToolsFoundation.Overdrive.CollapseButtonPart
    {
        protected NodeCollapseButtonPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        public static UnityEditor.GraphToolsFoundation.Overdrive.NodeCollapseButtonPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI, string parentClassName);
        protected virtual void UpdatePartFromModel();
    }

    [System.Runtime.CompilerServices.Extension] public static class NodeDataCreationExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.INodeModel CreateConstantNode(UnityEditor.GraphToolsFoundation.Overdrive.IGraphNodeCreationData data, string constantName, UnityEngine.GraphToolsFoundation.Overdrive.TypeHandle typeHandle);
        [System.Runtime.CompilerServices.Extension] public static T CreateNode<T>(UnityEditor.GraphToolsFoundation.Overdrive.IGraphNodeCreationData data, string nodeName = default(string), System.Action<T> initializationCallback = default(System.Action<T>)) where T : class, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel;
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.INodeModel CreateNode(UnityEditor.GraphToolsFoundation.Overdrive.IGraphNodeCreationData data, System.Type nodeTypeToCreate, string nodeName = default(string), System.Action<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel> initializationCallback = default(System.Action<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel>));
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.INodeModel CreateVariableNode(UnityEditor.GraphToolsFoundation.Overdrive.IGraphNodeCreationData data, UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel declarationModel);
    }

    public class NodeModelProxy<T> : UnityEngine.ScriptableObject, UnityEditor.GraphToolsFoundation.Overdrive.INodeModelProxy where T : UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel
    {
        [UnityEngine.SerializeReference] public T Model;
        public NodeModelProxy() {}
        public virtual UnityEngine.ScriptableObject ScriptableObject();
        public virtual void SetModel(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model);
    }

    [System.Runtime.CompilerServices.IsReadOnly] public struct NodeSearcherItemData : UnityEditor.GraphToolsFoundation.Overdrive.ISearcherItemData
    {
        public System.Type Type { get; }
        public NodeSearcherItemData(System.Type type) {}
    }

    public abstract class OnboardingProvider
    {
        protected const string k_AssetExtension = asset;
        protected const string k_ButtonText = New {0};
        protected const string k_PromptToCreate = Create a new {0};
        protected const string k_PromptToCreateTitle = Create {0};
        protected OnboardingProvider() {}
        protected static UnityEngine.UIElements.VisualElement AddNewGraphButton<T>(UnityEditor.GraphToolsFoundation.Overdrive.IGraphTemplate template, string promptTitle = default(string), string buttonText = default(string), string prompt = default(string), string assetExtension = asset) where T : UnityEngine.ScriptableObject, UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel;
        public abstract UnityEngine.UIElements.VisualElement CreateOnboardingElements(UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher);
        public virtual bool GetGraphAndObjectFromSelection(UnityEditor.GraphToolsFoundation.Overdrive.GraphViewEditorWindow window, UnityEngine.Object selectedObject, out string assetPath, out UnityEngine.GameObject boundObject);
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(false, @"UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting", , )] public struct OpenedGraph
    {
        public UnityEngine.GameObject BoundObject { get; }
        public long FileId { get; }
        [System.Obsolete(@"Use GetGraphAssetModel() instead. Added in 0.9+. (UnityUpgradable) -> GetGraphAssetModel() ")] public UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel GraphAssetModel { get; }
        [System.Obsolete(@"Use GetGraphAssetModelPath() instead. Added in 0.9+. (UnityUpgradable) -> GetGraphAssetModelPath() ")] public string GraphAssetModelPath { get; }
        public string GraphModelAssetGUID { get; }
        [System.Obsolete(@"Use GetGraphAssetModel()?.FriendlyScriptName instead. Added in 0.9+.")] public string GraphName { get; }
        public OpenedGraph(UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel graphAssetModel, UnityEngine.GameObject boundObject) {}
        public UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel GetGraphAssetModel();
        public string GetGraphAssetModelPath();
        public bool IsValid();
    }

    public class PasteSerializedDataCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.CopyPasteData Data;
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.TargetInsertionInfo Info;
        public PasteSerializedDataCommand() {}
        public PasteSerializedDataCommand(UnityEditor.GraphToolsFoundation.Overdrive.TargetInsertionInfo info, UnityEditor.GraphToolsFoundation.Overdrive.CopyPasteData data) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.PasteSerializedDataCommand command);
    }

    public class Pill : UnityEngine.UIElements.VisualElement
    {
        public static readonly string hasIconModifierClassName;
        public static readonly string highlightedModifierClassName;
        public static readonly string ussClassName;
        public bool Highlighted { set; }
        public UnityEngine.Texture Icon { set; }
        public string Text { set; }
        public Pill() {}
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEditor.GraphToolsFoundation.Overdrive.Pill, UnityEditor.GraphToolsFoundation.Overdrive.Pill.UxmlTraits>
        {
            public UxmlFactory() {}
        }
        public class UxmlTraits : UnityEngine.UIElements.VisualElement.UxmlTraits
        {
            public virtual System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription> uxmlChildElementsDescription { get; }
            public UxmlTraits() {}
            public virtual void Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        }
    }

    public class Placemat : UnityEditor.GraphToolsFoundation.Overdrive.GraphElement
    {
        public static readonly string collapseButtonPartName;
        public static readonly string collapsedModifierUssClassName;
        public static readonly string resizerPartName;
        public static readonly string selectionBorderElementName;
        public static readonly string titleContainerPartName;
        public static readonly string ussClassName;
        protected System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.GraphElement> CollapsedElements { get; set; }
        protected UnityEngine.Vector2 CollapsedSize { get; }
        public virtual UnityEngine.UIElements.VisualElement contentContainer { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.IPlacematModel PlacematModel { get; }
        protected UnityEngine.Vector2 UncollapsedSize { get; }
        public Placemat() {}
        public virtual void AddForwardDependencies();
        protected virtual void BuildContextualMenu(UnityEngine.UIElements.ContextualMenuPopulateEvent evt);
        protected virtual void BuildElementUI();
        protected virtual void BuildPartList();
        protected virtual void ExecuteDefaultActionAtTarget(UnityEngine.UIElements.EventBase evt);
        protected virtual void PostBuildUI();
        public virtual void SetPosition(UnityEngine.Rect newPos);
        protected virtual void UpdateElementFromModel();
    }

    public class PlacematContainer : UnityEditor.GraphToolsFoundation.Overdrive.GraphView.Layer
    {
        public static readonly string ussClassName;
        public static int PlacematsLayer { get; }
        public PlacematContainer(UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView) {}
        public bool GetPortCenterOverride(UnityEditor.GraphToolsFoundation.Overdrive.Port port, out UnityEngine.Vector2 overriddenPosition);
        public void UpdateElementsOrder();
    }

    public class PluginRepository : System.IDisposable
    {
        public System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPluginHandler> RegisteredPlugins { get; }
        public virtual void Dispose();
        public System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPluginHandler> GetPluginHandlers();
        public void RegisterPlugins(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPluginHandler> plugins);
        public void UnregisterPlugins(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPluginHandler> except = default(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPluginHandler>));
    }

    public class Port : UnityEditor.GraphToolsFoundation.Overdrive.DropTarget
    {
        public static readonly string connectedModifierUssClassName;
        public static readonly string connectorPartName;
        public static readonly string constantEditorPartName;
        public static readonly string dropHighlightAcceptedClass;
        public static readonly string dropHighlightDeniedClass;
        public static readonly string hiddenModifierUssClassName;
        public static readonly string highlightedModifierUssClassName;
        public static readonly string inputModifierUssClassName;
        public static readonly string notConnectedModifierUssClassName;
        public static readonly string outputModifierUssClassName;
        public static readonly string portDataTypeClassNamePrefix;
        public static readonly string portTypeModifierClassNamePrefix;
        public static readonly string ussClassName;
        public static readonly string verticalModifierUssClassName;
        public static readonly string willConnectModifierUssClassName;
        public UnityEditor.GraphToolsFoundation.Overdrive.EdgeConnector EdgeConnector { get; protected set; }
        public bool Highlighted { set; }
        public UnityEngine.Color PortColor { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.IPortModel PortModel { get; }
        public bool WillConnect { set; }
        public Port() {}
        public void AddDependencyToEdgeModel(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edgeModel);
        public virtual void AddModelDependencies();
        protected virtual void BuildPartList();
        public virtual bool CanAcceptSelectionDrop(System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> dragSelection);
        public UnityEngine.UIElements.VisualElement GetConnector();
        public UnityEngine.Vector3 GetGlobalCenter();
        protected virtual void OnDragEnd();
        public virtual void OnDragEnter(UnityEngine.UIElements.DragEnterEvent evt);
        public virtual void OnDragPerform(UnityEngine.UIElements.DragPerformEvent evt);
        protected virtual void OnDropModel(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel droppedModel);
        protected virtual void OnDropVariableDeclarationModel(UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel variable, UnityEngine.Vector2 mousePosition);
        protected virtual void PostBuildUI();
        protected virtual void UpdateElementFromModel();
    }

    public class PortConnectorPart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        public static readonly string connectorCapUssName;
        public static readonly string connectorUssName;
        public static readonly string labelName;
        public static readonly string ussClassName;
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected PortConnectorPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement container);
        public static UnityEditor.GraphToolsFoundation.Overdrive.PortConnectorPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI, string parentClassName);
        protected virtual void PostBuildPartUI();
        protected virtual void UpdatePartFromModel();
    }

    public class PortConnectorWithIconPart : UnityEditor.GraphToolsFoundation.Overdrive.PortConnectorPart
    {
        public static readonly string iconUssName;
        protected PortConnectorWithIconPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement container);
        public static UnityEditor.GraphToolsFoundation.Overdrive.PortConnectorWithIconPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI, string parentClassName);
        protected virtual void PostBuildPartUI();
        protected virtual void UpdatePartFromModel();
    }

    public class PortConstantEditorPart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        public static readonly string constantEditorUssName;
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected PortConstantEditorPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement container);
        public static UnityEditor.GraphToolsFoundation.Overdrive.PortConstantEditorPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI, string parentClassName);
        protected virtual void UpdatePartFromModel();
    }

    public class PortContainer : UnityEngine.UIElements.VisualElement
    {
        public static readonly string ussClassName;
        public PortContainer() {}
        public void UpdatePorts(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> ports, UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher);
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEditor.GraphToolsFoundation.Overdrive.PortContainer>
        {
            public UxmlFactory() {}
        }
    }

    public class PortContainerPart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        public static readonly string portsUssName;
        public static readonly string ussClassName;
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected PortContainerPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement container);
        public static UnityEditor.GraphToolsFoundation.Overdrive.PortContainerPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI, string parentClassName);
        protected virtual void PostBuildPartUI();
        protected virtual void UpdatePartFromModel();
    }

    public class Preferences
    {
        protected Preferences(string editorPreferencesPrefix) {}
        public static UnityEditor.GraphToolsFoundation.Overdrive.Preferences CreatePreferences(string editorPreferencesPrefix);
        public bool GetBool(UnityEditor.GraphToolsFoundation.Overdrive.BoolPref k);
        public int GetInt(UnityEditor.GraphToolsFoundation.Overdrive.IntPref k);
        protected void Initialize<TBool, TInt>() where TBool : UnityEditor.GraphToolsFoundation.Overdrive.BoolPref where TInt : UnityEditor.GraphToolsFoundation.Overdrive.IntPref;
        public void SetBool(UnityEditor.GraphToolsFoundation.Overdrive.BoolPref k, bool value);
        public void SetBoolNoEditorUpdate(UnityEditor.GraphToolsFoundation.Overdrive.BoolPref k, bool value);
        protected virtual void SetDefaultValues();
        public void SetInt(UnityEditor.GraphToolsFoundation.Overdrive.IntPref k, int value);
        public void SetIntNoEditorUpdate(UnityEditor.GraphToolsFoundation.Overdrive.IntPref k, int value);
        public void ToggleBool(UnityEditor.GraphToolsFoundation.Overdrive.BoolPref k);
    }

    public class PromptSearcherEvent : UnityEngine.UIElements.EventBase<UnityEditor.GraphToolsFoundation.Overdrive.PromptSearcherEvent>
    {
        public UnityEngine.Vector2 MenuPosition;
        public PromptSearcherEvent() {}
        public static UnityEditor.GraphToolsFoundation.Overdrive.PromptSearcherEvent GetPooled(UnityEngine.Vector2 menuPosition);
        protected virtual void Init();
    }

    public class PropertyElement : UnityEngine.UIElements.TemplateContainer
    {
        public UnityEngine.UIElements.Toggle Toggle;
        public UnityEditor.GraphToolsFoundation.Overdrive.PropertySearcherItem Item { get; set; }
        public PropertyElement(string templateId) {}
    }

    public class PropertySearcherItem : UnityEditor.Searcher.SearcherItem
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.PropertyElement Element;
        public bool Enabled;
        public UnityEngine.GraphToolsFoundation.Overdrive.MemberInfoValue MemberInfo { get; }
        public PropertySearcherItem(UnityEngine.GraphToolsFoundation.Overdrive.MemberInfoValue memberInfo, string path, int hashcode, string help = , System.Collections.Generic.List<UnityEditor.Searcher.SearcherItem> children = default(System.Collections.Generic.List<UnityEditor.Searcher.SearcherItem>)) {}
        public virtual int GetHashCode();
    }

    public class QuickFix
    {
        public string Description { get; }
        public System.Action<UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher> QuickFixAction { get; }
        public QuickFix(string description, System.Action<UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher> quickFixAction) {}
    }

    public class RectangleSelector : UnityEngine.UIElements.MouseManipulator
    {
        public RectangleSelector() {}
        public UnityEngine.Rect ComputeAxisAlignedBound(UnityEngine.Rect position, UnityEngine.Matrix4x4 transform);
        protected void OnMouseCaptureOutEvent(UnityEngine.UIElements.MouseCaptureOutEvent e);
        protected void OnMouseDown(UnityEngine.UIElements.MouseDownEvent e);
        protected void OnMouseMove(UnityEngine.UIElements.MouseMoveEvent e);
        protected void OnMouseUp(UnityEngine.UIElements.MouseUpEvent e);
        protected virtual void RegisterCallbacksOnTarget();
        protected virtual void UnregisterCallbacksFromTarget();
    }

    public static class RectUtils
    {
        public static UnityEngine.Rect Encompass(UnityEngine.Rect a, UnityEngine.Rect b);
        public static UnityEngine.Rect Inflate(UnityEngine.Rect a, float left, float top, float right, float bottom);
        public static bool IntersectsSegment(UnityEngine.Rect rect, UnityEngine.Vector2 p1, UnityEngine.Vector2 p2);
    }

    public class ReframeGraphViewCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> NewSelection;
        public UnityEngine.Vector3 Position;
        public UnityEngine.Vector3 Scale;
        public ReframeGraphViewCommand() {}
        public ReframeGraphViewCommand(UnityEngine.Vector3 position, UnityEngine.Vector3 scale, System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> newSelection = default(System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel>)) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState state, UnityEditor.GraphToolsFoundation.Overdrive.ReframeGraphViewCommand command);
    }

    public class RemoveEdgeControlPointCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public readonly int EdgeIndex;
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.IEditableEdge EdgeModel;
        public RemoveEdgeControlPointCommand() {}
        public RemoveEdgeControlPointCommand(UnityEditor.GraphToolsFoundation.Overdrive.IEditableEdge edgeModel, int edgeIndex) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.RemoveEdgeControlPointCommand command);
    }

    public class RenameElementCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public string ElementName;
        public UnityEditor.GraphToolsFoundation.Overdrive.IRenamable RenamableModel;
        public RenameElementCommand() {}
        public RenameElementCommand(UnityEditor.GraphToolsFoundation.Overdrive.IRenamable renamableModel, string name) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.RenameElementCommand command);
    }

    public class ReorderEdgeCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel EdgeModel;
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.ReorderEdgeCommand.ReorderType Type;
        public ReorderEdgeCommand() {}
        public ReorderEdgeCommand(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edgeModel, UnityEditor.GraphToolsFoundation.Overdrive.ReorderEdgeCommand.ReorderType type) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.ReorderEdgeCommand command);
        public enum ReorderType
        {
            public const UnityEditor.GraphToolsFoundation.Overdrive.ReorderEdgeCommand.ReorderType MoveDown = 2;
            public const UnityEditor.GraphToolsFoundation.Overdrive.ReorderEdgeCommand.ReorderType MoveFirst = 0;
            public const UnityEditor.GraphToolsFoundation.Overdrive.ReorderEdgeCommand.ReorderType MoveLast = 3;
            public const UnityEditor.GraphToolsFoundation.Overdrive.ReorderEdgeCommand.ReorderType MoveUp = 1;
            public int value__;
        }
    }

    public class ReorderGraphVariableDeclarationCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel InsertAfter;
        public readonly System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel> VariableDeclarationModelsToMove;
        public ReorderGraphVariableDeclarationCommand() {}
        public ReorderGraphVariableDeclarationCommand(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel> modelsToMove, UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel insertAfter) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.ReorderGraphVariableDeclarationCommand command);
    }

    public enum RequestGraphProcessingOptions
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.RequestGraphProcessingOptions Default = 0;
        public const UnityEditor.GraphToolsFoundation.Overdrive.RequestGraphProcessingOptions SaveGraph = 1;
        public int value__;
    }

    public class ResetElementColorCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel>
    {
        public ResetElementColorCommand() {}
        public ResetElementColorCommand(System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> models) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.ResetElementColorCommand command);
    }

    public class ResizableElement : UnityEngine.UIElements.VisualElement
    {
        public static readonly string ussClassName;
        public ResizableElement() {}
        public ResizableElement(string uiFile) {}
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEditor.GraphToolsFoundation.Overdrive.ResizableElement>
        {
            public UxmlFactory() {}
        }
    }

    [System.Flags] public enum ResizerDirection
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.ResizerDirection Bottom = 2;
        public const UnityEditor.GraphToolsFoundation.Overdrive.ResizerDirection Left = 4;
        public const UnityEditor.GraphToolsFoundation.Overdrive.ResizerDirection Right = 8;
        public const UnityEditor.GraphToolsFoundation.Overdrive.ResizerDirection Top = 1;
        public int value__;
    }

    public enum SearcherContext
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.SearcherContext Graph = 0;
        public const UnityEditor.GraphToolsFoundation.Overdrive.SearcherContext None = 2;
        public const UnityEditor.GraphToolsFoundation.Overdrive.SearcherContext Type = 1;
        public int value__;
    }

    public class SearcherFilter
    {
        public readonly System.Collections.Generic.List<UnityEditor.Searcher.LuceneSearcherDatabase.Filter> LuceneFilters;
        public static UnityEditor.GraphToolsFoundation.Overdrive.SearcherFilter Empty { get; }
        public SearcherFilter() {}
        public UnityEditor.GraphToolsFoundation.Overdrive.SearcherFilter WithFieldQuery(string field, object value, UnityEditor.Searcher.LuceneSearcherDatabase.FilterType type = 0);
    }

    public class SearcherGraphView : UnityEditor.GraphToolsFoundation.Overdrive.GraphView
    {
        public static readonly string ussClassName;
        public SearcherGraphView(UnityEditor.GraphToolsFoundation.Overdrive.GraphViewEditorWindow window, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher) {}
    }

    [System.AttributeUsage(4, AllowMultiple = true)] public class SearcherItemAttribute : System.Attribute
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.SearcherContext Context { get; }
        public string Path { get; }
        public System.Type StencilType { get; }
        public SearcherItemAttribute(System.Type stencilType, UnityEditor.GraphToolsFoundation.Overdrive.SearcherContext context, string path) {}
    }

    [JetBrains.Annotations.PublicAPI] [System.Runtime.CompilerServices.Extension] public static class SearcherItemCollectionExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static void AddAtPath(System.Collections.Generic.List<UnityEditor.Searcher.SearcherItem> items, UnityEditor.Searcher.SearcherItem item, string path = );
        [System.Runtime.CompilerServices.Extension] public static bool TryAddClassItem(System.Collections.Generic.List<UnityEditor.Searcher.SearcherItem> items, UnityEditor.Searcher.SearcherItem itemToAdd, UnityEngine.GraphToolsFoundation.Overdrive.ITypeMetadata meta, string parentName = );
        [System.Runtime.CompilerServices.Extension] public static bool TryAddEnumItem(System.Collections.Generic.List<UnityEditor.Searcher.SearcherItem> items, UnityEditor.Searcher.SearcherItem itemToAdd, UnityEngine.GraphToolsFoundation.Overdrive.ITypeMetadata meta, string parentName = );
    }

    [System.Runtime.CompilerServices.Extension] public static class SearcherItemExtensions
    {
        [JetBrains.Annotations.CanBeNull] [System.Runtime.CompilerServices.Extension] public static UnityEditor.Searcher.SearcherItem Find(UnityEditor.Searcher.SearcherItem item, string name);
    }

    public static class SearcherItemUtility
    {
        [JetBrains.Annotations.NotNull] public static UnityEditor.Searcher.SearcherItem GetItemFromPath([JetBrains.Annotations.NotNull] System.Collections.Generic.List<UnityEditor.Searcher.SearcherItem> items, string path);
    }

    public static class SearcherService
    {
        public static readonly System.Comparison<UnityEditor.Searcher.SearcherItem> TypeComparison;
        public static UnityEditor.GraphToolsFoundation.Overdrive.SearcherGraphView GraphView { get; }
        public static void ApplyDatabasesFilter<T>(System.Collections.Generic.List<UnityEditor.Searcher.SearcherDatabaseBase> databases, UnityEditor.GraphToolsFoundation.Overdrive.SearcherFilter filter) where T : UnityEditor.GraphToolsFoundation.Overdrive.ISearcherItemDataProvider;
        public static void FindInGraph(UnityEditor.EditorWindow host, UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graph, System.Action<UnityEditor.GraphToolsFoundation.Overdrive.FindInGraphAdapter.FindSearcherItem> highlightDelegate, System.Action<UnityEditor.GraphToolsFoundation.Overdrive.FindInGraphAdapter.FindSearcherItem> selectionDelegate);
        public static void ShowEdgeNodes(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edgeModel, UnityEngine.Vector2 position, System.Action<UnityEditor.GraphToolsFoundation.Overdrive.GraphNodeModelSearcherItem> callback);
        public static void ShowGraphNodes(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEngine.Vector2 position, System.Action<UnityEditor.GraphToolsFoundation.Overdrive.GraphNodeModelSearcherItem> callback);
        public static void ShowInputToGraphNodes(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> portModels, UnityEngine.Vector2 position, System.Action<UnityEditor.GraphToolsFoundation.Overdrive.GraphNodeModelSearcherItem> callback);
        public static void ShowOutputToGraphNodes(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> portModels, UnityEngine.Vector2 position, System.Action<UnityEditor.GraphToolsFoundation.Overdrive.GraphNodeModelSearcherItem> callback);
        public static void ShowOutputToGraphNodes(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel, UnityEngine.Vector2 position, System.Action<UnityEditor.GraphToolsFoundation.Overdrive.GraphNodeModelSearcherItem> callback);
        public static void ShowTypes(UnityEditor.GraphToolsFoundation.Overdrive.Stencil stencil, System.Collections.Generic.List<UnityEditor.Searcher.SearcherDatabase> databases, UnityEngine.Vector2 position, System.Action<UnityEngine.GraphToolsFoundation.Overdrive.TypeHandle, int> callback);
        public static void ShowValues(UnityEditor.GraphToolsFoundation.Overdrive.Stencil stencil, string title, System.Collections.Generic.IEnumerable<string> values, UnityEngine.Vector2 position, System.Action<string, int> callback);
        public static void ShowVariableTypes(UnityEditor.GraphToolsFoundation.Overdrive.Stencil stencil, UnityEngine.Vector2 position, System.Action<UnityEngine.GraphToolsFoundation.Overdrive.TypeHandle, int> callback);
        public static class Usage
        {
            public const string k_CreateNode = create-node;
            public const string k_Types = types;
            public const string k_Values = values;
        }
    }

    public class SelectElementsCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel>
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.SelectElementsCommand.SelectionMode Mode;
        public SelectElementsCommand() {}
        public SelectElementsCommand(UnityEditor.GraphToolsFoundation.Overdrive.SelectElementsCommand.SelectionMode mode, System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> models) {}
        public SelectElementsCommand(UnityEditor.GraphToolsFoundation.Overdrive.SelectElementsCommand.SelectionMode mode, params UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel[] models) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState state, UnityEditor.GraphToolsFoundation.Overdrive.SelectElementsCommand command);
        public enum SelectionMode
        {
            public const UnityEditor.GraphToolsFoundation.Overdrive.SelectElementsCommand.SelectionMode Add = 1;
            public const UnityEditor.GraphToolsFoundation.Overdrive.SelectElementsCommand.SelectionMode Remove = 2;
            public const UnityEditor.GraphToolsFoundation.Overdrive.SelectElementsCommand.SelectionMode Replace = 0;
            public const UnityEditor.GraphToolsFoundation.Overdrive.SelectElementsCommand.SelectionMode Toggle = 3;
            public int value__;
        }
    }

    public class SelectionBorder : UnityEngine.UIElements.VisualElement
    {
        public static readonly string contentContainerElementName;
        public static readonly string ussClassName;
        public UnityEngine.UIElements.VisualElement ContentContainer { get; }
        public SelectionBorder() {}
    }

    public class SelectionDragger : UnityEngine.UIElements.MouseManipulator
    {
        public const float maxPanSpeed = 10;
        public const float maxSpeedFactor = 2.5;
        public const float minSpeedFactor = 0.5;
        public const int panAreaWidth = 100;
        public const int panInterval = 10;
        public const int panSpeed = 4;
        public bool IsActive { get; }
        public SelectionDragger(UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView) {}
        protected void OnKeyDown(UnityEngine.UIElements.KeyDownEvent e);
        protected void OnMouseCaptureOutEvent(UnityEngine.UIElements.MouseCaptureOutEvent e);
        protected void OnMouseDown(UnityEngine.UIElements.MouseDownEvent e);
        protected void OnMouseMove(UnityEngine.UIElements.MouseMoveEvent e);
        protected void OnMouseUp(UnityEngine.UIElements.MouseUpEvent evt);
        protected virtual void RegisterCallbacksOnTarget();
        protected virtual void UnregisterCallbacksFromTarget();
    }

    public class SelectionDropper : UnityEngine.UIElements.Manipulator
    {
        public SelectionDropper(UnityEngine.UIElements.MouseButton activateButton = 0) {}
        protected void OnMouseCaptureOutEvent(UnityEngine.UIElements.MouseCaptureOutEvent e);
        protected void OnMouseDown(UnityEngine.UIElements.MouseDownEvent e);
        protected void OnMouseMove(UnityEngine.UIElements.MouseMoveEvent e);
        protected void OnMouseUp(UnityEngine.UIElements.MouseUpEvent e);
        protected virtual void RegisterCallbacksOnTarget();
        protected virtual void UnregisterCallbacksFromTarget();
    }

    public sealed class SelectionStateComponent : UnityEngine.GraphToolsFoundation.CommandStateObserver.AssetViewStateComponent<UnityEditor.GraphToolsFoundation.Overdrive.SelectionStateComponent.StateUpdater>
    {
        public SelectionStateComponent() {}
        public virtual void AfterDeserialize();
        protected virtual void Dispose(bool disposing);
        public UnityEditor.GraphToolsFoundation.Overdrive.SelectionStateComponent.Changeset GetAggregatedChangeset(System.UInt32 sinceVersion);
        public System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> GetSelection(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graph);
        public bool IsSelected(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model);
        public virtual void PurgeOldChangesets(System.UInt32 untilVersion);
        protected virtual void PushChangeset(System.UInt32 version);
        public virtual void SetUpdateType(UnityEngine.GraphToolsFoundation.CommandStateObserver.UpdateType type, bool force = False);
        public class Changeset : UnityEngine.GraphToolsFoundation.CommandStateObserver.IChangeset
        {
            public System.Collections.Generic.HashSet<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> ChangedModels { get; }
            public Changeset() {}
            public virtual void AggregateFrom(System.Collections.Generic.IEnumerable<UnityEngine.GraphToolsFoundation.CommandStateObserver.IChangeset> changesets);
            public virtual void Clear();
        }
        public class StateUpdater : UnityEngine.GraphToolsFoundation.CommandStateObserver.StateComponent<UnityEditor.GraphToolsFoundation.Overdrive.SelectionStateComponent.StateUpdater, UnityEditor.GraphToolsFoundation.Overdrive.SelectionStateComponent>
        {
            public StateUpdater() {}
            public void ClearSelection(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
            public void SelectElement(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel graphElementModel, bool select);
            public void SelectElements(System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> graphElementModels, bool select);
        }
    }

    public class SetEdgeEditModeCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.IEditableEdge EdgeModel;
        public readonly bool Value;
        public SetEdgeEditModeCommand() {}
        public SetEdgeEditModeCommand(UnityEditor.GraphToolsFoundation.Overdrive.IEditableEdge edgeModel, bool value) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.SetEdgeEditModeCommand command);
    }

    public class SetNodeCollapsedCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel, bool>
    {
        public SetNodeCollapsedCommand() {}
        public SetNodeCollapsedCommand(System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel> models, bool value) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.SetNodeCollapsedCommand command);
    }

    public class SetNodeEnabledStateCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel, UnityEditor.GraphToolsFoundation.Overdrive.ModelState>
    {
        public SetNodeEnabledStateCommand() {}
        public SetNodeEnabledStateCommand(UnityEditor.GraphToolsFoundation.Overdrive.INodeModel[] nodeModel, UnityEditor.GraphToolsFoundation.Overdrive.ModelState state) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.SetNodeEnabledStateCommand command);
    }

    public class SetPlacematCollapsedCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public readonly bool Collapse;
        public readonly System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> CollapsedElements;
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.IPlacematModel PlacematModel;
        public SetPlacematCollapsedCommand() {}
        public SetPlacematCollapsedCommand(UnityEditor.GraphToolsFoundation.Overdrive.IPlacematModel placematModel, bool collapse, System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> collapsedElements) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.SetPlacematCollapsedCommand command);
    }

    [UnityEditor.GraphToolsFoundation.Overdrive.ToolShortcutEvent(, @"Align Hierarchies", 105, 4, false, , )] public class ShortcutAlignNodeHierarchiesEvent : UnityEditor.GraphToolsFoundation.Overdrive.ShortcutEventBase<UnityEditor.GraphToolsFoundation.Overdrive.ShortcutAlignNodeHierarchiesEvent>
    {
        public ShortcutAlignNodeHierarchiesEvent() {}
    }

    [UnityEditor.GraphToolsFoundation.Overdrive.ToolShortcutEvent(, @"Align Nodes", 105, 0, false, , )] public class ShortcutAlignNodesEvent : UnityEditor.GraphToolsFoundation.Overdrive.ShortcutEventBase<UnityEditor.GraphToolsFoundation.Overdrive.ShortcutAlignNodesEvent>
    {
        public ShortcutAlignNodesEvent() {}
    }

    [UnityEditor.GraphToolsFoundation.Overdrive.ToolShortcutEvent(, @"Convert Variable And Constant", 99, 0, false, , )] public class ShortcutConvertConstantAndVariableEvent : UnityEditor.GraphToolsFoundation.Overdrive.ShortcutEventBase<UnityEditor.GraphToolsFoundation.Overdrive.ShortcutConvertConstantAndVariableEvent>
    {
        public ShortcutConvertConstantAndVariableEvent() {}
    }

    [UnityEditor.GraphToolsFoundation.Overdrive.ToolShortcutEvent(, @"Create Sticky Note", 96, 0, false, , )] public class ShortcutCreateStickyNoteEvent : UnityEditor.GraphToolsFoundation.Overdrive.ShortcutEventBase<UnityEditor.GraphToolsFoundation.Overdrive.ShortcutCreateStickyNoteEvent>
    {
        public ShortcutCreateStickyNoteEvent() {}
    }

    [UnityEditor.GraphToolsFoundation.Overdrive.ToolShortcutEvent(, @"Delete", 8, 0, false, , )] public class ShortcutDeleteEvent : UnityEditor.GraphToolsFoundation.Overdrive.ShortcutEventBase<UnityEditor.GraphToolsFoundation.Overdrive.ShortcutDeleteEvent>
    {
        public ShortcutDeleteEvent() {}
    }

    [UnityEditor.GraphToolsFoundation.Overdrive.ToolShortcutEvent(, @"Display Smart Search", 32, 0, false, , )] public class ShortcutDisplaySmartSearchEvent : UnityEditor.GraphToolsFoundation.Overdrive.ShortcutEventBase<UnityEditor.GraphToolsFoundation.Overdrive.ShortcutDisplaySmartSearchEvent>
    {
        public ShortcutDisplaySmartSearchEvent() {}
    }

    public class ShortcutEventBase<T> : UnityEngine.UIElements.EventBase<T>, UnityEditor.GraphToolsFoundation.Overdrive.IShortcutEvent where T : UnityEditor.GraphToolsFoundation.Overdrive.ShortcutEventBase<T>, new()
    {
        public virtual UnityEngine.Vector2 MousePosition { get; }
        public virtual UnityEditor.ShortcutManagement.ShortcutStage Stage { get; }
        public ShortcutEventBase() {}
        public static UnityEditor.GraphToolsFoundation.Overdrive.ShortcutEventBase<T> GetPooled(UnityEditor.ShortcutManagement.ShortcutStage stage);
        protected virtual void Init();
        protected static void SendEvent(UnityEditor.ShortcutManagement.ShortcutArguments args);
    }

    [UnityEditor.GraphToolsFoundation.Overdrive.ToolShortcutEvent(, @"Frame All", 97, 0, false, , )] public class ShortcutFrameAllEvent : UnityEditor.GraphToolsFoundation.Overdrive.ShortcutEventBase<UnityEditor.GraphToolsFoundation.Overdrive.ShortcutFrameAllEvent>
    {
        public ShortcutFrameAllEvent() {}
    }

    [UnityEditor.GraphToolsFoundation.Overdrive.ToolShortcutEvent(, @"Frame Next", 93, 0, false, , )] public class ShortcutFrameNextEvent : UnityEditor.GraphToolsFoundation.Overdrive.ShortcutEventBase<UnityEditor.GraphToolsFoundation.Overdrive.ShortcutFrameNextEvent>
    {
        public ShortcutFrameNextEvent() {}
    }

    [UnityEditor.GraphToolsFoundation.Overdrive.ToolShortcutEvent(, @"Frame Origin", 111, 0, false, , )] public class ShortcutFrameOriginEvent : UnityEditor.GraphToolsFoundation.Overdrive.ShortcutEventBase<UnityEditor.GraphToolsFoundation.Overdrive.ShortcutFrameOriginEvent>
    {
        public ShortcutFrameOriginEvent() {}
    }

    [UnityEditor.GraphToolsFoundation.Overdrive.ToolShortcutEvent(, @"Frame Previous", 91, 0, false, , )] public class ShortcutFramePreviousEvent : UnityEditor.GraphToolsFoundation.Overdrive.ShortcutEventBase<UnityEditor.GraphToolsFoundation.Overdrive.ShortcutFramePreviousEvent>
    {
        public ShortcutFramePreviousEvent() {}
    }

    public static class ShortcutHelper
    {
        public static string CreateShortcutMenuItemEntry(string menuItemText, string toolName, string shortcutId);
        public static void RegisterDefaultShortcuts<T>(string toolName, System.Func<string, bool> shortcutFilter = default(System.Func<string, bool>), bool registerNow = False) where T : UnityEditor.EditorWindow;
    }

    public class SimpleSearcherAdapter : UnityEditor.Searcher.SearcherAdapter, UnityEditor.GraphToolsFoundation.Overdrive.IGTFSearcherAdapter, UnityEditor.Searcher.ISearcherAdapter
    {
        public virtual bool HasDetailsPanel { get; }
        public virtual float InitialSplitterDetailRatio { get; }
        public SimpleSearcherAdapter(string title) {}
        public virtual void SetInitialSplitterDetailRatio(float ratio);
    }

    public class SinglePortContainerPart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected SinglePortContainerPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement container);
        public static UnityEditor.GraphToolsFoundation.Overdrive.SinglePortContainerPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI, string parentClassName);
        protected virtual void UpdatePartFromModel();
    }

    public class SplitEdgeAndInsertExistingNodeCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel EdgeModel;
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.IInputOutputPortsNodeModel NodeModel;
        public SplitEdgeAndInsertExistingNodeCommand() {}
        public SplitEdgeAndInsertExistingNodeCommand(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edgeModel, UnityEditor.GraphToolsFoundation.Overdrive.IInputOutputPortsNodeModel nodeModel) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.SplitEdgeAndInsertExistingNodeCommand command);
    }

    [JetBrains.Annotations.PublicAPI] public abstract class Stencil : UnityEditor.GraphToolsFoundation.Overdrive.IStencil
    {
        protected UnityEditor.GraphToolsFoundation.Overdrive.Plugins.Debugging.DebugInstrumentationHandler m_DebugInstrumentationHandler;
        protected UnityEditor.GraphToolsFoundation.Overdrive.ISearcherDatabaseProvider m_SearcherDatabaseProvider;
        protected UnityEditor.GraphToolsFoundation.Overdrive.IToolbarProvider m_ToolbarProvider;
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IDebugger Debugger { get; }
        public virtual System.Collections.Generic.IEnumerable<System.Type> EventTypes { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel GraphModel { get; set; }
        public virtual bool MoveNodeDependenciesByDefault { get; }
        public abstract string ToolName { get; }
        public virtual UnityEngine.GraphToolsFoundation.Overdrive.ITypeMetadataResolver TypeMetadataResolver { get; }
        protected Stencil() {}
        public virtual bool CanPasteNode(UnityEditor.GraphToolsFoundation.Overdrive.INodeModel originalModel, UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graph);
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IBlackboardGraphModel CreateBlackboardGraphModel(UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel graphAssetModel);
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IConstant CreateConstantValue(UnityEngine.GraphToolsFoundation.Overdrive.TypeHandle constantTypeHandle);
        public virtual bool CreateDependencyFromEdge(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edgeModel, out UnityEditor.GraphToolsFoundation.Overdrive.LinkedNodesDependency linkedNodesDependency, out UnityEditor.GraphToolsFoundation.Overdrive.INodeModel parentNodeModel);
        public virtual UnityEngine.GraphToolsFoundation.Overdrive.IGraphProcessor CreateGraphProcessor();
        public virtual void CreateNodesFromPort(UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> portModels, UnityEngine.Vector2 localPosition, UnityEngine.Vector2 worldPosition, System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> edgesToDelete);
        public virtual void CreateNodesFromPort(UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel, UnityEngine.Vector2 localPosition, UnityEngine.Vector2 worldPosition, System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> edgesToDelete);
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphProcessingErrorModel CreateProcessingErrorModel(UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingError error);
        public virtual System.Collections.Generic.List<UnityEngine.GraphToolsFoundation.Overdrive.ITypeMetadata> GetAssembliesTypesMetadata();
        public virtual System.Type GetConstantNodeValueType(UnityEngine.GraphToolsFoundation.Overdrive.TypeHandle typeHandle);
        public virtual System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel> GetEntryPoints();
        [System.Runtime.CompilerServices.IteratorStateMachine(typeof(UnityEditor.GraphToolsFoundation.Overdrive.Stencil.<GetGraphProcessingPluginHandlers>d__24))] public virtual System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPluginHandler> GetGraphProcessingPluginHandlers(UnityEngine.GraphToolsFoundation.Overdrive.GraphProcessingOptions getGraphProcessingOptions);
        public virtual System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel> GetLinkedPortals(UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel portalModel);
        public virtual string GetNodeDocumentation(UnityEditor.Searcher.SearcherItem node, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model);
        public virtual System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel> GetPortalDependencies(UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel portalModel);
        public virtual bool GetPortCapacity(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel, out UnityEditor.GraphToolsFoundation.Overdrive.PortCapacity capacity);
        [JetBrains.Annotations.CanBeNull] public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGTFSearcherAdapter GetSearcherAdapter(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel, string title, System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> contextPortModel = default(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel>));
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.ISearcherDatabaseProvider GetSearcherDatabaseProvider();
        [JetBrains.Annotations.CanBeNull] public virtual UnityEditor.GraphToolsFoundation.Overdrive.ISearcherFilterProvider GetSearcherFilterProvider();
        public virtual UnityEngine.Rect GetSearcherRect(UnityEngine.Vector2 position, out float rightLeftRatio, string usage);
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IToolbarProvider GetToolbarProvider();
        public virtual void OnDragAndDropVariableDeclarations(UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, System.Collections.Generic.List<System.ValueTuple<UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel, UnityEngine.GraphToolsFoundation.Overdrive.SerializableGUID, UnityEngine.Vector2>> variablesToCreate);
        public virtual void OnGraphProcessingFailed(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel, UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingResult results);
        public virtual void OnGraphProcessingStarted(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
        public virtual void OnGraphProcessingSucceeded(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel, UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingResult results);
        public virtual void OnInspectorGUI();
        public virtual void PopulateBlackboardCreateMenu(string sectionName, UnityEditor.GenericMenu menu, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher);
        public virtual void PreProcessGraph(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
        public virtual bool RequiresInitialization(UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel decl);
        public virtual bool RequiresInspectorInitialization(UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel decl);
        public virtual void SetSearcherSize(string usage, UnityEngine.Vector2 size, float rightLeftRatio = 1);
    }

    public class StickyNote : UnityEditor.GraphToolsFoundation.Overdrive.GraphElement
    {
        public static readonly string contentContainerPartName;
        public static readonly UnityEngine.Vector2 defaultSize;
        public static readonly string disabledOverlayElementName;
        public static readonly string resizerPartName;
        public static readonly string selectionBorderElementName;
        public static readonly string titleContainerPartName;
        public static readonly string ussClassName;
        public virtual UnityEngine.UIElements.VisualElement contentContainer { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.IStickyNoteModel StickyNoteModel { get; }
        public StickyNote() {}
        protected virtual void BuildElementUI();
        protected virtual void BuildPartList();
        public static System.Collections.Generic.IEnumerable<string> GetSizes();
        public static System.Collections.Generic.IEnumerable<string> GetThemes();
        protected virtual void PostBuildUI();
        protected virtual void UpdateElementFromModel();
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEditor.GraphToolsFoundation.Overdrive.StickyNote>
        {
            public UxmlFactory() {}
        }
    }

    public class StickyNoteContentPart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected UnityEditor.GraphToolsFoundation.Overdrive.EditableLabel TextLabel { get; set; }
        protected StickyNoteContentPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement container);
        public static UnityEditor.GraphToolsFoundation.Overdrive.StickyNoteContentPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI, string parentClassName);
        protected void OnRename(UnityEngine.UIElements.ChangeEvent<string> e);
        protected virtual void UpdatePartFromModel();
    }

    public enum StickyNoteFontSize
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.StickyNoteFontSize Huge = 3;
        public const UnityEditor.GraphToolsFoundation.Overdrive.StickyNoteFontSize Large = 2;
        public const UnityEditor.GraphToolsFoundation.Overdrive.StickyNoteFontSize Medium = 1;
        public const UnityEditor.GraphToolsFoundation.Overdrive.StickyNoteFontSize Small = 0;
        public int value__;
    }

    public enum StickyNoteTheme
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.StickyNoteTheme Black = 1;
        public const UnityEditor.GraphToolsFoundation.Overdrive.StickyNoteTheme Blue = 5;
        public const UnityEditor.GraphToolsFoundation.Overdrive.StickyNoteTheme Classic = 0;
        public const UnityEditor.GraphToolsFoundation.Overdrive.StickyNoteTheme Dark = 2;
        public const UnityEditor.GraphToolsFoundation.Overdrive.StickyNoteTheme Green = 4;
        public const UnityEditor.GraphToolsFoundation.Overdrive.StickyNoteTheme Orange = 3;
        public const UnityEditor.GraphToolsFoundation.Overdrive.StickyNoteTheme Purple = 7;
        public const UnityEditor.GraphToolsFoundation.Overdrive.StickyNoteTheme Red = 6;
        public const UnityEditor.GraphToolsFoundation.Overdrive.StickyNoteTheme Teal = 8;
        public int value__;
    }

    [System.Runtime.CompilerServices.Extension] public static class StringUtilsExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static string ToCamelCase(string text);
        [System.Runtime.CompilerServices.Extension] public static string ToKebabCase(string text);
        [System.Runtime.CompilerServices.Extension] public static string ToPascalCase(string text);
        [System.Runtime.CompilerServices.Extension] public static string ToSnakeCase(string text);
        [System.Runtime.CompilerServices.Extension] public static string ToTrainCase(string text);
        [System.Runtime.CompilerServices.Extension] public static string WithUssElement(string blockName, string elementName);
        [System.Runtime.CompilerServices.Extension] public static string WithUssModifier(string blockName, string modifier);
    }

    [System.Runtime.CompilerServices.IsReadOnly] public struct TagSearcherItemData : UnityEditor.GraphToolsFoundation.Overdrive.ISearcherItemData
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.CommonSearcherTags Tag { get; }
        public TagSearcherItemData(UnityEditor.GraphToolsFoundation.Overdrive.CommonSearcherTags tag) {}
    }

    public struct TargetInsertionInfo
    {
        public UnityEngine.Vector2 Delta;
        public string OperationName;
    }

    public class ToggleEdgePortsCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel[] EdgeModels;
        public ToggleEdgePortsCommand(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel[] edgeModels) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.ToggleEdgePortsCommand command);
    }

    public class ToggleLockConstantNodeCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.IConstantNodeModel>
    {
        public ToggleLockConstantNodeCommand() {}
        public ToggleLockConstantNodeCommand(params UnityEditor.GraphToolsFoundation.Overdrive.IConstantNodeModel[] constantNodeModels) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.ToggleLockConstantNodeCommand command);
    }

    public class TogglePortsCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public TogglePortsCommand() {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.TogglePortsCommand command);
    }

    public class ToggleTracingCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public ToggleTracingCommand() {}
        public ToggleTracingCommand(bool value) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState state, UnityEditor.GraphToolsFoundation.Overdrive.ToggleTracingCommand command);
    }

    public class TokenNode : UnityEditor.GraphToolsFoundation.Overdrive.Node
    {
        public static readonly string constantEditorPartName;
        public static readonly string constantModifierUssClassName;
        public static readonly string inputPortContainerPartName;
        public static readonly string outputPortContainerPartName;
        public static readonly string portalEntryModifierUssClassName;
        public static readonly string portalExitModifierUssClassName;
        public static readonly string portalModifierUssClassName;
        public static readonly string titleIconContainerPartName;
        public static readonly string tokenModifierUssClassName;
        public static readonly string variableModifierUssClassName;
        public TokenNode() {}
        protected virtual void BuildPartList();
        protected virtual void PostBuildUI();
        public virtual bool ShouldHighlightItemUsage(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel elementModel);
    }

    public class Toolbar : UnityEditor.UIElements.Toolbar
    {
        protected readonly UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher m_CommandDispatcher;
        protected readonly UnityEditor.GraphToolsFoundation.Overdrive.GraphView m_GraphView;
        public static readonly string ussClassName;
        public Toolbar(UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView) {}
    }

    [System.Runtime.CompilerServices.Extension] public static class ToolbarExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static void ChangeClickEvent(UnityEditor.UIElements.ToolbarButton button, System.Action newClickEvent);
        [System.Runtime.CompilerServices.Extension] public static void CreateOrUpdateItem(UnityEditor.UIElements.ToolbarBreadcrumbs breadcrumbs, int index, string itemLabel, System.Action<int> clickedEvent);
        [System.Runtime.CompilerServices.Extension] public static void TrimItems(UnityEditor.UIElements.ToolbarBreadcrumbs breadcrumbs, int countToKeep);
    }

    public class ToolbarProvider : UnityEditor.GraphToolsFoundation.Overdrive.IToolbarProvider
    {
        public ToolbarProvider() {}
        public virtual bool ShowButton(string buttonName);
    }

    [System.AttributeUsage(4, AllowMultiple = true)] public sealed class ToolShortcutEventAttribute : System.Attribute
    {
        public ToolShortcutEventAttribute(string toolName, string id, bool isClutch = False) {}
        public ToolShortcutEventAttribute(string toolName, string id, UnityEditor.ShortcutManagement.ShortcutBinding defaultBinding, bool isClutch = False, UnityEngine.RuntimePlatform[] onlyOnPlatforms = default(UnityEngine.RuntimePlatform[]), UnityEngine.RuntimePlatform[] excludedPlatforms = default(UnityEngine.RuntimePlatform[])) {}
        public ToolShortcutEventAttribute(string toolName, string id, UnityEngine.KeyCode defaultKeyCode, UnityEditor.ShortcutManagement.ShortcutModifiers defaultShortcutModifiers = 0, bool isClutch = False, UnityEngine.RuntimePlatform[] onlyOnPlatforms = default(UnityEngine.RuntimePlatform[]), UnityEngine.RuntimePlatform[] excludedPlatforms = default(UnityEngine.RuntimePlatform[])) {}
    }

    public class TracingControlStateComponent : UnityEngine.GraphToolsFoundation.CommandStateObserver.AssetViewStateComponent<UnityEditor.GraphToolsFoundation.Overdrive.TracingControlStateComponent.StateUpdater>
    {
        public int CurrentTracingFrame { get; }
        public int CurrentTracingStep { get; }
        public int CurrentTracingTarget { get; }
        public TracingControlStateComponent() {}
        protected virtual void Dispose(bool disposing);
        public class StateUpdater : UnityEngine.GraphToolsFoundation.CommandStateObserver.StateComponent<UnityEditor.GraphToolsFoundation.Overdrive.TracingControlStateComponent.StateUpdater, UnityEditor.GraphToolsFoundation.Overdrive.TracingControlStateComponent>
        {
            public int CurrentTracingFrame { get; set; }
            public int CurrentTracingStep { get; set; }
            public int CurrentTracingTarget { set; }
            public StateUpdater() {}
        }
    }

    public class TracingDataStateComponent : UnityEngine.GraphToolsFoundation.CommandStateObserver.AssetViewStateComponent<UnityEditor.GraphToolsFoundation.Overdrive.TracingDataStateComponent.StateUpdater>
    {
        public System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.TracingStep> DebuggingData { get; }
        public int MaxTracingStep { get; }
        public TracingDataStateComponent() {}
        protected virtual void Dispose(bool disposing);
        public class StateUpdater : UnityEngine.GraphToolsFoundation.CommandStateObserver.StateComponent<UnityEditor.GraphToolsFoundation.Overdrive.TracingDataStateComponent.StateUpdater, UnityEditor.GraphToolsFoundation.Overdrive.TracingDataStateComponent>
        {
            public System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.TracingStep> DebuggingData { set; }
            public int MaxTracingStep { set; }
            public StateUpdater() {}
        }
    }

    public class TracingStatusStateComponent : UnityEngine.GraphToolsFoundation.CommandStateObserver.AssetViewStateComponent<UnityEditor.GraphToolsFoundation.Overdrive.TracingStatusStateComponent.StateUpdater>
    {
        public bool TracingEnabled { get; }
        public TracingStatusStateComponent() {}
        protected virtual void Dispose(bool disposing);
        public class StateUpdater : UnityEngine.GraphToolsFoundation.CommandStateObserver.StateComponent<UnityEditor.GraphToolsFoundation.Overdrive.TracingStatusStateComponent.StateUpdater, UnityEditor.GraphToolsFoundation.Overdrive.TracingStatusStateComponent>
        {
            public bool TracingEnabled { set; }
            public StateUpdater() {}
        }
    }

    public struct TracingStep
    {
        public string ErrorMessage;
        public UnityEditor.GraphToolsFoundation.Overdrive.INodeModel NodeModel;
        public UnityEditor.GraphToolsFoundation.Overdrive.IPortModel PortModel;
        public byte Progress;
        public UnityEditor.GraphToolsFoundation.Overdrive.TracingStepType Type;
        public string ValueString;
        public static UnityEditor.GraphToolsFoundation.Overdrive.TracingStep Error(UnityEditor.GraphToolsFoundation.Overdrive.INodeModel nodeModel, string error);
        public static UnityEditor.GraphToolsFoundation.Overdrive.TracingStep ExecutedNode(UnityEditor.GraphToolsFoundation.Overdrive.INodeModel nodeModel1, byte progress);
        public static UnityEditor.GraphToolsFoundation.Overdrive.TracingStep ReadValue(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel, string valueString);
        public static UnityEditor.GraphToolsFoundation.Overdrive.TracingStep TriggeredPort(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel);
        public static UnityEditor.GraphToolsFoundation.Overdrive.TracingStep WrittenValue(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel, string valueString);
    }

    public enum TracingStepType
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.TracingStepType Error = 5;
        public const UnityEditor.GraphToolsFoundation.Overdrive.TracingStepType ExecutedNode = 1;
        public const UnityEditor.GraphToolsFoundation.Overdrive.TracingStepType None = 0;
        public const UnityEditor.GraphToolsFoundation.Overdrive.TracingStepType ReadValue = 4;
        public const UnityEditor.GraphToolsFoundation.Overdrive.TracingStepType TriggeredPort = 2;
        public byte value__;
        public const UnityEditor.GraphToolsFoundation.Overdrive.TracingStepType WrittenValue = 3;
    }

    public class TypeSearcherAdapter : UnityEditor.GraphToolsFoundation.Overdrive.SimpleSearcherAdapter
    {
        public TypeSearcherAdapter(string title) {}
    }

    [JetBrains.Annotations.PublicAPI] public class TypeSearcherDatabase
    {
        public TypeSearcherDatabase() {}
        public static UnityEditor.Searcher.SearcherDatabase FromItems(System.Collections.Generic.IEnumerable<UnityEditor.Searcher.SearcherItem> items);
        public static UnityEditor.Searcher.SearcherDatabase FromTypes(UnityEditor.GraphToolsFoundation.Overdrive.Stencil stencil, System.Collections.Generic.IEnumerable<System.Type> types);
    }

    public sealed class TypeSearcherItem : UnityEditor.Searcher.SearcherItem, UnityEditor.GraphToolsFoundation.Overdrive.ISearcherItemDataProvider
    {
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.ISearcherItemData Data { get; }
        public UnityEngine.GraphToolsFoundation.Overdrive.TypeHandle Type { get; }
        public TypeSearcherItem(UnityEngine.GraphToolsFoundation.Overdrive.TypeHandle type, string name, System.Collections.Generic.List<UnityEditor.Searcher.SearcherItem> children = default(System.Collections.Generic.List<UnityEditor.Searcher.SearcherItem>)) {}
    }

    [System.Runtime.CompilerServices.IsReadOnly] public struct TypeSearcherItemData : UnityEditor.GraphToolsFoundation.Overdrive.ISearcherItemData
    {
        public UnityEngine.GraphToolsFoundation.Overdrive.TypeHandle Type { get; }
        public TypeSearcherItemData(UnityEngine.GraphToolsFoundation.Overdrive.TypeHandle type) {}
    }

    public class UIDependencies
    {
        public UIDependencies(UnityEditor.GraphToolsFoundation.Overdrive.IModelUI owner) {}
        public void AddBackwardDependency(UnityEditor.GraphToolsFoundation.Overdrive.IModelUI dependency, UnityEditor.GraphToolsFoundation.Overdrive.DependencyType dependencyType);
        public void AddForwardDependency(UnityEditor.GraphToolsFoundation.Overdrive.IModelUI dependency, UnityEditor.GraphToolsFoundation.Overdrive.DependencyType dependencyType);
        public void AddModelDependency(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model);
        public void ClearDependencyLists();
        public void OnCustomStyleResolved(UnityEngine.UIElements.CustomStyleResolvedEvent evt);
        public void OnDetachedFromPanel(UnityEngine.UIElements.DetachFromPanelEvent evt);
        public void OnGeometryChanged(UnityEngine.UIElements.GeometryChangedEvent evt);
        public void UpdateDependencyLists();
    }

    [System.Runtime.CompilerServices.Extension] public static class UIForModel
    {
        public static void AddOrReplaceGraphElement(UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI);
        [System.Runtime.CompilerServices.Extension] public static System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IModelUI> GetAllUIs(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView);
        [JetBrains.Annotations.CanBeNull] [System.Runtime.CompilerServices.Extension] public static T GetUI<T>(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView, string context = default(string)) where T : class, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI;
        public static void RemoveGraphElement(UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI);
    }

    public class UpdateConstantNodeValueCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.IConstant Constant;
        public UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel OwnerModel;
        public object Value;
        public UpdateConstantNodeValueCommand() {}
        public UpdateConstantNodeValueCommand(UnityEditor.GraphToolsFoundation.Overdrive.IConstant constant, object value, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel owner) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.UpdateConstantNodeValueCommand command);
    }

    public class UpdateExposedCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public bool Exposed;
        public UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel VariableDeclarationModel;
        public UpdateExposedCommand() {}
        public UpdateExposedCommand(UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel variableDeclarationModel, bool exposed) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.UpdateExposedCommand command);
    }

    public class UpdateModelPropertyValueCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel GraphElementModel;
        public object NewValue;
        public string Path;
        public UpdateModelPropertyValueCommand() {}
        public UpdateModelPropertyValueCommand(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel graphElementModel, Unity.Properties.PropertyPath path, object newValue) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.UpdateModelPropertyValueCommand command);
    }

    public class UpdatePortConstantCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public object NewValue;
        public UnityEditor.GraphToolsFoundation.Overdrive.IPortModel PortModel;
        public UpdatePortConstantCommand() {}
        public UpdatePortConstantCommand(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel, object newValue) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.UpdatePortConstantCommand command);
    }

    public class UpdateStickyNoteCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public readonly string Contents;
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.IStickyNoteModel StickyNoteModel;
        public readonly string Title;
        public UpdateStickyNoteCommand() {}
        public UpdateStickyNoteCommand(UnityEditor.GraphToolsFoundation.Overdrive.IStickyNoteModel stickyNoteModel, string title, string contents) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.UpdateStickyNoteCommand command);
    }

    public class UpdateStickyNoteTextSizeCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.IStickyNoteModel, string>
    {
        public UpdateStickyNoteTextSizeCommand() {}
        public UpdateStickyNoteTextSizeCommand(UnityEditor.GraphToolsFoundation.Overdrive.IStickyNoteModel[] stickyNoteModels, string textSize) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.UpdateStickyNoteTextSizeCommand command);
    }

    public class UpdateStickyNoteThemeCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.IStickyNoteModel, string>
    {
        public UpdateStickyNoteThemeCommand() {}
        public UpdateStickyNoteThemeCommand(UnityEditor.GraphToolsFoundation.Overdrive.IStickyNoteModel[] stickyNoteModels, string theme) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.UpdateStickyNoteThemeCommand command);
    }

    public class UpdateTooltipCommand : UnityEngine.GraphToolsFoundation.CommandStateObserver.UndoableCommand
    {
        public string Tooltip;
        public UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel VariableDeclarationModel;
        public UpdateTooltipCommand() {}
        public UpdateTooltipCommand(UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel variableDeclarationModel, string tooltip) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.UpdateTooltipCommand command);
    }

    public class ValueBadge : UnityEditor.GraphToolsFoundation.Overdrive.Badge
    {
        public static readonly string ussClassName;
        public ValueBadge() {}
        protected virtual void Attach();
        protected virtual void BuildElementUI();
        protected virtual void PostBuildUI();
        protected virtual void UpdateElementFromModel();
    }

    public class VerticalPortContainerPart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        protected UnityEditor.GraphToolsFoundation.Overdrive.PortContainer m_PortContainer;
        public static readonly string portsUssName;
        public static readonly string ussClassName;
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected VerticalPortContainerPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.Direction portDirection, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerUI, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement container);
        public static UnityEditor.GraphToolsFoundation.Overdrive.VerticalPortContainerPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.Direction portDirection, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerUI, string parentClassName);
        protected virtual void PostBuildPartUI();
        protected virtual void UpdatePartFromModel();
    }

    [System.Runtime.CompilerServices.Extension] public static class VisualElementExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.Rect GetRect(UnityEngine.UIElements.VisualElement ve);
        [System.Runtime.CompilerServices.Extension] public static T MandatoryQ<T>(UnityEngine.UIElements.VisualElement e, string name = default(string), string className = default(string)) where T : UnityEngine.UIElements.VisualElement;
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.UIElements.VisualElement MandatoryQ(UnityEngine.UIElements.VisualElement e, string name = default(string), string className = default(string));
        [System.Runtime.CompilerServices.Extension] public static void PrefixEnableInClassList(UnityEngine.UIElements.VisualElement ve, string classNamePrefix, string classNameSuffix);
        [System.Runtime.CompilerServices.Extension] public static void ReplaceManipulator<T>(UnityEngine.UIElements.VisualElement ve, ref T manipulator, T newManipulator) where T : UnityEngine.UIElements.Manipulator;
        [System.Runtime.CompilerServices.Extension] public static T SafeQ<T>(UnityEngine.UIElements.VisualElement e, string name = default(string), string className = default(string)) where T : UnityEngine.UIElements.VisualElement;
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.UIElements.VisualElement SafeQ(UnityEngine.UIElements.VisualElement e, string name = default(string), string className = default(string));
    }

    public class WindowAssetModificationWatcher : UnityEditor.AssetModificationProcessor
    {
        public WindowAssetModificationWatcher() {}
    }

    public class WindowStateComponent : UnityEngine.GraphToolsFoundation.CommandStateObserver.ViewStateComponent<UnityEditor.GraphToolsFoundation.Overdrive.WindowStateComponent.StateUpdater>
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel AssetModel { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.IBlackboardGraphModel BlackboardGraphModel { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.OpenedGraph CurrentGraph { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel GraphModel { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.OpenedGraph LastOpenedGraph { get; }
        public System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.OpenedGraph> SubGraphStack { get; }
        public WindowStateComponent() {}
        protected virtual void Dispose(bool disposing);
        public virtual void ValidateAfterDeserialize();
        public class StateUpdater : UnityEngine.GraphToolsFoundation.CommandStateObserver.StateComponent<UnityEditor.GraphToolsFoundation.Overdrive.WindowStateComponent.StateUpdater, UnityEditor.GraphToolsFoundation.Overdrive.WindowStateComponent>
        {
            public StateUpdater() {}
            public void AssetChangedOnDisk();
            public void ClearHistory();
            public void LoadGraphAsset(UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel assetModel, UnityEngine.GameObject boundObject);
            public void PushCurrentGraph();
            public void TruncateHistory(int length);
        }
    }
}

namespace UnityEditor.GraphToolsFoundation.Overdrive.BasicModel
{
    public class GraphTemplate<TStencil> : UnityEditor.GraphToolsFoundation.Overdrive.IGraphTemplate where TStencil : UnityEditor.GraphToolsFoundation.Overdrive.Stencil
    {
        public virtual string DefaultAssetName { get; }
        public virtual string GraphTypeName { get; }
        public virtual System.Type StencilType { get; }
        public GraphTemplate(string graphName = Graph) {}
        public virtual void InitBasicGraph(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
    }
}

namespace UnityEditor.GraphToolsFoundation.Overdrive.Plugins.Debugging
{
    public class DebugDataObserver : UnityEngine.GraphToolsFoundation.CommandStateObserver.StateObserver<UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState>
    {
        public DebugDataObserver(UnityEditor.GraphToolsFoundation.Overdrive.Plugins.Debugging.DebugInstrumentationHandler handler) {}
        protected virtual void Observe(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState state);
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(false, @"UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting.Plugins", , )] public class DebuggingErrorBadgeModel : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.ErrorBadgeModel
    {
        public DebuggingErrorBadgeModel(UnityEditor.GraphToolsFoundation.Overdrive.TracingStep step) {}
    }

    [System.Runtime.CompilerServices.Extension] [UnityEditor.GraphToolsFoundation.Overdrive.GraphElementsExtensionMethodsCache(1)] public static class DebuggingFactoryExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IModelUI CreateGraphProcessingErrorBadgeModelUI(UnityEditor.GraphToolsFoundation.Overdrive.ElementBuilder elementBuilder, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingErrorBadgeModel model);
    }

    public class DebuggingPort : UnityEditor.GraphToolsFoundation.Overdrive.Port
    {
        public static readonly string portExecutionActiveModifierUssClassName;
        public bool ExecutionPortActive { set; }
        public DebuggingPort() {}
        public virtual bool CanAcceptSelectionDrop(System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> dragSelection);
        protected virtual void PostBuildUI();
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(false, @"UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting.Plugins", , )] public class DebuggingValueBadgeModel : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.ValueBadgeModel
    {
        public DebuggingValueBadgeModel(UnityEditor.GraphToolsFoundation.Overdrive.TracingStep step) {}
    }

    public class DebugInstrumentationHandler : UnityEditor.GraphToolsFoundation.Overdrive.IPluginHandler
    {
        public DebugInstrumentationHandler() {}
        public virtual void OptionsMenu(UnityEditor.GenericMenu menu);
        public virtual void Register(UnityEditor.GraphToolsFoundation.Overdrive.GraphViewEditorWindow window);
        public virtual void Unregister();
    }

    [System.Runtime.CompilerServices.Extension] [UnityEditor.GraphToolsFoundation.Overdrive.GraphElementsExtensionMethodsCache(0)] public static class GraphElementFactoryExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IModelUI CreatePort(UnityEditor.GraphToolsFoundation.Overdrive.ElementBuilder elementBuilder, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.PortModel model);
    }
}

namespace UnityEngine.GraphToolsFoundation.Overdrive
{
    [JetBrains.Annotations.PublicAPI] [System.Flags] public enum GraphProcessingOptions
    {
        public const UnityEngine.GraphToolsFoundation.Overdrive.GraphProcessingOptions Default = 0;
        public const UnityEngine.GraphToolsFoundation.Overdrive.GraphProcessingOptions ImplementationOnly = 8;
        public const UnityEngine.GraphToolsFoundation.Overdrive.GraphProcessingOptions LiveEditing = 4;
        public const UnityEngine.GraphToolsFoundation.Overdrive.GraphProcessingOptions Profiling = 2;
        public const UnityEngine.GraphToolsFoundation.Overdrive.GraphProcessingOptions Tracing = 1;
        public int value__;
    }

    public interface IGraphProcessor
    {
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingResult ProcessGraph(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
    }

    public class NoOpGraphProcessor : UnityEngine.GraphToolsFoundation.Overdrive.IGraphProcessor
    {
        public NoOpGraphProcessor() {}
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingResult ProcessGraph(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
    }
}
