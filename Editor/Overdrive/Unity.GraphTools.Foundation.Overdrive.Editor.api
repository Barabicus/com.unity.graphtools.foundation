// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace UnityEditor.GraphToolsFoundation.Overdrive
{
    public class AddControlPointOnEdgeCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public readonly int AtIndex;
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.IEditableEdge EdgeModel;
        public readonly UnityEngine.Vector2 Position;
        public AddControlPointOnEdgeCommand() {}
        public AddControlPointOnEdgeCommand(UnityEditor.GraphToolsFoundation.Overdrive.IEditableEdge edgeModel, int atIndex, UnityEngine.Vector2 position) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.AddControlPointOnEdgeCommand command);
    }

    public class AlignNodesCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public readonly bool Follow;
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.GraphView GraphView;
        public AlignNodesCommand() {}
        public AlignNodesCommand(UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView, bool follow) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.AlignNodesCommand command);
    }

    public class AssemblyCache
    {
        public AssemblyCache() {}
    }

    [System.Runtime.CompilerServices.Extension] public static class AssemblyExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static System.Collections.Generic.IEnumerable<System.Type> GetTypesSafe(System.Reflection.Assembly assembly);
    }

    public static class AssetActionHelper
    {
        public static void InitTemplate(UnityEditor.GraphToolsFoundation.Overdrive.IGraphTemplate template, UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
    }

    public static class AssetHelper
    {
        public const string AssetPath = Packages/com.unity.graphtools.foundation/Editor/Overdrive/;
        public const string VSTemplatePath = Packages/com.unity.graphtools.foundation/Editor/Overdrive/VisualScripting/Editor/Elements/Templates/;
    }

    public class AssetModificationWatcher : UnityEditor.AssetModificationProcessor
    {
        public static int Version;
        public AssetModificationWatcher() {}
    }

    public abstract class AssetViewStateComponent : UnityEditor.GraphToolsFoundation.Overdrive.EditorStateComponent
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID ViewGUID { get; set; }
        protected AssetViewStateComponent() {}
    }

    [UnityEditor.InitializeOnLoad] public class AssetWatcher : UnityEditor.AssetPostprocessor
    {
        public static bool disabled;
        public static int Version;
        public static UnityEditor.GraphToolsFoundation.Overdrive.AssetWatcher Instance { get; }
        public AssetWatcher() {}
        public static bool AssetAtPathIsGraphAsset(string path);
        public void UnwatchGraphAssetAtPath(string path);
        public class Scope : System.IDisposable
        {
            public Scope() {}
            public virtual void Dispose();
        }
    }

    public class Attacher
    {
        public UnityEngine.SpriteAlignment Alignment { get; set; }
        public float Distance { get; set; }
        public UnityEngine.UIElements.VisualElement Element { get; }
        public UnityEngine.Vector2 Offset { get; set; }
        public UnityEngine.UIElements.VisualElement Target { get; }
        public Attacher(UnityEngine.UIElements.VisualElement anchored, UnityEngine.UIElements.VisualElement target, UnityEngine.SpriteAlignment alignment) {}
        public void Detach();
        public void Reattach();
    }

    public class AutoPlaceElementsCommand : UnityEditor.GraphToolsFoundation.Overdrive.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.IMovable>
    {
        public System.Collections.Generic.IReadOnlyList<UnityEngine.Vector2> Deltas;
        public AutoPlaceElementsCommand() {}
        public AutoPlaceElementsCommand(System.Collections.Generic.IReadOnlyList<UnityEngine.Vector2> delta, System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IMovable> models) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.AutoPlaceElementsCommand command);
    }

    public abstract class Badge : UnityEditor.GraphToolsFoundation.Overdrive.GraphElement
    {
        protected UnityEngine.UIElements.VisualElement m_Target;
        protected UnityEngine.SpriteAlignment Alignment { get; }
        protected UnityEditor.GraphToolsFoundation.Overdrive.Attacher Attacher { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.IBadgeModel BadgeModel { get; }
        protected Badge() {}
        protected virtual void Attach();
        protected void AttachTo(UnityEngine.UIElements.VisualElement target, UnityEngine.SpriteAlignment alignment);
        protected virtual void Detach();
    }

    [System.Obsolete(@"2021-01-05 BaseAction was renamed to Command (UnityUpgradable) -> Command")] public abstract class BaseAction
    {
        protected BaseAction() {}
    }

    public abstract class BaseModelUIPart : UnityEditor.GraphToolsFoundation.Overdrive.IModelUIPart
    {
        protected UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel m_Model;
        protected UnityEditor.GraphToolsFoundation.Overdrive.IModelUI m_OwnerElement;
        protected string m_ParentClassName;
        public UnityEditor.GraphToolsFoundation.Overdrive.ModelUIPartList PartList { get; }
        public virtual string PartName { get; }
        public abstract UnityEngine.UIElements.VisualElement Root { get; }
        protected BaseModelUIPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected abstract void BuildPartUI(UnityEngine.UIElements.VisualElement parent);
        public virtual void BuildUI(UnityEngine.UIElements.VisualElement parent);
        public virtual void OwnerAddedToView();
        public virtual void OwnerRemovedFromView();
        protected virtual void PartOwnerAddedToView();
        protected virtual void PartOwnerRemovedFromView();
        protected virtual void PostBuildPartUI();
        public virtual void PostBuildUI();
        public virtual void UpdateFromModel();
        protected abstract void UpdatePartFromModel();
    }

    public class Blackboard : UnityEditor.GraphToolsFoundation.Overdrive.GraphElement, UnityEditor.GraphToolsFoundation.Overdrive.ISelection
    {
        public static readonly string blackboardContentPartName;
        public static readonly string blackboardHeaderPartName;
        protected UnityEngine.UIElements.VisualElement m_ContentContainer;
        protected UnityEditor.GraphToolsFoundation.Overdrive.Dragger m_Dragger;
        protected UnityEngine.UIElements.ScrollView m_ScrollView;
        public static readonly string persistenceKey;
        public static readonly string ussClassName;
        public static readonly string windowedModifierUssClassName;
        public virtual UnityEngine.UIElements.VisualElement contentContainer { get; }
        protected UnityEditor.GraphToolsFoundation.Overdrive.Dragger Dragger { get; set; }
        public System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.IHighlightable> Highlightables { get; }
        public virtual System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.ISelectableGraphElement> Selection { get; }
        public bool Windowed { set; }
        public Blackboard() {}
        public virtual void AddToSelection(UnityEditor.GraphToolsFoundation.Overdrive.ISelectableGraphElement selectable);
        protected virtual void BuildContextualMenu(UnityEngine.UIElements.ContextualMenuPopulateEvent evt);
        protected virtual void BuildElementUI();
        protected virtual void BuildPartList();
        public virtual void ClearSelection();
        public virtual bool IsMovable();
        public virtual bool IsResizable();
        protected virtual void PostBuildUI();
        public virtual void RemoveFromSelection(UnityEditor.GraphToolsFoundation.Overdrive.ISelectableGraphElement selectable);
    }

    public class BlackboardDragAndDropHandler : UnityEditor.GraphToolsFoundation.Overdrive.DragAndDropHandler
    {
        protected UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher Dispatcher { get; }
        protected UnityEditor.GraphToolsFoundation.Overdrive.ISelection Selection { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.Stencil Stencil { get; }
        public BlackboardDragAndDropHandler(UnityEditor.GraphToolsFoundation.Overdrive.Blackboard blackboard) {}
        public BlackboardDragAndDropHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView) {}
        [JetBrains.Annotations.PublicAPI] public BlackboardDragAndDropHandler(UnityEditor.GraphToolsFoundation.Overdrive.ISelection selection, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher dispatcher) {}
        public virtual void OnDragPerform(UnityEngine.UIElements.DragPerformEvent e);
        public virtual void OnDragUpdated(UnityEngine.UIElements.DragUpdatedEvent e);
    }

    public class BlackboardField : UnityEditor.GraphToolsFoundation.Overdrive.GraphElement, UnityEditor.GraphToolsFoundation.Overdrive.IHighlightable
    {
        public static readonly string capsuleUssClassName;
        public static readonly string highlightedModifierUssClassName;
        public static readonly string iconExposedModifierUssClassName;
        public static readonly string iconUssClassName;
        public static readonly string nameLabelUssClassName;
        public static readonly string readOnlyModifierUssClassName;
        public static readonly string selectionBorderElementName;
        public static readonly string typeLabelUssClassName;
        public static readonly string ussClassName;
        public static readonly string writeOnlyModifierUssClassName;
        public virtual bool Highlighted { get; set; }
        public UnityEditor.GraphToolsFoundation.Overdrive.EditableLabel NameLabel { get; }
        protected UnityEditor.GraphToolsFoundation.Overdrive.SelectionDropper SelectionDropper { get; set; }
        public BlackboardField() {}
        protected virtual void BuildElementUI();
        protected virtual void PostBuildUI();
        public virtual bool ShouldHighlightItemUsage(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel elementModel);
        protected virtual void UpdateElementFromModel();
    }

    public class BlackboardHeaderPart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        protected static readonly string defaultSubTitle;
        protected static readonly string defaultTitle;
        public static readonly string subTitleUssClassName;
        public static readonly string titleUssClassName;
        public static readonly string ussClassName;
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected BlackboardHeaderPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement parent);
        public static UnityEditor.GraphToolsFoundation.Overdrive.BlackboardHeaderPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName);
        protected virtual void UpdatePartFromModel();
    }

    public class BlackboardRow : UnityEditor.GraphToolsFoundation.Overdrive.GraphElement
    {
        public static readonly string collapseButtonUssClassName;
        public static readonly string expandedModifierUssClassName;
        public static readonly string headerContainerUssClassName;
        public static readonly string headerUssClassName;
        protected UnityEditor.GraphToolsFoundation.Overdrive.CollapseButton m_CollapseButton;
        protected UnityEngine.UIElements.VisualElement m_HeaderContainer;
        protected UnityEngine.UIElements.VisualElement m_PropertyViewContainer;
        public static readonly string propertyViewUssClassName;
        public static readonly string rowFieldPartName;
        public static readonly string rowPropertiesPartName;
        public static readonly string ussClassName;
        public UnityEngine.UIElements.VisualElement FieldSlot { get; }
        public UnityEngine.UIElements.VisualElement PropertiesSlot { get; }
        public BlackboardRow() {}
        protected virtual void BuildElementUI();
        protected virtual void BuildPartList();
        protected virtual void PostBuildUI();
        protected virtual void UpdateElementFromModel();
    }

    public class BlackboardSection : UnityEngine.UIElements.VisualElement
    {
        public static readonly string addButtonUssClassName;
        public static readonly string dragIndicatorUssClassName;
        public static readonly string headerUssClassName;
        public static readonly string rowsUssClassName;
        public static readonly string titleLabelUssClassName;
        public static readonly string ussClassName;
        public virtual UnityEngine.UIElements.VisualElement contentContainer { get; }
        public BlackboardSection(UnityEditor.GraphToolsFoundation.Overdrive.Blackboard blackboard, string name) {}
    }

    public class BlackboardSectionListPart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        public static readonly string ussClassName;
        public UnityEditor.GraphToolsFoundation.Overdrive.Blackboard Blackboard { get; }
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected BlackboardSectionListPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement parent);
        public static UnityEditor.GraphToolsFoundation.Overdrive.BlackboardSectionListPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName);
        protected virtual void PartOwnerAddedToView();
        protected virtual void PartOwnerRemovedFromView();
        protected virtual void UpdatePartFromModel();
    }

    public class BlackboardVariablePart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        public static readonly string blackboardVariablePartCreationContext;
        public static readonly string ussClassName;
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected BlackboardVariablePart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement parent);
        public static UnityEditor.GraphToolsFoundation.Overdrive.BlackboardVariablePart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName);
        protected virtual void PartOwnerAddedToView();
        protected virtual void PartOwnerRemovedFromView();
        protected virtual void UpdatePartFromModel();
    }

    public class BlackboardVariablePropertiesPart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        public static readonly string blackboardVariablePropertiesPartCreationContext;
        public static readonly string ussClassName;
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected BlackboardVariablePropertiesPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement parent);
        public static UnityEditor.GraphToolsFoundation.Overdrive.BlackboardVariablePropertiesPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName);
        protected virtual void PartOwnerAddedToView();
        protected virtual void PartOwnerRemovedFromView();
        protected virtual void UpdatePartFromModel();
    }

    public class BlackboardVariablePropertyView : UnityEditor.GraphToolsFoundation.Overdrive.GraphElement
    {
        protected UnityEngine.UIElements.Toggle m_ExposedToggle;
        protected UnityEngine.UIElements.TextField m_TooltipTextField;
        protected UnityEngine.UIElements.Button m_TypeSelectorButton;
        public static readonly string rowControlUssClassName;
        public static readonly string rowExposedUssClassName;
        public static readonly string rowInitValueUssClassName;
        public static readonly string rowLabelUssClassName;
        public static readonly string rowTooltipUssClassName;
        public static readonly string rowTypeSelectorUssClassName;
        public static readonly string rowUssClassName;
        public static readonly string ussClassName;
        public BlackboardVariablePropertyView() {}
        protected void AddExposedToggle();
        protected void AddInitializationField();
        protected void AddRow(string labelText, UnityEngine.UIElements.VisualElement control, string ussClassName);
        protected void AddTooltipField();
        protected void AddTypeSelector();
        protected virtual void BuildElementUI();
        protected virtual void BuildRows();
        protected void InsertRow(int index, string labelText, UnityEngine.UIElements.VisualElement control, string ussClassName);
        protected virtual void PostBuildUI();
        protected virtual void UpdateElementFromModel();
    }

    public class BlackboardViewStateComponent : UnityEditor.GraphToolsFoundation.Overdrive.EditorStateComponent
    {
        public BlackboardViewStateComponent() {}
        public bool GetVariableDeclarationModelExpanded(UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel model);
        public void SetVariableDeclarationModelExpanded(UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel model, bool expanded);
    }

    public class BlankPage : UnityEngine.UIElements.VisualElement
    {
        public static readonly string ussClassName;
        public System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.OnboardingProvider> OnboardingProviders { get; protected set; }
        public BlankPage(UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.OnboardingProvider> onboardingProviders) {}
        public virtual void CreateUI();
        public virtual void UpdateUI();
    }

    public class BoolPref : UnityEditor.GraphToolsFoundation.Overdrive.Enumeration
    {
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.BoolPref AutoAlignDraggedEdges;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.BoolPref AutoProcess;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.BoolPref DependenciesLogging;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.BoolPref ErrorOnMultipleDispatchesPerFrame;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.BoolPref ErrorOnRecursiveDispatch;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.BoolPref FullUIRebuildOnChange;
        [JetBrains.Annotations.PublicAPI] protected static readonly int k_ToolBasePrefId;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.BoolPref LogAllDispatchedActions;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.BoolPref LogUIBuildTime;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.BoolPref LogUIUpdate;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.BoolPref SearcherInRegularWindow;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.BoolPref ShowUnusedNodes;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.BoolPref WarnOnUIFullRebuild;
        protected BoolPref(int id, string name, string[] obsoleteNames = default(string[])) {}
    }

    public class BuildAllEditorCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public BuildAllEditorCommand() {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.BuildAllEditorCommand command);
    }

    public class BypassNodesCommand : UnityEditor.GraphToolsFoundation.Overdrive.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel>
    {
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.IInOutPortsNode[] NodesToBypass;
        public BypassNodesCommand() {}
        public BypassNodesCommand(UnityEditor.GraphToolsFoundation.Overdrive.IInOutPortsNode[] nodesToBypass, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel[] elementsToRemove) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.BypassNodesCommand command);
    }

    [UnityEditor.InitializeOnLoad] public class Capabilities : UnityEditor.GraphToolsFoundation.Overdrive.Enumeration
    {
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.Capabilities Collapsible;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.Capabilities Copiable;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.Capabilities Deletable;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.Capabilities Droppable;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.Capabilities Movable;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.Capabilities NoCapabilities;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.Capabilities Renamable;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.Capabilities Resizable;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.Capabilities Selectable;
        protected Capabilities(string name, string prefix = ) {}
        public static UnityEditor.GraphToolsFoundation.Overdrive.Capabilities Get(int id);
        public static UnityEditor.GraphToolsFoundation.Overdrive.Capabilities Get(string fullname);
    }

    public class ChangeElementColorCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public readonly UnityEngine.Color Color;
        public readonly System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel> NodeModels;
        public readonly System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IPlacematModel> PlacematModels;
        public ChangeElementColorCommand() {}
        public ChangeElementColorCommand(UnityEngine.Color color, System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel> nodeModels, System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IPlacematModel> placematModels) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.ChangeElementColorCommand command);
    }

    public class ChangePlacematLayoutCommand : UnityEditor.GraphToolsFoundation.Overdrive.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.IPlacematModel, UnityEngine.Rect>
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.ResizeFlags ResizeFlags;
        public ChangePlacematLayoutCommand() {}
        public ChangePlacematLayoutCommand(UnityEngine.Rect position, UnityEditor.GraphToolsFoundation.Overdrive.ResizeFlags resizeWhat, params UnityEditor.GraphToolsFoundation.Overdrive.IPlacematModel[] placematModels) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.ChangePlacematLayoutCommand command);
    }

    public class ChangePlacematZOrdersCommand : UnityEditor.GraphToolsFoundation.Overdrive.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.IPlacematModel, int[]>
    {
        public ChangePlacematZOrdersCommand() {}
        public ChangePlacematZOrdersCommand(int[] zOrders, UnityEditor.GraphToolsFoundation.Overdrive.IPlacematModel[] placematModels) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.ChangePlacematZOrdersCommand command);
    }

    public class ChangeStickyNoteLayoutCommand : UnityEditor.GraphToolsFoundation.Overdrive.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.IStickyNoteModel, UnityEngine.Rect>
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.ResizeFlags ResizeWhat;
        public ChangeStickyNoteLayoutCommand() {}
        public ChangeStickyNoteLayoutCommand(UnityEditor.GraphToolsFoundation.Overdrive.IStickyNoteModel stickyNoteModel, UnityEngine.Rect position, UnityEditor.GraphToolsFoundation.Overdrive.ResizeFlags resizeWhat) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.ChangeStickyNoteLayoutCommand command);
    }

    public class ChangeVariableDeclarationCommand : UnityEditor.GraphToolsFoundation.Overdrive.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.IVariableNodeModel>
    {
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel Variable;
        public ChangeVariableDeclarationCommand() {}
        public ChangeVariableDeclarationCommand(System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IVariableNodeModel> models, UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel variable) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.ChangeVariableDeclarationCommand command);
    }

    public class ChangeVariableTypeCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle Handle;
        public UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel VariableDeclarationModel;
        public ChangeVariableTypeCommand() {}
        public ChangeVariableTypeCommand(UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel variableDeclarationModel, UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle handle) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.ChangeVariableTypeCommand command);
    }

    public class ClickSelector : UnityEngine.UIElements.MouseManipulator
    {
        public ClickSelector() {}
        protected void OnMouseDown(UnityEngine.UIElements.MouseDownEvent e);
        protected virtual void RegisterCallbacksOnTarget();
        protected virtual void UnregisterCallbacksFromTarget();
    }

    public class CollapseButton : UnityEngine.UIElements.VisualElement, UnityEngine.UIElements.INotifyValueChanged<bool>
    {
        public static readonly string collapsedUssClassName;
        public static readonly string iconElementName;
        public static readonly string iconElementUssClassName;
        public static readonly string ussClassName;
        protected UnityEngine.UIElements.Clickable Clickable { get; set; }
        public virtual bool value { get; set; }
        public CollapseButton() {}
        public virtual void SetValueWithoutNotify(bool newValue);
    }

    public class CollapseButtonPart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        protected UnityEditor.GraphToolsFoundation.Overdrive.CollapseButton CollapseButton { get; set; }
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected CollapseButtonPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement container);
        public static UnityEditor.GraphToolsFoundation.Overdrive.CollapseButtonPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI, string parentClassName);
        protected virtual void UpdatePartFromModel();
    }

    public class CollapsibleInOutNode : UnityEditor.GraphToolsFoundation.Overdrive.Node, UnityEditor.GraphToolsFoundation.Overdrive.ICustomSearcherHandler
    {
        public static readonly string collapseButtonPartName;
        public static readonly string collapsedUssClassName;
        public static readonly string titleIconContainerPartName;
        public System.Func<UnityEditor.GraphToolsFoundation.Overdrive.Node, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher, UnityEngine.Vector2, UnityEditor.GraphToolsFoundation.Overdrive.SearcherFilter, bool> CustomSearcherHandler { get; set; }
        public byte Progress { set; }
        public CollapsibleInOutNode() {}
        protected virtual void BuildPartList();
        public virtual bool HandleCustomSearcher(UnityEngine.Vector2 mousePosition, UnityEditor.GraphToolsFoundation.Overdrive.SearcherFilter filter = default(UnityEditor.GraphToolsFoundation.Overdrive.SearcherFilter));
        protected void OnCollapseChangeEvent(UnityEngine.UIElements.ChangeEvent<bool> evt);
        protected virtual void PostBuildUI();
        protected virtual void UpdateElementFromModel();
    }

    public abstract class Command
    {
        public string UndoString { get; set; }
        protected Command() {}
    }

    public sealed class CommandDispatcher : System.IDisposable
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState GraphToolState { get; }
        public CommandDispatcher(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState initialGraphToolState) {}
        public void BeginStateChange();
        public void BeginViewUpdate();
        public void Dispatch<TCommand>(TCommand command) where TCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command;
        public virtual void Dispose();
        public void EndStateChange();
        public System.UInt32 EndViewUpdate();
        protected virtual void Finalize();
        public void MarkStateDirty();
        public void RegisterCommandHandler<TState, TCommand>(UnityEditor.GraphToolsFoundation.Overdrive.CommandHandler<TState, TCommand> commandHandler) where TState : UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState where TCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command;
        public void RegisterCommandHandler<TCommand>(UnityEditor.GraphToolsFoundation.Overdrive.CommandHandler<UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState, TCommand> commandHandler) where TCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command;
        public void RegisterObserver(System.Action<UnityEditor.GraphToolsFoundation.Overdrive.Command> observer, bool asPostCommandObserver = False);
        public void UnregisterCommandHandler<TCommand>() where TCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command;
        public void UnregisterObserver(System.Action<UnityEditor.GraphToolsFoundation.Overdrive.Command> observer, bool asPostCommandObserver = False);
    }

    public static class CommandDispatcherHelper
    {
        public static void RegisterDefaultCommandHandlers(UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher);
    }

    public delegate void CommandHandler<TState, TCommand>(TState graphToolState, TCommand command) where TState : UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState where TCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command;

    public enum CommonSearcherTags
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.CommonSearcherTags StickyNote = 0;
        public int value__;
    }

    public class ConstantEditorBuilder : UnityEditor.GraphToolsFoundation.Overdrive.IConstantEditorBuilder
    {
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher CommandDispatcher { get; }
        public virtual bool ConstantIsLocked { get; }
        public virtual System.Action<UnityEngine.UIElements.IChangeEvent> OnValueChanged { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IPortModel PortModel { get; }
        public ConstantEditorBuilder(System.Action<UnityEngine.UIElements.IChangeEvent> onValueChanged, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, bool constantIsLocked, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel) {}
        public static bool FilterMethods(System.Reflection.MethodInfo x);
        public static System.Type KeySelector(System.Reflection.MethodInfo x);
    }

    [System.Runtime.CompilerServices.Extension] [UnityEditor.GraphToolsFoundation.Overdrive.GraphElementsExtensionMethodsCache(0)] public static class ConstantEditorExtensions
    {
        public static readonly string ussClassName;
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.UIElements.VisualElement BuildDefaultConstantEditor(UnityEditor.GraphToolsFoundation.Overdrive.IConstantEditorBuilder builder, UnityEditor.GraphToolsFoundation.Overdrive.IConstant constant);
        public static UnityEngine.UIElements.VisualElement BuildInlineValueEditor<T>(object oldValue, UnityEngine.UIElements.BaseField<T> field, System.Action<UnityEngine.UIElements.IChangeEvent> valueChangedCallback);
    }

    public class ConstantNodeEditorPart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        public static readonly string constantEditorElementUssClassName;
        public static readonly string labelUssName;
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected ConstantNodeEditorPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement container);
        public static UnityEditor.GraphToolsFoundation.Overdrive.ConstantNodeEditorPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI, string parentClassName);
        protected virtual void UpdatePartFromModel();
    }

    public class ContentDragger : UnityEngine.UIElements.MouseManipulator
    {
        public bool clampToParentEdges { get; set; }
        public UnityEngine.Vector2 panSpeed { get; set; }
        public ContentDragger() {}
        protected UnityEngine.Rect CalculatePosition(float x, float y, float width, float height);
        protected void OnMouseDown(UnityEngine.UIElements.MouseDownEvent e);
        protected void OnMouseMove(UnityEngine.UIElements.MouseMoveEvent e);
        protected void OnMouseUp(UnityEngine.UIElements.MouseUpEvent e);
        protected virtual void RegisterCallbacksOnTarget();
        protected virtual void UnregisterCallbacksFromTarget();
    }

    public class ContentZoomer : UnityEngine.UIElements.Manipulator
    {
        public static readonly float DefaultMaxScale;
        public static readonly float DefaultMinScale;
        public static readonly float DefaultReferenceScale;
        public static readonly float DefaultScaleStep;
        [System.Obsolete(@"ContentZoomer.keepPixelCacheOnZoom is deprecated and has no effect")] public bool keepPixelCacheOnZoom { get; set; }
        public float maxScale { get; set; }
        public float minScale { get; set; }
        public float referenceScale { get; set; }
        public float scaleStep { get; set; }
        public ContentZoomer() {}
        protected virtual void RegisterCallbacksOnTarget();
        protected virtual void UnregisterCallbacksFromTarget();
    }

    public class ConvertConstantNodesToVariableNodesCommand : UnityEditor.GraphToolsFoundation.Overdrive.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.IConstantNodeModel>
    {
        public ConvertConstantNodesToVariableNodesCommand() {}
        public ConvertConstantNodesToVariableNodesCommand(params UnityEditor.GraphToolsFoundation.Overdrive.IConstantNodeModel[] constantModels) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.ConvertConstantNodesToVariableNodesCommand command);
    }

    public class ConvertEdgesToPortalsCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        [System.Runtime.CompilerServices.TupleElementNames(Mono.Cecil.CustomAttributeArgument[])] public System.ValueTuple<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel, UnityEngine.Vector2, UnityEngine.Vector2>[] EdgeData;
        public ConvertEdgesToPortalsCommand() {}
        public ConvertEdgesToPortalsCommand(System.Collections.Generic.IReadOnlyList<System.ValueTuple<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel, UnityEngine.Vector2, UnityEngine.Vector2>> edgeData) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.ConvertEdgesToPortalsCommand command);
    }

    public class ConvertVariableNodesToConstantNodesCommand : UnityEditor.GraphToolsFoundation.Overdrive.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.IVariableNodeModel>
    {
        public ConvertVariableNodesToConstantNodesCommand() {}
        public ConvertVariableNodesToConstantNodesCommand(params UnityEditor.GraphToolsFoundation.Overdrive.IVariableNodeModel[] variableModels) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.ConvertVariableNodesToConstantNodesCommand command);
    }

    public class CopyPasteData
    {
        public System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> edges;
        public System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel> nodes;
        public System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.PlacematModel> placemats;
        public static UnityEditor.GraphToolsFoundation.Overdrive.CopyPasteData s_LastCopiedData;
        public System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.StickyNoteModel> stickyNotes;
        public UnityEngine.Vector2 topLeftNodePosition;
        public System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.VariableDeclarationModel> variableDeclarations;
        public CopyPasteData() {}
        public bool IsEmpty();
        public string ToJson();
    }

    public class CreateEdgeCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public bool CreateItemizedNode;
        public System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> EdgeModelsToDelete;
        public UnityEditor.GraphToolsFoundation.Overdrive.IPortModel FromPortModel;
        public UnityEditor.GraphToolsFoundation.Overdrive.Direction PortAlignment;
        public UnityEditor.GraphToolsFoundation.Overdrive.IPortModel ToPortModel;
        public CreateEdgeCommand() {}
        public CreateEdgeCommand(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel toPortModel, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel fromPortModel, System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> edgeModelsToDelete = default(System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel>), UnityEditor.GraphToolsFoundation.Overdrive.Direction portAlignment = 0, bool createItemizedNode = True) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.CreateEdgeCommand command);
    }

    public class CreateGraphVariableDeclarationCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID Guid;
        public bool IsExposed;
        public UnityEditor.GraphToolsFoundation.Overdrive.ModifierFlags ModifierFlags;
        public UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle TypeHandle;
        public string VariableName;
        public CreateGraphVariableDeclarationCommand() {}
        public CreateGraphVariableDeclarationCommand(string name, bool isExposed, UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle typeHandle, UnityEditor.GraphToolsFoundation.Overdrive.ModifierFlags modifierFlags = 0, UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID guid = default(UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID)) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.CreateGraphVariableDeclarationCommand command);
    }

    public class CreateNodeFromPortCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> EdgesToDelete;
        public bool ItemizeSourceNode;
        public UnityEditor.GraphToolsFoundation.Overdrive.IPortModel PortModel;
        public UnityEngine.Vector2 Position;
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphNodeModelSearcherItem SelectedItem;
        public CreateNodeFromPortCommand() {}
        public CreateNodeFromPortCommand(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel, UnityEngine.Vector2 position, UnityEditor.GraphToolsFoundation.Overdrive.GraphNodeModelSearcherItem selectedItem, System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> edgesToDelete = default(System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel>), bool itemizeSourceNode = True) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.CreateNodeFromPortCommand command);
    }

    public class CreateNodeFromSearcherCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID Guid;
        public UnityEngine.Vector2 Position;
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphNodeModelSearcherItem SelectedItem;
        public CreateNodeFromSearcherCommand() {}
        public CreateNodeFromSearcherCommand(UnityEngine.Vector2 position, UnityEditor.GraphToolsFoundation.Overdrive.GraphNodeModelSearcherItem selectedItem, UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID guid = default(UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID)) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.CreateNodeFromSearcherCommand command);
    }

    public class CreateNodeOnEdgeCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel EdgeModel;
        public UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID Guid;
        public UnityEngine.Vector2 Position;
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphNodeModelSearcherItem SelectedItem;
        public CreateNodeOnEdgeCommand() {}
        public CreateNodeOnEdgeCommand(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edgeModel, UnityEngine.Vector2 position, UnityEditor.GraphToolsFoundation.Overdrive.GraphNodeModelSearcherItem selectedItem, UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID guid = default(UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID)) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.CreateNodeOnEdgeCommand command);
    }

    public class CreateOppositePortalCommand : UnityEditor.GraphToolsFoundation.Overdrive.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel>
    {
        public CreateOppositePortalCommand() {}
        public CreateOppositePortalCommand(System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel> portalModels) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.CreateOppositePortalCommand command);
    }

    public class CreatePlacematCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public UnityEngine.Rect Position;
        public string Title;
        public CreatePlacematCommand() {}
        public CreatePlacematCommand(UnityEngine.Rect position, string title = default(string)) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.CreatePlacematCommand command);
    }

    public class CreateStickyNoteCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public readonly UnityEngine.Rect Position;
        public CreateStickyNoteCommand() {}
        public CreateStickyNoteCommand(UnityEngine.Rect position) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.CreateStickyNoteCommand command);
    }

    public class CreateVariableNodesCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public bool AutoAlign;
        public UnityEditor.GraphToolsFoundation.Overdrive.IPortModel ConnectAfterCreation;
        public System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> EdgeModelsToDelete;
        public System.Collections.Generic.List<System.ValueTuple<UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel, UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID, UnityEngine.Vector2>> VariablesToCreate;
        public CreateVariableNodesCommand() {}
        public CreateVariableNodesCommand(System.Collections.Generic.List<System.ValueTuple<UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel, UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID, UnityEngine.Vector2>> variablesToCreate) {}
        public CreateVariableNodesCommand(UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel graphElementModel, UnityEngine.Vector2 mousePosition, System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> edgeModelsToDelete = default(System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel>), UnityEditor.GraphToolsFoundation.Overdrive.IPortModel connectAfterCreation = default(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel), bool autoAlign = False) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.CreateVariableNodesCommand command);
    }

    [System.Runtime.CompilerServices.Extension] [UnityEditor.GraphToolsFoundation.Overdrive.GraphElementsExtensionMethodsCache(1)] public static class DebuggingFactoryExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IModelUI CreateGraphProcessingErrorBadgeModelUI(UnityEditor.GraphToolsFoundation.Overdrive.ElementBuilder elementBuilder, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.GraphProcessingErrorBadgeModel model);
    }

    [System.Runtime.CompilerServices.Extension] [UnityEditor.GraphToolsFoundation.Overdrive.GraphElementsExtensionMethodsCache(0)] public static class DefaultFactoryExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IModelUI CreateBlackboard(UnityEditor.GraphToolsFoundation.Overdrive.ElementBuilder elementBuilder, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.IBlackboardGraphModel model);
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IModelUI CreateEdge(UnityEditor.GraphToolsFoundation.Overdrive.ElementBuilder elementBuilder, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel model);
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IModelUI CreateEdgePortal(UnityEditor.GraphToolsFoundation.Overdrive.ElementBuilder elementBuilder, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel model);
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IModelUI CreateErrorBadgeModelUI(UnityEditor.GraphToolsFoundation.Overdrive.ElementBuilder elementBuilder, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.IErrorBadgeModel model);
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IModelUI CreateNode(UnityEditor.GraphToolsFoundation.Overdrive.ElementBuilder elementBuilder, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel model);
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IModelUI CreatePlacemat(UnityEditor.GraphToolsFoundation.Overdrive.ElementBuilder elementBuilder, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.IPlacematModel model);
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IModelUI CreatePort(UnityEditor.GraphToolsFoundation.Overdrive.ElementBuilder elementBuilder, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel model);
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IModelUI CreateStickyNote(UnityEditor.GraphToolsFoundation.Overdrive.ElementBuilder elementBuilder, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.IStickyNoteModel model);
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IModelUI CreateValueBadgeModelUI(UnityEditor.GraphToolsFoundation.Overdrive.ElementBuilder elementBuilder, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.IValueBadgeModel model);
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IModelUI CreateVariableDeclarationModelUI(UnityEditor.GraphToolsFoundation.Overdrive.ElementBuilder elementBuilder, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel model);
    }

    public class DefaultSearcherDatabaseProvider : UnityEditor.GraphToolsFoundation.Overdrive.ISearcherDatabaseProvider
    {
        public DefaultSearcherDatabaseProvider(UnityEditor.GraphToolsFoundation.Overdrive.Stencil stencil) {}
        public virtual System.Collections.Generic.List<UnityEditor.Searcher.SearcherDatabaseBase> GetDynamicSearcherDatabases(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel);
        public virtual System.Collections.Generic.List<UnityEditor.Searcher.SearcherDatabaseBase> GetGraphElementsSearcherDatabases(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
        public virtual System.Collections.Generic.List<UnityEditor.Searcher.SearcherDatabaseBase> GetGraphVariablesSearcherDatabases(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
        public virtual System.Collections.Generic.List<UnityEditor.Searcher.SearcherDatabase> GetVariableTypesSearcherDatabases();
    }

    public class DeleteEdgeCommand : UnityEditor.GraphToolsFoundation.Overdrive.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel>
    {
        public DeleteEdgeCommand() {}
        public DeleteEdgeCommand(System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> edgesToDelete) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.DeleteEdgeCommand command);
    }

    public class DeleteElementsCommand : UnityEditor.GraphToolsFoundation.Overdrive.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel>
    {
        public DeleteElementsCommand() {}
        public DeleteElementsCommand(System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> elementsToRemove) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.DeleteElementsCommand command);
    }

    [System.Flags] public enum DependencyType
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.DependencyType Geometry = 2;
        public const UnityEditor.GraphToolsFoundation.Overdrive.DependencyType None = 0;
        public const UnityEditor.GraphToolsFoundation.Overdrive.DependencyType Removal = 4;
        public const UnityEditor.GraphToolsFoundation.Overdrive.DependencyType Style = 1;
        public int value__;
    }

    [System.Runtime.CompilerServices.Extension] public static class DependencyTypeExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static bool HasFlagFast(UnityEditor.GraphToolsFoundation.Overdrive.DependencyType value, UnityEditor.GraphToolsFoundation.Overdrive.DependencyType flag);
    }

    [System.Flags] public enum Direction
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.Direction Input = 1;
        public const UnityEditor.GraphToolsFoundation.Overdrive.Direction None = 0;
        public const UnityEditor.GraphToolsFoundation.Overdrive.Direction Output = 2;
        public int value__;
    }

    public class DisconnectNodeCommand : UnityEditor.GraphToolsFoundation.Overdrive.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel>
    {
        public DisconnectNodeCommand() {}
        public DisconnectNodeCommand(params UnityEditor.GraphToolsFoundation.Overdrive.INodeModel[] nodeModels) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.DisconnectNodeCommand command);
    }

    public abstract class DragAndDropHandler : UnityEditor.GraphToolsFoundation.Overdrive.IDragAndDropHandler
    {
        protected DragAndDropHandler() {}
        public virtual void OnDragEnter(UnityEngine.UIElements.DragEnterEvent e);
        public virtual void OnDragExited(UnityEngine.UIElements.DragExitedEvent e);
        public virtual void OnDragLeave(UnityEngine.UIElements.DragLeaveEvent e);
        public virtual void OnDragPerform(UnityEngine.UIElements.DragPerformEvent evt);
        public virtual void OnDragUpdated(UnityEngine.UIElements.DragUpdatedEvent e);
    }

    public class Dragger : UnityEngine.UIElements.MouseManipulator
    {
        protected bool m_Active;
        public bool ClampToParentEdges { get; set; }
        public UnityEngine.Vector2 PanSpeed { get; set; }
        public Dragger() {}
        protected UnityEngine.Rect CalculatePosition(float x, float y, float width, float height);
        protected void OnMouseDown(UnityEngine.UIElements.MouseDownEvent e);
        protected void OnMouseMove(UnityEngine.UIElements.MouseMoveEvent e);
        protected void OnMouseUp(UnityEngine.UIElements.MouseUpEvent e);
        protected virtual void RegisterCallbacksOnTarget();
        protected virtual void UnregisterCallbacksFromTarget();
    }

    public abstract class DropTarget : UnityEditor.GraphToolsFoundation.Overdrive.ModelUI
    {
        protected bool CurrentDropAccepted { get; }
        public DropTarget() {}
        public abstract bool CanAcceptSelectionDrop(System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.ISelectableGraphElement> selection);
        protected virtual void OnDragEnd();
        public virtual void OnDragEnter(UnityEngine.UIElements.DragEnterEvent evt);
        public virtual void OnDragExited(UnityEngine.UIElements.DragExitedEvent evt);
        public virtual void OnDragLeave(UnityEngine.UIElements.DragLeaveEvent evt);
        public virtual void OnDragPerform(UnityEngine.UIElements.DragPerformEvent evt);
        public virtual void OnDragUpdated(UnityEngine.UIElements.DragUpdatedEvent evt);
    }

    public class Edge : UnityEditor.GraphToolsFoundation.Overdrive.GraphElement
    {
        public static readonly string edgeBubblePartName;
        public static readonly string edgeControlPartName;
        public static readonly string editModeModifierUssClassName;
        public static readonly string ghostModifierUssClassName;
        public static readonly string ussClassName;
        public UnityEditor.GraphToolsFoundation.Overdrive.EdgeControl EdgeControl { get; }
        protected UnityEditor.GraphToolsFoundation.Overdrive.EdgeManipulator EdgeManipulator { get; set; }
        public UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel EdgeModel { get; }
        public UnityEngine.Vector2 From { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.IPortModel Input { get; }
        public bool IsGhostEdge { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.IPortModel Output { get; }
        public virtual bool ShowInMiniMap { get; }
        public UnityEngine.Vector2 To { get; }
        public Edge() {}
        public virtual void AddBackwardDependencies();
        protected virtual void BuildContextualMenu(UnityEngine.UIElements.ContextualMenuPopulateEvent evt);
        protected virtual void BuildPartList();
        public virtual bool ContainsPoint(UnityEngine.Vector2 localPoint);
        public virtual void OnSelected();
        public virtual void OnUnselected();
        public virtual bool Overlaps(UnityEngine.Rect rectangle);
        protected virtual void PostBuildUI();
        protected virtual void UpdateElementFromModel();
    }

    public class EdgeBubble : UnityEngine.UIElements.Label
    {
        public static readonly string ussClassName;
        public virtual string text { get; set; }
        public EdgeBubble() {}
        public void AttachTo(UnityEngine.UIElements.VisualElement edgeControlTarget, UnityEngine.SpriteAlignment align);
        public void Detach();
        public void SetAttacherOffset(UnityEngine.Vector2 offset);
    }

    public class EdgeBubblePart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        protected UnityEditor.GraphToolsFoundation.Overdrive.EdgeBubble m_EdgeBubble;
        public static readonly string ussClassName;
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected EdgeBubblePart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement container);
        public static UnityEditor.GraphToolsFoundation.Overdrive.EdgeBubblePart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI, string parentClassName);
        protected virtual void PostBuildPartUI();
        protected virtual bool ShouldShow();
        protected virtual void UpdatePartFromModel();
    }

    public class EdgeConnector : UnityEngine.UIElements.MouseManipulator
    {
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.EdgeDragHelper edgeDragHelper { get; }
        public EdgeConnector(UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView, UnityEditor.GraphToolsFoundation.Overdrive.EdgeConnectorListener listener, System.Func<UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel, UnityEditor.GraphToolsFoundation.Overdrive.InternalModels.GhostEdgeModel> ghostEdgeViewModelCreator = default(System.Func<UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel, UnityEditor.GraphToolsFoundation.Overdrive.InternalModels.GhostEdgeModel>)) {}
        protected virtual void OnMouseDown(UnityEngine.UIElements.MouseDownEvent e);
        protected virtual void OnMouseMove(UnityEngine.UIElements.MouseMoveEvent e);
        protected virtual void OnMouseUp(UnityEngine.UIElements.MouseUpEvent e);
        protected virtual void RegisterCallbacksOnTarget();
        public void SetDropDelegate(System.Action<UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.Edge> action);
        public void SetDropOutsideDelegate(System.Action<UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.Edge, UnityEngine.Vector2> action);
        protected virtual void UnregisterCallbacksFromTarget();
    }

    public class EdgeConnectorListener
    {
        public EdgeConnectorListener() {}
        public static System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> GetDropEdgeModelsToDelete(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edge);
        public void OnDrop(UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.Edge edge, UnityEditor.GraphToolsFoundation.Overdrive.Edge originalEdge);
        public void OnDropOutsidePort(UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.Edge edge, UnityEngine.Vector2 position, UnityEditor.GraphToolsFoundation.Overdrive.Edge originalEdge);
        public void SetDropDelegate(System.Action<UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.Edge> action);
        public void SetDropOutsideDelegate(System.Action<UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.Edge, UnityEngine.Vector2> action);
    }

    public class EdgeControl : UnityEngine.UIElements.VisualElement
    {
        public UnityEngine.Vector2 ControlPointOffset { get; set; }
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphView GraphView { get; }
        public UnityEngine.Color InputColor { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.Orientation InputOrientation { get; set; }
        public int LineWidth { get; set; }
        public UnityEngine.Color OutputColor { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.Orientation OutputOrientation { get; set; }
        public System.Collections.Generic.List<UnityEngine.Vector2> RenderPoints { get; }
        public EdgeControl() {}
        public virtual bool ContainsPoint(UnityEngine.Vector2 localPoint);
        public void FindNearestCurveSegment(UnityEngine.Vector2 localPoint, out float minSquareDistance, out int nearestControlPointIndex, out int nearestRenderPointIndex);
        protected void OnCustomStyleResolved(UnityEngine.UIElements.CustomStyleResolvedEvent e);
        public virtual bool Overlaps(UnityEngine.Rect rect);
        public void RebuildControlPointsUI();
        public void ResetColor();
        public void SetColor(UnityEngine.Color inputColor, UnityEngine.Color outputColor);
        public void UpdateLayout();
        protected virtual void UpdateRenderPoints();
    }

    public class EdgeControlPart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected EdgeControlPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement container);
        public static UnityEditor.GraphToolsFoundation.Overdrive.EdgeControlPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName);
        protected virtual void UpdatePartFromModel();
    }

    public class EdgeControlPoint : UnityEngine.UIElements.VisualElement
    {
        public static readonly string removeControlPointMenuItem;
        public static readonly string ussClassName;
        protected UnityEngine.UIElements.ContextualMenuManipulator ContextualMenuManipulator { get; set; }
        public EdgeControlPoint(UnityEditor.GraphToolsFoundation.Overdrive.EdgeControl edgeControl, UnityEditor.GraphToolsFoundation.Overdrive.IEditableEdge edgeModel, int controlPointIndex) {}
        protected virtual void BuildContextualMenu(UnityEngine.UIElements.ContextualMenuPopulateEvent evt);
        public void SetPositions(UnityEngine.Vector2 cpPosition, UnityEngine.Vector2 lhPosition, UnityEngine.Vector2 rhPosition);
    }

    public class EdgeDragHelper
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.IPortModel draggedPort { get; set; }
        public UnityEditor.GraphToolsFoundation.Overdrive.InternalModels.GhostEdgeModel edgeCandidateModel { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphView GraphView { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.Edge originalEdge { get; set; }
        public EdgeDragHelper(UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView, UnityEditor.GraphToolsFoundation.Overdrive.EdgeConnectorListener listener, System.Func<UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel, UnityEditor.GraphToolsFoundation.Overdrive.InternalModels.GhostEdgeModel> ghostEdgeViewModelCreator) {}
        public void CreateEdgeCandidate(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
        public UnityEditor.GraphToolsFoundation.Overdrive.Edge CreateGhostEdge(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
        public bool HandleMouseDown(UnityEngine.UIElements.MouseDownEvent evt);
        public void HandleMouseMove(UnityEngine.UIElements.MouseMoveEvent evt);
        public void HandleMouseUp(UnityEngine.UIElements.MouseUpEvent evt);
        public void Reset(bool didConnect = False);
    }

    public class EdgeManipulator : UnityEngine.UIElements.MouseManipulator
    {
        public EdgeManipulator() {}
        protected void OnKeyDown(UnityEngine.UIElements.KeyDownEvent evt);
        protected void OnMouseDown(UnityEngine.UIElements.MouseDownEvent evt);
        protected void OnMouseMove(UnityEngine.UIElements.MouseMoveEvent evt);
        protected void OnMouseUp(UnityEngine.UIElements.MouseUpEvent evt);
        protected virtual void RegisterCallbacksOnTarget();
        protected virtual void UnregisterCallbacksFromTarget();
    }

    public class EditableLabel : UnityEditor.GraphToolsFoundation.Overdrive.Bridge.VisualElementBridge
    {
        public static readonly string labelName;
        public static readonly string textFieldName;
        protected UnityEngine.UIElements.ContextualMenuManipulator ContextualMenuManipulator { get; set; }
        public bool multiline { set; }
        public EditableLabel() {}
        public void BeginEditing();
        protected virtual void BuildContextualMenu(UnityEngine.UIElements.ContextualMenuPopulateEvent evt);
        public void SetValueWithoutNotify(string value);
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEditor.GraphToolsFoundation.Overdrive.EditableLabel, UnityEditor.GraphToolsFoundation.Overdrive.EditableLabel.UxmlTraits>
        {
            public UxmlFactory() {}
        }
        public class UxmlTraits : UnityEngine.UIElements.VisualElement.UxmlTraits
        {
            public UxmlTraits() {}
            public virtual void Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        }
    }

    public class EditableTitlePart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        public static readonly string titleLabelName;
        public static readonly string ussClassName;
        protected virtual bool HasEditableLabel { get; }
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected UnityEngine.UIElements.VisualElement TitleContainer { get; set; }
        public UnityEngine.UIElements.VisualElement TitleLabel { get; protected set; }
        protected EditableTitlePart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName, bool multiline) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement container);
        public static UnityEditor.GraphToolsFoundation.Overdrive.EditableTitlePart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI, string parentClassName, bool multiline = False);
        protected void OnRename(UnityEngine.UIElements.ChangeEvent<string> e);
        protected virtual void PostBuildPartUI();
        protected virtual void UpdatePartFromModel();
    }

    public abstract class EditorStateComponent
    {
        protected EditorStateComponent() {}
    }

    public class ElementBuilder
    {
        public string Context { get; set; }
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphView GraphView { get; set; }
        public ElementBuilder() {}
    }

    public abstract class Enumeration : System.IComparable, System.IComparable<UnityEditor.GraphToolsFoundation.Overdrive.Enumeration>, System.IEquatable<UnityEditor.GraphToolsFoundation.Overdrive.Enumeration>
    {
        public string[] ObsoleteNames;
        public int Id { get; }
        public string Name { get; }
        protected Enumeration(int id, string name, string[] obsoleteNames = default(string[])) {}
        public virtual int CompareTo(object obj);
        public virtual int CompareTo(UnityEditor.GraphToolsFoundation.Overdrive.Enumeration other);
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEditor.GraphToolsFoundation.Overdrive.Enumeration other);
        public static System.Collections.Generic.IEnumerable<TBase> GetAll<T, TBase>() where T : TBase where TBase : UnityEditor.GraphToolsFoundation.Overdrive.Enumeration;
        public static System.Collections.Generic.IEnumerable<T> GetDeclared<T>() where T : UnityEditor.GraphToolsFoundation.Overdrive.Enumeration;
        public virtual int GetHashCode();
        public static bool operator ==(UnityEditor.GraphToolsFoundation.Overdrive.Enumeration left, UnityEditor.GraphToolsFoundation.Overdrive.Enumeration right);
        public static bool operator !=(UnityEditor.GraphToolsFoundation.Overdrive.Enumeration left, UnityEditor.GraphToolsFoundation.Overdrive.Enumeration right);
        public virtual string ToString();
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(false, @"UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting", @"Unity.GraphTools.Foundation.Overdrive.Editor", )] public struct EnumValueReference
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle EnumType { get; set; }
        public int Value { get; set; }
        public EnumValueReference(System.Enum e) {}
        public EnumValueReference(UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle handle) {}
        public bool IsValid();
        public System.Enum ValueAsEnum();
    }

    public class ErrorBadge : UnityEditor.GraphToolsFoundation.Overdrive.Badge
    {
        public static readonly string hasErrorUssClassName;
        public static readonly string iconUssClassName;
        public static readonly string textUssClassName;
        public static readonly string tipUssClassName;
        public static readonly string ussClassName;
        public string VisualStyle { set; }
        public ErrorBadge() {}
        protected virtual void Attach();
        protected virtual void BuildElementUI();
        protected virtual void Detach();
        protected virtual void ExecuteDefaultAction(UnityEngine.UIElements.EventBase evt);
        protected virtual void PostBuildUI();
        protected virtual void UpdateElementFromModel();
    }

    public class ErrorToolbar : UnityEditor.GraphToolsFoundation.Overdrive.Toolbar
    {
        public ErrorToolbar(UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView) {}
        public void UpdateUI();
    }

    public class ExecutionFlow
    {
    }

    public class ExpandOrCollapseBlackboardRowCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public readonly bool Expand;
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel Row;
        public ExpandOrCollapseBlackboardRowCommand() {}
        public ExpandOrCollapseBlackboardRowCommand(bool expand, UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel row) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.ExpandOrCollapseBlackboardRowCommand command);
    }

    public static class ExtensionMethodCache<TExtendedType>
    {
        public static System.Reflection.MethodInfo GetExtensionMethod(System.Type targetType, System.Func<System.Reflection.MethodInfo, bool> filterMethods, System.Func<System.Reflection.MethodInfo, System.Type> keySelector);
    }

    public class FindInGraphAdapter : UnityEditor.GraphToolsFoundation.Overdrive.SimpleSearcherAdapter
    {
        public FindInGraphAdapter(System.Action<UnityEditor.GraphToolsFoundation.Overdrive.FindInGraphAdapter.FindSearcherItem> onHighlightDelegate) {}
        public virtual void OnSelectionChanged(System.Collections.Generic.IEnumerable<UnityEditor.Searcher.SearcherItem> items);
        public class FindSearcherItem : UnityEditor.Searcher.SearcherItem
        {
            public UnityEditor.GraphToolsFoundation.Overdrive.INodeModel Node { get; }
            public FindSearcherItem(UnityEditor.GraphToolsFoundation.Overdrive.INodeModel node, string title, string help = , System.Collections.Generic.List<UnityEditor.Searcher.SearcherItem> children = default(System.Collections.Generic.List<UnityEditor.Searcher.SearcherItem>)) {}
        }
    }

    public class FourWayResizerPart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected FourWayResizerPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement container);
        public static UnityEditor.GraphToolsFoundation.Overdrive.FourWayResizerPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI, string parentClassName);
        protected virtual void UpdatePartFromModel();
    }

    public class FreehandSelector : UnityEngine.UIElements.MouseManipulator
    {
        public FreehandSelector() {}
        protected virtual void RegisterCallbacksOnTarget();
        protected virtual void UnregisterCallbacksFromTarget();
    }

    public static class GraphAssetCreationHelpers<TGraphAssetModelType> where TGraphAssetModelType : UnityEngine.ScriptableObject, UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel
    {
        public static UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel CreateGraphAsset(System.Type stencilType, string name, string assetPath, UnityEditor.GraphToolsFoundation.Overdrive.IGraphTemplate graphTemplate = default(UnityEditor.GraphToolsFoundation.Overdrive.IGraphTemplate), bool writeOnDisk = True);
        public static UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel CreateInMemoryGraphAsset(System.Type stencilType, string name, string assetPath, UnityEditor.GraphToolsFoundation.Overdrive.IGraphTemplate graphTemplate = default(UnityEditor.GraphToolsFoundation.Overdrive.IGraphTemplate));
        public static void CreateInProjectWindow(UnityEditor.GraphToolsFoundation.Overdrive.IGraphTemplate template, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, string path);
        public static UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel PromptToCreate(UnityEditor.GraphToolsFoundation.Overdrive.IGraphTemplate template, string title, string prompt, string assetExtension);
    }

    public abstract class GraphAssetModel : UnityEngine.ScriptableObject, System.IDisposable, UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel, UnityEngine.ISerializationCallbackReceiver
    {
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IBlackboardGraphModel BlackboardGraphModel { get; }
        public virtual string FriendlyScriptName { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel GraphModel { get; }
        protected abstract System.Type GraphModelType { get; }
        public virtual string Name { get; set; }
        protected GraphAssetModel() {}
        public virtual void CreateGraph(string graphName, System.Type stencilType = default(System.Type), bool writeOnDisk = True);
        public virtual void Dispose();
        public virtual void OnAfterDeserialize();
        public virtual void OnBeforeSerialize();
        protected virtual void OnDisable();
        protected virtual void OnEnable();
    }

    [System.Runtime.CompilerServices.Extension] public static class GraphAssetModelExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static string GetPath(UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel self);
    }

    public class GraphContext
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.ITypeMetadataResolver TypeMetadataResolver { get; }
        public GraphContext() {}
        public bool RequiresInitialization(UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel decl);
        public bool RequiresInspectorInitialization(UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel decl);
    }

    public abstract class GraphElement : UnityEditor.GraphToolsFoundation.Overdrive.ModelUI, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElement, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI, UnityEditor.GraphToolsFoundation.Overdrive.ISelectableGraphElement
    {
        public static readonly string selectableModifierUssClassName;
        public static readonly string ussClassName;
        protected UnityEditor.GraphToolsFoundation.Overdrive.ClickSelector ClickSelector { get; set; }
        public int Layer { get; set; }
        public UnityEngine.Color MinimapColor { get; protected set; }
        public bool Selected { get; set; }
        public virtual bool ShowInMiniMap { get; set; }
        protected GraphElement() {}
        public UnityEngine.Rect GetPosition();
        public virtual bool IsCopiable();
        public virtual bool IsDeletable();
        public virtual bool IsDroppable();
        public virtual bool IsMovable();
        public virtual bool IsRenamable();
        public virtual bool IsResizable();
        public virtual bool IsSelectable();
        public virtual bool IsSelected(UnityEngine.UIElements.VisualElement selectionContainer);
        public virtual void OnSelected();
        public virtual void OnUnselected();
        protected virtual void PostBuildUI();
        public virtual void Rename();
        public void ResetLayer();
        public virtual void Select(UnityEngine.UIElements.VisualElement selectionContainer, bool additive);
        public virtual void SetPosition(UnityEngine.Rect newPos);
        public virtual void Unselect(UnityEngine.UIElements.VisualElement selectionContainer);
        protected virtual void UpdateElementFromModel();
    }

    public static class GraphElementFactory
    {
        [JetBrains.Annotations.CanBeNull] public static T CreateUI<T>(UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model) where T : class, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI;
        public static T CreateUI<T>(UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, string context) where T : class, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI;
    }

    [System.Runtime.CompilerServices.Extension] [UnityEditor.GraphToolsFoundation.Overdrive.GraphElementsExtensionMethodsCache(0)] public static class GraphElementFactoryExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IModelUI CreatePort(UnityEditor.GraphToolsFoundation.Overdrive.ElementBuilder elementBuilder, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.PortModel model);
    }

    [System.Runtime.CompilerServices.Extension] public static class GraphElementHelper
    {
        public static UnityEngine.UIElements.VisualTreeAsset LoadUXML(string uxmlName);
    }

    [System.Runtime.CompilerServices.Extension] public static class GraphElementModelExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static void ClearCapabilities(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel self);
        [System.Runtime.CompilerServices.Extension] public static bool HasCapability(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel self, UnityEditor.GraphToolsFoundation.Overdrive.Capabilities capability);
        [System.Runtime.CompilerServices.Extension] public static bool IsCollapsible(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel self);
        [System.Runtime.CompilerServices.Extension] public static bool IsCopiable(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel self);
        [System.Runtime.CompilerServices.Extension] public static bool IsDeletable(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel self);
        [System.Runtime.CompilerServices.Extension] public static bool IsDroppable(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel self);
        [System.Runtime.CompilerServices.Extension] public static bool IsMovable(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel self);
        [System.Runtime.CompilerServices.Extension] public static bool IsRenamable(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel self);
        [System.Runtime.CompilerServices.Extension] public static bool IsResizable(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel self);
        [System.Runtime.CompilerServices.Extension] public static bool IsSelectable(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel self);
        [System.Runtime.CompilerServices.Extension] public static void SetCapability(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel self, UnityEditor.GraphToolsFoundation.Overdrive.Capabilities capability, bool active);
    }

    public abstract class GraphElementSearcherAdapter : UnityEditor.Searcher.SearcherAdapter
    {
        protected UnityEngine.UIElements.VisualElement m_DetailsPanel;
        protected UnityEngine.UIElements.Label m_DetailsTitle;
        protected UnityEngine.UIElements.ScrollView m_Scrollview;
        protected GraphElementSearcherAdapter(string title) {}
        protected virtual System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> CreateGraphElements(UnityEditor.Searcher.SearcherItem item);
        public virtual void InitDetailsPanel(UnityEngine.UIElements.VisualElement detailsPanel);
        protected virtual void OnGraphElementsCreated(UnityEditor.Searcher.SearcherItem searcherItem, System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> elements);
        public virtual void OnSelectionChanged(System.Collections.Generic.IEnumerable<UnityEditor.Searcher.SearcherItem> items);
    }

    [JetBrains.Annotations.PublicAPI] public class GraphElementSearcherDatabase
    {
        public readonly System.Collections.Generic.List<UnityEditor.Searcher.SearcherItem> Items;
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.Stencil Stencil;
        public GraphElementSearcherDatabase(UnityEditor.GraphToolsFoundation.Overdrive.Stencil stencil, UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel) {}
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphElementSearcherDatabase AddConstants(System.Collections.Generic.IEnumerable<System.Type> types);
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphElementSearcherDatabase AddConstants(System.Type type);
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphElementSearcherDatabase AddGraphVariables(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphElementSearcherDatabase AddNodesWithSearcherItemAttribute();
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphElementSearcherDatabase AddStickyNote();
        public UnityEditor.Searcher.LuceneSearcherDatabase Build();
    }

    [JetBrains.Annotations.MeansImplicitUse(3)] public class GraphElementsExtensionMethodsCacheAttribute : System.Attribute
    {
        public const int toolDefaultPriority = 1;
        public int Priority { get; }
        public GraphElementsExtensionMethodsCacheAttribute(int priority = 1) {}
    }

    [System.Runtime.CompilerServices.Extension] public static class GraphModelExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static bool CheckIntegrity(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel self, UnityEditor.GraphToolsFoundation.Overdrive.Verbosity errors);
        [System.Runtime.CompilerServices.Extension] public static TNodeType CreateNode<TNodeType>(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel self, string nodeName = , UnityEngine.Vector2 position = default(UnityEngine.Vector2), UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID guid = default(UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID), System.Action<TNodeType> preDefineSetup = default(System.Action<TNodeType>), UnityEditor.GraphToolsFoundation.Overdrive.SpawnFlags spawnFlags = 0) where TNodeType : class, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel;
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel CreateOppositePortal(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel self, UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel edgePortalModel, UnityEditor.GraphToolsFoundation.Overdrive.SpawnFlags spawnFlags = 0);
        [System.Runtime.CompilerServices.Extension] public static System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> DeleteEdge(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel self, UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edgeToDelete);
        [System.Runtime.CompilerServices.Extension] public static System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> DeleteElements(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel self, System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> graphElementModels);
        [System.Runtime.CompilerServices.Extension] public static System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> DeleteNode(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel self, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel nodeToDelete, bool deleteConnections);
        [System.Runtime.CompilerServices.Extension] public static System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> DeletePlacemat(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel self, UnityEditor.GraphToolsFoundation.Overdrive.IPlacematModel placematToDelete);
        [System.Runtime.CompilerServices.Extension] public static System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> DeleteStickyNote(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel self, UnityEditor.GraphToolsFoundation.Overdrive.IStickyNoteModel stickyNoteToDelete);
        [System.Runtime.CompilerServices.Extension] public static System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> DeleteVariableDeclaration(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel self, UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel variableDeclarationToDelete, bool deleteUsages);
        [System.Runtime.CompilerServices.Extension] public static System.Collections.Generic.IEnumerable<T> FindReferencesInGraph<T>(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel self, UnityEditor.GraphToolsFoundation.Overdrive.IDeclarationModel variableDeclarationModel) where T : UnityEditor.GraphToolsFoundation.Overdrive.IHasDeclarationModel;
        [System.Runtime.CompilerServices.Extension] public static System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IHasDeclarationModel> FindReferencesInGraph(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel self, UnityEditor.GraphToolsFoundation.Overdrive.IDeclarationModel variableDeclarationModel);
        [System.Runtime.CompilerServices.Extension] public static System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> GetConnections(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel self, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel);
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel GetEdgeConnectedToPorts(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel self, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel toPort, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel output);
        [System.Runtime.CompilerServices.Extension] public static System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> GetEdgesConnections(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel self, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel nodeModel);
        [System.Runtime.CompilerServices.Extension] public static System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> GetEdgesConnections(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel self, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel);
        [System.Runtime.CompilerServices.Extension] public static System.Collections.Generic.IReadOnlyList<T> GetListOf<T>(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel self) where T : UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel;
        [System.Runtime.CompilerServices.Extension] public static System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> GetPortModels(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel self);
        [System.Runtime.CompilerServices.Extension] public static void MoveAfter<T>(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel self, System.Collections.Generic.IReadOnlyList<T> models, T insertAfter) where T : class, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel;
        [System.Runtime.CompilerServices.Extension] public static void MoveBefore<T>(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel self, System.Collections.Generic.IReadOnlyList<T> models, T insertBefore) where T : class, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel;
        [System.Runtime.CompilerServices.Extension] public static void QuickCleanup(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel self);
        [System.Runtime.CompilerServices.Extension] public static void Repair(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel self);
    }

    public struct GraphNodeCreationData : UnityEditor.GraphToolsFoundation.Overdrive.IGraphNodeCreationData
    {
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel GraphModel { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID Guid { get; }
        public virtual UnityEngine.Vector2 Position { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.SpawnFlags SpawnFlags { get; }
        public GraphNodeCreationData(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel, UnityEngine.Vector2 position, UnityEditor.GraphToolsFoundation.Overdrive.SpawnFlags spawnFlags = 0, UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID guid = default(UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID)) {}
    }

    public class GraphNodeModelSearcherItem : UnityEditor.Searcher.SearcherItem, UnityEditor.GraphToolsFoundation.Overdrive.ISearcherItemDataProvider
    {
        public System.Func<UnityEditor.GraphToolsFoundation.Overdrive.GraphNodeCreationData, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel[]> CreateElements { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.ISearcherItemData Data { get; }
        public virtual string Name { get; }
        public GraphNodeModelSearcherItem(UnityEditor.GraphToolsFoundation.Overdrive.ISearcherItemData data, System.Func<UnityEditor.GraphToolsFoundation.Overdrive.GraphNodeCreationData, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> createElement, System.Func<string> getName, System.Collections.Generic.List<UnityEditor.Searcher.SearcherItem> children = default(System.Collections.Generic.List<UnityEditor.Searcher.SearcherItem>), string help = default(string)) {}
        public GraphNodeModelSearcherItem(UnityEditor.GraphToolsFoundation.Overdrive.ISearcherItemData data, System.Func<UnityEditor.GraphToolsFoundation.Overdrive.GraphNodeCreationData, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> createElement, string name, System.Collections.Generic.List<UnityEditor.Searcher.SearcherItem> children = default(System.Collections.Generic.List<UnityEditor.Searcher.SearcherItem>), System.Func<string> getName = default(System.Func<string>), string help = default(string)) {}
    }

    public class GraphNodeSearcherAdapter : UnityEditor.GraphToolsFoundation.Overdrive.GraphElementSearcherAdapter
    {
        public GraphNodeSearcherAdapter(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel, string title) {}
        public static System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> CreateGraphElementModels(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel mGraphModel, UnityEditor.Searcher.SearcherItem item);
        protected virtual System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> CreateGraphElements(UnityEditor.Searcher.SearcherItem item);
    }

    public class GraphProcessingError
    {
        public string Description { get; set; }
        public UnityEditor.GraphToolsFoundation.Overdrive.QuickFix Fix { get; set; }
        public bool IsWarning { get; set; }
        public UnityEditor.GraphToolsFoundation.Overdrive.INodeModel SourceNode { get; set; }
        public UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID SourceNodeGuid { get; set; }
        public GraphProcessingError() {}
        public virtual string ToString();
    }

    public class GraphProcessingResult
    {
        public System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingError> Errors { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingStatus Status { get; }
        public GraphProcessingResult() {}
        public void AddError(string description, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel node = default(UnityEditor.GraphToolsFoundation.Overdrive.INodeModel), UnityEditor.GraphToolsFoundation.Overdrive.QuickFix quickFix = default(UnityEditor.GraphToolsFoundation.Overdrive.QuickFix));
        public void AddWarning(string description, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel node = default(UnityEditor.GraphToolsFoundation.Overdrive.INodeModel), UnityEditor.GraphToolsFoundation.Overdrive.QuickFix quickFix = default(UnityEditor.GraphToolsFoundation.Overdrive.QuickFix));
    }

    public class GraphProcessingStateComponent : UnityEditor.GraphToolsFoundation.Overdrive.AssetViewStateComponent
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingResult m_LastResult;
        public System.Action<UnityEditor.GraphToolsFoundation.Overdrive.RequestGraphProcessingOptions> OnGraphProcessingRequest;
        public bool GraphProcessingPending { get; set; }
        public GraphProcessingStateComponent() {}
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingResult GetLastResult();
        public void RequestGraphProcessing(UnityEditor.GraphToolsFoundation.Overdrive.RequestGraphProcessingOptions options);
    }

    [JetBrains.Annotations.PublicAPI] public enum GraphProcessingStatus
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingStatus Failed = 2;
        public const UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingStatus Restart = 1;
        public const UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingStatus Succeeded = 0;
        public int value__;
    }

    public class GraphProcessingTimer
    {
        public long ElapsedMilliseconds { get; }
        public bool IsRunning { get; }
        public GraphProcessingTimer() {}
        public void Restart(UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingStateComponent stateComponent);
        public void Stop(UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingStateComponent stateComponent);
    }

    public class GraphToolState : System.IDisposable
    {
        protected readonly UnityEditor.GUID m_GraphViewEditorWindowGUID;
        public UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel AssetModel { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IBlackboardGraphModel BlackboardGraphModel { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.BlackboardViewStateComponent BlackboardViewState { get; }
        public System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> ChangedModels { get; }
        public System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> DeletedModels { get; }
        protected UnityEditor.GraphToolsFoundation.Overdrive.PersistedEditorState EditorState { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel GraphModel { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingStateComponent GraphProcessingStateComponent { get; }
        public System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> ModelsToAutoAlign { get; }
        public System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> NewModels { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.Preferences Preferences { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.SelectionStateComponent SelectionStateComponent { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.TracingStateComponent TracingState { get; }
        public System.UInt32 Version { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.WindowStateComponent WindowState { get; }
        public GraphToolState(UnityEditor.GUID graphViewEditorWindowGUID, UnityEditor.GraphToolsFoundation.Overdrive.Preferences preferences) {}
        public virtual void Dispose();
        protected virtual void Dispose(bool disposing);
        protected virtual void Finalize();
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.UIRebuildType GetUpdateType(System.UInt32 viewVersion);
        public void LoadGraphAsset(UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel assetModel, UnityEngine.GameObject boundObject);
        public void MarkChanged(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> models);
        public void MarkDeleted(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> models);
        public void MarkModelToAutoAlign(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model);
        public void MarkNew(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> models);
        public virtual void PostDispatchCommand(UnityEditor.GraphToolsFoundation.Overdrive.Command command);
        public virtual void PreDispatchCommand(UnityEditor.GraphToolsFoundation.Overdrive.Command command);
        public virtual void PushUndo(UnityEditor.GraphToolsFoundation.Overdrive.Command command);
        public void RequestUIRebuild();
        public void UnloadCurrentGraphAsset();
    }

    [System.Runtime.CompilerServices.Extension] public static class GraphToolStateExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static void MarkChanged(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model);
        [System.Runtime.CompilerServices.Extension] public static void MarkDeleted(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model);
        [System.Runtime.CompilerServices.Extension] public static void MarkNew(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model);
    }

    public abstract class GraphTraversal
    {
        protected GraphTraversal() {}
        protected virtual void VisitEdge(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edgeModel);
        public void VisitGraph(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
        protected virtual void VisitNode(UnityEditor.GraphToolsFoundation.Overdrive.INodeModel nodeModel, System.Collections.Generic.HashSet<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel> visitedNodes);
        protected virtual void VisitVariableDeclaration(UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel variableDeclarationModel);
    }

    public class GraphView : UnityEditor.GraphToolsFoundation.Overdrive.Bridge.GraphViewBridge, UnityEditor.GraphToolsFoundation.Overdrive.IDragAndDropHandler, UnityEditor.GraphToolsFoundation.Overdrive.ISelection
    {
        public const float DragDropSpacer = 5;
        protected UnityEngine.Vector2 m_LastMousePosition;
        protected bool m_SelectionDraggerWasActive;
        public static readonly string ussClassName;
        public event System.Action<System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.ISelectableGraphElement>> OnSelectionChangedCallback;
        public virtual bool CanCopySelection { get; }
        public virtual bool CanCutSelection { get; }
        public virtual bool CanDeleteSelection { get; }
        public virtual bool CanDuplicateSelection { get; }
        public virtual bool CanPaste { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphView.CanPasteSerializedDataDelegate CanPasteSerializedDataCallback { get; set; }
        protected UnityEngine.UIElements.Clickable Clickable { get; set; }
        public UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher CommandDispatcher { get; }
        public virtual UnityEngine.UIElements.VisualElement contentContainer { get; }
        protected UnityEditor.GraphToolsFoundation.Overdrive.ContentDragger ContentDragger { get; set; }
        protected UnityEditor.GraphToolsFoundation.Overdrive.ContentZoomer ContentZoomer { get; set; }
        protected UnityEngine.UIElements.ContextualMenuManipulator ContextualMenuManipulator { get; set; }
        public UnityEngine.UIElements.UQueryState<UnityEditor.GraphToolsFoundation.Overdrive.Edge> Edges { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.FreehandSelector FreehandSelector { get; set; }
        public UnityEngine.UIElements.UQueryState<UnityEditor.GraphToolsFoundation.Overdrive.GraphElement> GraphElements { get; }
        public virtual System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IHighlightable> Highlightables { get; }
        public UnityEngine.UIElements.UQueryState<UnityEditor.GraphToolsFoundation.Overdrive.Node> Nodes { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.PlacematContainer PlacematContainer { get; }
        public UnityEngine.UIElements.UQueryState<UnityEditor.GraphToolsFoundation.Overdrive.Port> Ports { get; }
        protected UnityEditor.GraphToolsFoundation.Overdrive.RectangleSelector RectangleSelector { get; set; }
        public virtual System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.ISelectableGraphElement> Selection { get; }
        protected UnityEditor.GraphToolsFoundation.Overdrive.SelectionDragger SelectionDragger { get; set; }
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphView.SerializeGraphElementsDelegate SerializeGraphElementsCallback { get; set; }
        public UnityEditor.GraphToolsFoundation.Overdrive.ShortcutHandler ShortcutHandler { get; set; }
        public UnityEngine.UIElements.UQueryState<UnityEditor.GraphToolsFoundation.Overdrive.StickyNote> Stickies { get; }
        public virtual bool SupportsWindowedBlackboard { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphView.UnserializeAndPasteDelegate UnserializeAndPasteCallback { get; set; }
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphView.ViewTransformChanged ViewTransformChangedCallback { get; set; }
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphViewEditorWindow Window { get; }
        public GraphView(UnityEditor.GraphToolsFoundation.Overdrive.GraphViewEditorWindow window, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, string uniqueGraphViewName = default(string)) {}
        public virtual void AddElement(UnityEditor.GraphToolsFoundation.Overdrive.GraphElement graphElement);
        protected void AddPortalDependency(UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel model);
        protected void AddPositionDependency(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel model);
        public virtual void AddToSelection(UnityEditor.GraphToolsFoundation.Overdrive.ISelectableGraphElement selectable);
        protected virtual void BuildContextualMenu(UnityEngine.UIElements.ContextualMenuPopulateEvent evt);
        public void CalculateFrameTransform(UnityEngine.Rect rectToFit, UnityEngine.Rect clientRect, int border, out UnityEngine.Vector3 frameTranslation, out UnityEngine.Vector3 frameScaling);
        public virtual UnityEngine.Rect CalculateRectToFitAll(UnityEngine.UIElements.VisualElement container);
        protected bool CanPasteSerializedData(string data);
        public virtual void ClearSelection();
        protected virtual void CollectCopyableGraphElements(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.GraphElement> elements, System.Collections.Generic.HashSet<UnityEditor.GraphToolsFoundation.Overdrive.GraphElement> elementsToCopySet);
        protected void CopySelectionCallback();
        protected void CutSelectionCallback();
        public void DeleteSelection(string operationName = Delete);
        public virtual void DisplaySmartSearch(UnityEngine.Vector2 mousePosition);
        protected void DuplicateSelectionCallback();
        protected virtual void ExecuteDefaultAction(UnityEngine.UIElements.EventBase evt);
        public void FrameAll();
        public void FrameNext();
        public void FrameNext(System.Func<UnityEditor.GraphToolsFoundation.Overdrive.GraphElement, bool> predicate);
        public void FrameOrigin();
        public void FramePrev();
        public void FramePrev(System.Func<UnityEditor.GraphToolsFoundation.Overdrive.GraphElement, bool> predicate);
        public void FrameSelection();
        public UnityEditor.GraphToolsFoundation.Overdrive.Blackboard GetBlackboard();
        protected virtual UnityEditor.GraphToolsFoundation.Overdrive.BlackboardDragAndDropHandler GetBlackboardDragAndDropHandler();
        protected virtual UnityEditor.GraphToolsFoundation.Overdrive.IDragAndDropHandler GetExternalDragNDropHandler(UnityEngine.UIElements.DragEnterEvent evt);
        public bool GetPortCenterOverride(UnityEditor.GraphToolsFoundation.Overdrive.Port port, out UnityEngine.Vector2 overriddenPosition);
        protected virtual System.Collections.Generic.Dictionary<UnityEngine.Event, UnityEditor.GraphToolsFoundation.Overdrive.ShortcutDelegate> GetShortcutDictionary();
        protected void OnCustomStyleResolved(UnityEngine.UIElements.CustomStyleResolvedEvent evt);
        protected void OnDoubleClick();
        public virtual void OnDragEnter(UnityEngine.UIElements.DragEnterEvent evt);
        public virtual void OnDragExited(UnityEngine.UIElements.DragExitedEvent e);
        public virtual void OnDragLeave(UnityEngine.UIElements.DragLeaveEvent evt);
        public virtual void OnDragPerform(UnityEngine.UIElements.DragPerformEvent e);
        public virtual void OnDragUpdated(UnityEngine.UIElements.DragUpdatedEvent e);
        protected void OnEnterPanel(UnityEngine.UIElements.AttachToPanelEvent e);
        protected void OnExecuteCommand(UnityEngine.UIElements.ExecuteCommandEvent evt);
        protected void OnLeavePanel(UnityEngine.UIElements.DetachFromPanelEvent e);
        protected void OnMouseMove(UnityEngine.UIElements.MouseMoveEvent evt);
        protected void OnMouseOver(UnityEngine.UIElements.MouseOverEvent evt);
        protected static string OnSerializeGraphElements(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.GraphElement> elements);
        protected void OnValidateCommand(UnityEngine.UIElements.ValidateCommandEvent evt);
        public void PanToNode(UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID nodeGuid);
        protected void PasteCallback();
        public virtual void RemoveElement(UnityEditor.GraphToolsFoundation.Overdrive.GraphElement graphElement, bool unselectBeforeRemove = False);
        public virtual void RemoveFromSelection(UnityEditor.GraphToolsFoundation.Overdrive.ISelectableGraphElement selectable);
        protected void RemovePortalDependency(UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel model);
        protected void RemovePositionDependency(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edgeModel);
        protected string SerializeGraphElements(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.GraphElement> elements);
        public void SetupZoom(float minScaleSetup, float maxScaleSetup, float maxScaleOnFrame);
        public void SetupZoom(float minScaleSetup, float maxScaleSetup, float maxScaleOnFrame, float scaleStepSetup, float referenceScaleSetup);
        public virtual void StopSelectionDragger();
        protected void UnserializeAndPasteOperation(string operationName, string data);
        public virtual void UpdateUI(UnityEditor.GraphToolsFoundation.Overdrive.UIRebuildType rebuildType);
        public void UpdateViewTransform(UnityEngine.Vector3 newPosition, UnityEngine.Vector3 newScale);
        public delegate bool CanPasteSerializedDataDelegate(string data);
        public class Layer : UnityEngine.UIElements.VisualElement
        {
            public Layer() {}
        }
        public delegate string SerializeGraphElementsDelegate(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.GraphElement> elements);
        public delegate void UnserializeAndPasteDelegate(string operationName, string data);
        public delegate void ViewTransformChanged(UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView);
    }

    public class GraphViewBlackboardWindow : UnityEditor.GraphToolsFoundation.Overdrive.GraphViewToolWindow
    {
        protected virtual string ToolName { get; }
        public GraphViewBlackboardWindow() {}
        protected virtual bool IsGraphViewSupported(UnityEditor.GraphToolsFoundation.Overdrive.GraphView gv);
        protected virtual void OnDisable();
        protected virtual void OnEnable();
        protected virtual void OnGraphViewChanged();
        protected virtual void OnGraphViewChanging();
    }

    public class GraphViewEditorWindow : UnityEditor.EditorWindow, UnityEditor.IHasCustomMenu
    {
        public static readonly string graphProcessingPendingUssClassName;
        protected UnityEditor.GraphToolsFoundation.Overdrive.BlankPage m_BlankPage;
        protected UnityEditor.GraphToolsFoundation.Overdrive.ErrorToolbar m_ErrorToolbar;
        protected UnityEngine.UIElements.VisualElement m_GraphContainer;
        protected UnityEngine.UIElements.Label m_GraphProcessingPendingLabel;
        protected UnityEditor.GraphToolsFoundation.Overdrive.GraphView m_GraphView;
        protected UnityEditor.GraphToolsFoundation.Overdrive.MainToolbar m_MainToolbar;
        protected UnityEngine.UIElements.VisualElement m_SidePanel;
        protected UnityEngine.UIElements.Label m_SidePanelTitle;
        public UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher CommandDispatcher { get; }
        public string EditorToolName { get; }
        protected virtual System.Collections.Generic.IEnumerable<System.Type> GraphProcessingTriggerCommands { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphView GraphView { get; }
        public virtual System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.GraphView> GraphViews { get; }
        public UnityEditor.GUID GUID { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.MainToolbar MainToolbar { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.PluginRepository PluginRepository { get; }
        public bool WithSidePanel { get; set; }
        protected GraphViewEditorWindow() {}
        public virtual void AddItemsToMenu(UnityEditor.GenericMenu menu);
        public void AdjustWindowMinSize(UnityEngine.Vector2 size);
        protected virtual bool CanHandleAssetType(UnityEditor.GraphToolsFoundation.Overdrive.GraphAssetModel asset);
        public void ClearNodeInSidePanel();
        protected virtual UnityEditor.GraphToolsFoundation.Overdrive.BlankPage CreateBlankPage();
        protected virtual UnityEditor.GraphToolsFoundation.Overdrive.ErrorToolbar CreateErrorToolbar();
        protected virtual UnityEditor.GraphToolsFoundation.Overdrive.GraphView CreateGraphView();
        protected virtual UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState CreateInitialState();
        protected virtual UnityEditor.GraphToolsFoundation.Overdrive.MainToolbar CreateMainToolbar();
        public static T FindOrCreateGraphWindow<T>() where T : UnityEditor.GraphToolsFoundation.Overdrive.GraphViewEditorWindow;
        public virtual System.Collections.Generic.IEnumerable<System.Type> GetExtraPaneTypes();
        protected virtual void OnDestroy();
        protected virtual void OnDisable();
        protected virtual void OnEnable();
        protected virtual void OnFocus();
        protected virtual void OnLostFocus();
        protected virtual void RegisterCommandHandlers();
        protected virtual void Reset();
        public void SetCurrentSelection(string graphAssetFilePath, UnityEditor.GraphToolsFoundation.Overdrive.GraphViewEditorWindow.OpenMode mode, UnityEngine.GameObject boundObject = default(UnityEngine.GameObject));
        public static void ShowGraphViewWindowWithTools<T>() where T : UnityEditor.GraphToolsFoundation.Overdrive.GraphViewEditorWindow;
        public void ShowNodeInSidePanel(UnityEditor.GraphToolsFoundation.Overdrive.ISelectableGraphElement selectable, bool show);
        public virtual void UnloadGraph();
        public void UnloadGraphIfDeleted();
        protected virtual void Update();
        protected void UpdateGraphContainer();
        public enum OpenMode
        {
            public const UnityEditor.GraphToolsFoundation.Overdrive.GraphViewEditorWindow.OpenMode Open = 0;
            public const UnityEditor.GraphToolsFoundation.Overdrive.GraphViewEditorWindow.OpenMode OpenAndFocus = 1;
            public int value__;
        }
    }

    public class GraphViewMinimapWindow : UnityEditor.GraphToolsFoundation.Overdrive.GraphViewToolWindow
    {
        protected virtual string ToolName { get; }
        public GraphViewMinimapWindow() {}
        protected virtual bool IsGraphViewSupported(UnityEditor.GraphToolsFoundation.Overdrive.GraphView gv);
        protected virtual void OnDestroy();
        protected virtual void OnEnable();
        protected virtual void OnGraphViewChanged();
        protected virtual void OnGraphViewChanging();
    }

    public class GraphViewSettings
    {
        public GraphViewSettings() {}
    }

    public abstract class GraphViewToolWindow : UnityEditor.GraphToolsFoundation.Overdrive.Bridge.GraphViewToolWindowBridge
    {
        protected UnityEditor.GraphToolsFoundation.Overdrive.GraphView m_SelectedGraphView;
        protected UnityEngine.UIElements.VisualElement m_ToolbarContainer;
        public UnityEditor.GUID GUID { get; }
        protected abstract string ToolName { get; }
        protected GraphViewToolWindow() {}
        public virtual System.Collections.Generic.IEnumerable<System.Type> GetExtraPaneTypes();
        protected virtual bool IsGraphViewSupported(UnityEditor.GraphToolsFoundation.Overdrive.GraphView gv);
        protected virtual void OnDestroy();
        protected virtual void OnDisable();
        protected virtual void OnEnable();
        protected abstract void OnGraphViewChanged();
        protected abstract void OnGraphViewChanging();
        public virtual void SelectGraphViewFromWindow(UnityEditor.EditorWindow window, UnityEditor.GraphToolsFoundation.Overdrive.Bridge.GraphViewBridge graphView, int graphViewIndexInWindow = 0);
        protected virtual void Update();
    }

    public class GridBackground : UnityEngine.UIElements.ImmediateModeElement
    {
        public float Spacing { get; }
        public GridBackground() {}
        protected virtual void ImmediateRepaint();
    }

    [System.Runtime.CompilerServices.Extension] public static class HighlightHelper
    {
        [System.Runtime.CompilerServices.Extension] public static void ClearGraphElementsHighlight(UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView);
        [System.Runtime.CompilerServices.Extension] public static void ClearGraphElementsHighlight(UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView, System.Func<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, bool> predicate);
        [System.Runtime.CompilerServices.Extension] public static void HighlightGraphElements(UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView);
    }

    public interface IBadgeModel : UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel
    {
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel ParentModel { get; }
    }

    public interface IBlackboardGraphModel : UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel
    {
        public abstract System.Collections.Generic.IEnumerable<string> SectionNames { get; }
        public abstract bool Valid { get; }
        public abstract string GetBlackboardSubTitle();
        public abstract string GetBlackboardTitle();
        public abstract System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel> GetSectionRows(string sectionName);
        public abstract void PopulateCreateMenu(string sectionName, UnityEditor.GenericMenu menu, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher);
    }

    public interface ICloneable : UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel
    {
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel Clone();
    }

    [System.Runtime.CompilerServices.Extension] public static class ICloneableExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static T Clone<T>(T element) where T : UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel;
        [System.Runtime.CompilerServices.Extension] public static T CloneConstant<T>(T element) where T : UnityEditor.GraphToolsFoundation.Overdrive.IConstant;
        public static T CloneUsingScriptableObjectInstantiate<T>(T element) where T : UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel;
    }

    public interface ICollapsible
    {
        public abstract bool Collapsed { get; set; }
    }

    public interface IConstant
    {
        public abstract object DefaultValue { get; }
        public abstract object ObjectValue { get; set; }
        public abstract System.Type Type { get; }
    }

    public interface IConstantEditorBuilder
    {
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher CommandDispatcher { get; }
        public abstract bool ConstantIsLocked { get; }
        public abstract System.Action<UnityEngine.UIElements.IChangeEvent> OnValueChanged { get; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IPortModel PortModel { get; }
    }

    public interface IConstantNodeModel : UnityEditor.GraphToolsFoundation.Overdrive.IDestroyable, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IHasMainOutputPort, UnityEditor.GraphToolsFoundation.Overdrive.IInOutPortsNode, UnityEditor.GraphToolsFoundation.Overdrive.IMovable, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel, UnityEditor.GraphToolsFoundation.Overdrive.IPortNode, UnityEditor.GraphToolsFoundation.Overdrive.ISingleOutputPortNode
    {
        public abstract bool IsLocked { get; set; }
        public abstract object ObjectValue { get; set; }
        public abstract System.Type Type { get; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IConstant Value { get; }
        public abstract void PredefineSetup();
        public abstract void SetValue<T>(T value);
    }

    public class IconTitleProgressPart : UnityEditor.GraphToolsFoundation.Overdrive.EditableTitlePart
    {
        public static readonly string collapseButtonPartName;
        public UnityEditor.UIElements.ProgressBar CoroutineProgressBar;
        public static readonly string ussClassName;
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected IconTitleProgressPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement container);
        public static UnityEditor.GraphToolsFoundation.Overdrive.IconTitleProgressPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI, string parentClassName);
        protected virtual void PostBuildPartUI();
        protected virtual void UpdatePartFromModel();
    }

    public interface ICustomSearcherHandler
    {
        public abstract bool HandleCustomSearcher(UnityEngine.Vector2 mousePosition, UnityEditor.GraphToolsFoundation.Overdrive.SearcherFilter filter = default(UnityEditor.GraphToolsFoundation.Overdrive.SearcherFilter));
    }

    public interface IDebugger
    {
        public abstract System.Collections.Generic.IEnumerable<int> GetDebuggingTargets(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IGraphTrace GetGraphTrace(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel assetModelGraphModel, int currentTracingTarget);
        public abstract string GetTargetLabel(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel, int target);
        public abstract bool GetTracingSteps(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel currentGraphModel, int frame, int tracingTarget, out System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.TracingStep> stepList);
        public abstract void OnToggleTracing(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel currentGraphModel, bool enabled);
        public abstract void Start(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel, bool tracingEnabled);
        public abstract void Stop();
    }

    public interface IDeclarationModel : UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IHasTitle
    {
    }

    public interface IDestroyable
    {
        public abstract bool Destroyed { get; }
        public abstract void Destroy();
    }

    public interface IDocumentIndexer
    {
        public abstract void IndexField<T>(string fieldName, T fieldValue);
    }

    [JetBrains.Annotations.PublicAPI] public interface IDragAndDropHandler
    {
        public abstract void OnDragEnter(UnityEngine.UIElements.DragEnterEvent evt);
        public abstract void OnDragExited(UnityEngine.UIElements.DragExitedEvent evt);
        public abstract void OnDragLeave(UnityEngine.UIElements.DragLeaveEvent evt);
        public abstract void OnDragPerform(UnityEngine.UIElements.DragPerformEvent evt);
        public abstract void OnDragUpdated(UnityEngine.UIElements.DragUpdatedEvent evt);
    }

    public interface IEdgeControlPointModel
    {
        public abstract UnityEngine.Vector2 Position { get; set; }
        public abstract float Tightness { get; set; }
    }

    public interface IEdgeModel : UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel
    {
        public abstract string EdgeLabel { get; set; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID FromNodeGuid { get; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IPortModel FromPort { get; set; }
        public abstract string FromPortId { get; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID ToNodeGuid { get; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IPortModel ToPort { get; set; }
        public abstract string ToPortId { get; }
        public abstract void ResetPorts();
        public abstract void SetPorts(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel toPortModel, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel fromPortModel);
        public abstract System.ValueTuple<UnityEditor.GraphToolsFoundation.Overdrive.PortMigrationResult, UnityEditor.GraphToolsFoundation.Overdrive.PortMigrationResult> TryMigratePorts(out UnityEditor.GraphToolsFoundation.Overdrive.INodeModel inputNode, out UnityEditor.GraphToolsFoundation.Overdrive.INodeModel outputNode);
    }

    public interface IEdgePortalEntryModel : UnityEditor.GraphToolsFoundation.Overdrive.IDestroyable, UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IHasDeclarationModel, UnityEditor.GraphToolsFoundation.Overdrive.IHasTitle, UnityEditor.GraphToolsFoundation.Overdrive.IInOutPortsNode, UnityEditor.GraphToolsFoundation.Overdrive.IMovable, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel, UnityEditor.GraphToolsFoundation.Overdrive.IPortNode, UnityEditor.GraphToolsFoundation.Overdrive.ISingleInputPortNode
    {
    }

    public interface IEdgePortalExitModel : UnityEditor.GraphToolsFoundation.Overdrive.IDestroyable, UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IHasDeclarationModel, UnityEditor.GraphToolsFoundation.Overdrive.IHasTitle, UnityEditor.GraphToolsFoundation.Overdrive.IInOutPortsNode, UnityEditor.GraphToolsFoundation.Overdrive.IMovable, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel, UnityEditor.GraphToolsFoundation.Overdrive.IPortNode, UnityEditor.GraphToolsFoundation.Overdrive.ISingleOutputPortNode
    {
    }

    public interface IEdgePortalModel : UnityEditor.GraphToolsFoundation.Overdrive.IDestroyable, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IHasDeclarationModel, UnityEditor.GraphToolsFoundation.Overdrive.IHasTitle, UnityEditor.GraphToolsFoundation.Overdrive.IMovable, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel
    {
        public abstract int EvaluationOrder { get; }
        public abstract bool CanCreateOppositePortal();
    }

    public interface IEditableEdge : UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IMovable
    {
        public abstract System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeControlPointModel> EdgeControlPoints { get; }
        public abstract bool EditMode { get; set; }
        public abstract void InsertEdgeControlPoint(int atIndex, UnityEngine.Vector2 point, float tightness);
        public abstract void ModifyEdgeControlPoint(int index, UnityEngine.Vector2 point, float tightness);
        public abstract void RemoveEdgeControlPoint(int index);
    }

    [System.Runtime.CompilerServices.Extension] public static class IEnumerableExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static int IndexOf<T>(System.Collections.Generic.IEnumerable<T> source, T element);
    }

    public interface IErrorBadgeModel : UnityEditor.GraphToolsFoundation.Overdrive.IBadgeModel, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel
    {
        public abstract string ErrorMessage { get; }
    }

    public interface IFrameData
    {
        public abstract int Frame { get; }
        public abstract System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.TracingStep> GetDebuggingSteps(UnityEditor.GraphToolsFoundation.Overdrive.Stencil stencil);
    }

    public interface IGhostEdge
    {
        public abstract UnityEngine.Vector2 EndPoint { get; }
    }

    public interface IGraphAssetModel : System.IDisposable
    {
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IBlackboardGraphModel BlackboardGraphModel { get; }
        public abstract string FriendlyScriptName { get; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel GraphModel { get; }
        public abstract string Name { get; set; }
        public abstract void CreateGraph(string graphName, System.Type stencilType = default(System.Type), bool writeOnDisk = True);
    }

    public static class IGraphAssetModelHelper
    {
        public static AssetT Create<AssetT>(string assetName, string assetPath, bool writeOnDisk = True) where AssetT : class, UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel;
        public static UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel Create(string assetName, string assetPath, System.Type assetTypeToCreate, bool writeOnDisk = True);
    }

    public interface IGraphElement : UnityEditor.GraphToolsFoundation.Overdrive.IModelUI
    {
    }

    public interface IGraphElementModel
    {
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel AssetModel { get; set; }
        public abstract System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.Capabilities> Capabilities { get; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel GraphModel { get; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID Guid { get; set; }
        public abstract void AssignNewGuid();
    }

    public interface IGraphModel : System.IDisposable
    {
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel AssetModel { get; set; }
        public abstract System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IBadgeModel> BadgeModels { get; }
        public abstract System.Type DefaultStencilType { get; }
        public abstract System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> EdgeModels { get; }
        public abstract string Name { get; set; }
        public abstract System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel> NodeModels { get; }
        public abstract System.Collections.Generic.IReadOnlyDictionary<UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel> NodesByGuid { get; }
        public abstract System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IPlacematModel> PlacematModels { get; }
        public abstract System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IDeclarationModel> PortalDeclarations { get; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.Stencil Stencil { get; }
        public abstract System.Type StencilType { get; set; }
        public abstract System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IStickyNoteModel> StickyNoteModels { get; }
        public abstract System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel> VariableDeclarations { get; }
        public abstract void AddBadge(UnityEditor.GraphToolsFoundation.Overdrive.IBadgeModel badgeModel);
        public abstract bool CheckIntegrity(UnityEditor.GraphToolsFoundation.Overdrive.Verbosity errors);
        public abstract void CloneGraph(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel sourceGraphModel);
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IConstantNodeModel CreateConstantNode(UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle constantTypeHandle, string constantName, UnityEngine.Vector2 position, UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID guid = default(UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID), System.Action<UnityEditor.GraphToolsFoundation.Overdrive.IConstantNodeModel> preDefine = default(System.Action<UnityEditor.GraphToolsFoundation.Overdrive.IConstantNodeModel>), UnityEditor.GraphToolsFoundation.Overdrive.SpawnFlags spawnFlags = 0);
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel CreateEdge(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel toPort, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel fromPort);
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalEntryModel CreateEntryPortalFromEdge(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edgeModel);
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalExitModel CreateExitPortalFromEdge(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edgeModel);
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IDeclarationModel CreateGraphPortalDeclaration(string portalName, UnityEditor.GraphToolsFoundation.Overdrive.SpawnFlags spawnFlags = 0);
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel CreateGraphVariableDeclaration(UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle variableDataType, string variableName, UnityEditor.GraphToolsFoundation.Overdrive.ModifierFlags modifierFlags, bool isExposed, UnityEditor.GraphToolsFoundation.Overdrive.IConstant initializationModel = default(UnityEditor.GraphToolsFoundation.Overdrive.IConstant), UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID guid = default(UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID));
        public abstract void CreateItemizedNode(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, int nodeOffset, ref UnityEditor.GraphToolsFoundation.Overdrive.IPortModel outputPortModel);
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.INodeModel CreateNode(System.Type nodeTypeToCreate, string nodeName, UnityEngine.Vector2 position, UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID guid = default(UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID), System.Action<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel> preDefine = default(System.Action<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel>), UnityEditor.GraphToolsFoundation.Overdrive.SpawnFlags spawnFlags = 0);
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel CreateOppositePortal(UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel edgePortalModel, UnityEngine.Vector2 position, UnityEditor.GraphToolsFoundation.Overdrive.SpawnFlags spawnFlags = 0);
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IPlacematModel CreatePlacemat(UnityEngine.Rect position, UnityEditor.GraphToolsFoundation.Overdrive.SpawnFlags spawnFlags = 0);
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IStickyNoteModel CreateStickyNote(UnityEngine.Rect position, UnityEditor.GraphToolsFoundation.Overdrive.SpawnFlags spawnFlags = 0);
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IVariableNodeModel CreateVariableNode(UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel declarationModel, UnityEngine.Vector2 position, UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID guid = default(UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID), UnityEditor.GraphToolsFoundation.Overdrive.SpawnFlags spawnFlags = 0);
        public abstract System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> DeleteBadges();
        public abstract System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> DeleteBadgesOfType<T>() where T : UnityEditor.GraphToolsFoundation.Overdrive.IBadgeModel;
        public abstract System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> DeleteEdges(System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> edgeModels);
        public abstract System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> DeleteNodes(System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel> nodeModels, bool deleteConnections);
        public abstract System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> DeletePlacemats(System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IPlacematModel> placematModels);
        public abstract System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> DeleteStickyNotes(System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IStickyNoteModel> stickyNotesModels);
        public abstract System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> DeleteVariableDeclarations(System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel> variableModels, bool deleteUsages);
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel DuplicateEdge(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel sourceEdge, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel targetInputNode, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel targetOutputNode);
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel DuplicateGraphVariableDeclaration(UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel sourceModel);
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.INodeModel DuplicateNode(UnityEditor.GraphToolsFoundation.Overdrive.INodeModel sourceNode, UnityEngine.Vector2 delta);
        public abstract System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> GetCompatiblePorts(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel startPortModel);
        public abstract void OnAfterDeserializeAssetModel();
        public abstract void OnDisable();
        public abstract void OnEnable();
        public abstract void UndoRedoPerformed();
    }

    public interface IGraphNodeCreationData
    {
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel GraphModel { get; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID Guid { get; }
        public abstract UnityEngine.Vector2 Position { get; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.SpawnFlags SpawnFlags { get; }
    }

    public interface IGraphTemplate
    {
        public abstract string DefaultAssetName { get; }
        public abstract string GraphTypeName { get; }
        public abstract System.Type StencilType { get; }
        public abstract void InitBasicGraph(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
    }

    public interface IGraphTrace
    {
        public abstract System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IFrameData> AllFrames { get; }
    }

    public interface IHasDeclarationModel
    {
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IDeclarationModel DeclarationModel { get; set; }
    }

    public interface IHasMainExecutionInputPort
    {
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IPortModel ExecutionInputPort { get; }
    }

    public interface IHasMainExecutionOutputPort
    {
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IPortModel ExecutionOutputPort { get; }
    }

    public interface IHasMainInputPort
    {
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IPortModel MainInputPort { get; }
    }

    public interface IHasMainOutputPort
    {
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IPortModel MainOutputPort { get; }
    }

    public interface IHasProgress
    {
        public abstract bool HasProgress { get; }
    }

    public interface IHasTitle
    {
        public abstract string DisplayTitle { get; }
        public abstract string Title { get; set; }
    }

    public interface IHighlightable
    {
        public abstract bool Highlighted { get; set; }
        public abstract bool ShouldHighlightItemUsage(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel graphElementModel);
    }

    public interface IIndexableSearcherDatabaseProvider : UnityEditor.GraphToolsFoundation.Overdrive.ISearcherDatabaseProvider
    {
        public abstract bool Index<T>(UnityEditor.GraphToolsFoundation.Overdrive.GraphNodeModelSearcherItem item, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, ref T indexer) where T : System.ValueType, UnityEditor.GraphToolsFoundation.Overdrive.IDocumentIndexer, new();
    }

    public interface IInOutPortsNode : UnityEditor.GraphToolsFoundation.Overdrive.IDestroyable, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IMovable, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel, UnityEditor.GraphToolsFoundation.Overdrive.IPortNode
    {
        public abstract System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> InputsByDisplayOrder { get; }
        public abstract System.Collections.Generic.IReadOnlyDictionary<string, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> InputsById { get; }
        public abstract System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> OutputsByDisplayOrder { get; }
        public abstract System.Collections.Generic.IReadOnlyDictionary<string, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> OutputsById { get; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IPortModel AddInputPort(string portName, UnityEditor.GraphToolsFoundation.Overdrive.PortType portType, UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle dataType, string portId = default(string), UnityEditor.GraphToolsFoundation.Overdrive.PortModelOptions options = 0, System.Action<UnityEditor.GraphToolsFoundation.Overdrive.IConstant> preDefine = default(System.Action<UnityEditor.GraphToolsFoundation.Overdrive.IConstant>));
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IPortModel AddOutputPort(string portName, UnityEditor.GraphToolsFoundation.Overdrive.PortType portType, UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle dataType, string portId = default(string), UnityEditor.GraphToolsFoundation.Overdrive.PortModelOptions options = 0);
    }

    public interface IMigratePorts
    {
        public abstract bool MigratePort(ref string portReferenceUniqueId, UnityEditor.GraphToolsFoundation.Overdrive.Direction direction);
    }

    public interface IModelUI
    {
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher CommandDispatcher { get; }
        public abstract string Context { get; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.GraphView GraphView { get; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel Model { get; }
        public abstract void AddBackwardDependencies();
        public abstract void AddForwardDependencies();
        public abstract void AddModelDependencies();
        public abstract void AddToGraphView(UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView);
        public abstract void BuildUI();
        public abstract void RemoveFromGraphView();
        public abstract void Setup(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView, string context);
        public abstract void SetupBuildAndUpdate(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView, string context);
        public abstract void UpdateFromModel();
    }

    public interface IModelUIPart
    {
        public abstract string PartName { get; }
        public abstract UnityEngine.UIElements.VisualElement Root { get; }
        public abstract void BuildUI(UnityEngine.UIElements.VisualElement parent);
        public abstract void OwnerAddedToView();
        public abstract void OwnerRemovedFromView();
        public abstract void PostBuildUI();
        public abstract void UpdateFromModel();
    }

    public interface IMovable
    {
        public abstract UnityEngine.Vector2 Position { get; set; }
        public abstract void Move(UnityEngine.Vector2 delta);
    }

    public class InitializeVariableCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel VariableDeclarationModel;
        public InitializeVariableCommand() {}
        public InitializeVariableCommand(UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel variableDeclarationModel) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.InitializeVariableCommand command);
    }

    [JetBrains.Annotations.PublicAPI] public static class InlineValueEditor
    {
        public static UnityEngine.UIElements.VisualElement CreateEditorForConstant(UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel graphAsset, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel, UnityEditor.GraphToolsFoundation.Overdrive.IConstant constant, System.Action<UnityEngine.UIElements.IChangeEvent, object> onValueChanged, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, bool modelIsLocked);
        public static UnityEngine.UIElements.VisualElement CreateEditorForNodeModel(UnityEditor.GraphToolsFoundation.Overdrive.IConstantNodeModel model, System.Action<UnityEngine.UIElements.IChangeEvent, object> onValueChanged, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher);
    }

    public interface INodeModel : UnityEditor.GraphToolsFoundation.Overdrive.IDestroyable, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IMovable
    {
        public abstract bool AllowSelfConnect { get; }
        public abstract UnityEngine.Color Color { get; set; }
        public abstract bool HasProgress { get; }
        public abstract bool HasUserColor { get; set; }
        public abstract string IconTypeString { get; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.ModelState State { get; set; }
        public abstract string Tooltip { get; }
        public abstract System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> GetConnectedEdges();
        public abstract void OnAfterDeserializeAssetModel();
        public abstract void OnCreateNode();
        public abstract void OnDuplicateNode(UnityEditor.GraphToolsFoundation.Overdrive.INodeModel sourceNode);
    }

    public class InOutPortContainerPart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        public static readonly string inputPortsUssName;
        protected UnityEditor.GraphToolsFoundation.Overdrive.PortContainer m_InputPortContainer;
        protected UnityEditor.GraphToolsFoundation.Overdrive.PortContainer m_OutputPortContainer;
        public static readonly string outputPortsUssName;
        public static readonly string ussClassName;
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected InOutPortContainerPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement container);
        public static UnityEditor.GraphToolsFoundation.Overdrive.InOutPortContainerPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI, string parentClassName);
        protected virtual void PostBuildPartUI();
        protected virtual void UpdatePartFromModel();
    }

    public class IntPref : UnityEditor.GraphToolsFoundation.Overdrive.Enumeration
    {
        [JetBrains.Annotations.PublicAPI] protected static readonly int k_ToolBasePrefId;
        protected IntPref(int id, string name, string[] obsoleteNames = default(string[])) {}
    }

    public interface IPlacematModel : UnityEditor.GraphToolsFoundation.Overdrive.ICollapsible, UnityEditor.GraphToolsFoundation.Overdrive.IDestroyable, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IHasTitle, UnityEditor.GraphToolsFoundation.Overdrive.IMovable, UnityEditor.GraphToolsFoundation.Overdrive.IRenamable, UnityEditor.GraphToolsFoundation.Overdrive.IResizable
    {
        public abstract UnityEngine.Color Color { get; set; }
        public abstract System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> HiddenElements { get; set; }
        public abstract int ZOrder { get; set; }
        public abstract void ResetColor();
    }

    public interface IPluginHandler
    {
        public abstract void OptionsMenu(UnityEditor.GenericMenu menu);
        public abstract void Register(UnityEditor.GraphToolsFoundation.Overdrive.GraphViewEditorWindow window);
        public abstract void Unregister();
    }

    public interface IPortModel : UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel
    {
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.PortCapacity Capacity { get; }
        public abstract bool CreateEmbeddedValueIfNeeded { get; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle DataTypeHandle { get; set; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.Direction Direction { get; set; }
        public abstract bool DisableEmbeddedValueEditor { get; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IConstant EmbeddedValue { get; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IPortNode NodeModel { get; set; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.PortModelOptions Options { get; set; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.Orientation Orientation { get; set; }
        public abstract System.Type PortDataType { get; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.PortType PortType { get; set; }
        public abstract string ToolTip { get; set; }
        public abstract string UniqueName { get; }
        public abstract System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> GetConnectedEdges();
        public abstract System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> GetConnectedPorts();
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.PortCapacity GetDefaultCapacity();
        public abstract bool IsConnectedTo(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel toPort);
    }

    public interface IPortNode : UnityEditor.GraphToolsFoundation.Overdrive.IDestroyable, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IMovable, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel
    {
        public abstract System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> Ports { get; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IPortModel CreatePort(UnityEditor.GraphToolsFoundation.Overdrive.Direction direction, string portName, UnityEditor.GraphToolsFoundation.Overdrive.PortType portType, UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle dataType, string portId, UnityEditor.GraphToolsFoundation.Overdrive.PortModelOptions options);
        public abstract void DeletePort(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel, bool removeFromOrderedPorts = False);
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.PortCapacity GetPortCapacity(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel);
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IPortModel GetPortFitToConnectTo(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel);
        public abstract void OnConnection(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel selfConnectedPortModel, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel otherConnectedPortModel);
        public abstract void OnDisconnection(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel selfConnectedPortModel, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel otherConnectedPortModel);
    }

    public interface IPropertyVisitorNodeTarget
    {
        public abstract object Target { get; set; }
    }

    public interface IRenamable
    {
        public abstract void Rename(string newName);
    }

    public interface IReorderableEdgesPort : UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel
    {
        public abstract bool HasReorderableEdges { get; }
        public abstract void MoveEdgeDown(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edge);
        public abstract void MoveEdgeFirst(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edge);
        public abstract void MoveEdgeLast(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edge);
        public abstract void MoveEdgeUp(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edge);
    }

    public interface IResizable
    {
        public abstract UnityEngine.Rect PositionAndSize { get; set; }
    }

    public interface IResizableGraphElement
    {
        public abstract void OnResized(UnityEngine.Rect newRect, UnityEditor.GraphToolsFoundation.Overdrive.ResizeFlags resizeWhat);
    }

    public interface ISearcherDatabaseProvider
    {
        public abstract System.Collections.Generic.List<UnityEditor.Searcher.SearcherDatabaseBase> GetDynamicSearcherDatabases(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel);
        public abstract System.Collections.Generic.List<UnityEditor.Searcher.SearcherDatabaseBase> GetGraphElementsSearcherDatabases(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
        public abstract System.Collections.Generic.List<UnityEditor.Searcher.SearcherDatabaseBase> GetGraphVariablesSearcherDatabases(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
        public abstract System.Collections.Generic.List<UnityEditor.Searcher.SearcherDatabase> GetVariableTypesSearcherDatabases();
    }

    public interface ISearcherFilterProvider
    {
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.SearcherFilter GetEdgeSearcherFilter(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edgeModel);
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.SearcherFilter GetGraphSearcherFilter();
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.SearcherFilter GetInputToGraphSearcherFilter(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel);
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.SearcherFilter GetOutputToGraphSearcherFilter(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel);
    }

    public interface ISearcherItemData
    {
    }

    public interface ISearcherItemDataProvider
    {
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.ISearcherItemData Data { get; }
    }

    public interface ISearchWindowProvider
    {
        public abstract System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.SearchTreeEntry> CreateSearchTree(UnityEditor.GraphToolsFoundation.Overdrive.SearchWindowContext context);
        public abstract bool OnSelectEntry(UnityEditor.GraphToolsFoundation.Overdrive.SearchTreeEntry SearchTreeEntry, UnityEditor.GraphToolsFoundation.Overdrive.SearchWindowContext context);
    }

    public interface ISelectableGraphElement : UnityEditor.GraphToolsFoundation.Overdrive.IGraphElement, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI
    {
        public abstract bool IsSelectable();
        public abstract bool IsSelected(UnityEngine.UIElements.VisualElement selectionContainer);
        public abstract void Select(UnityEngine.UIElements.VisualElement selectionContainer, bool additive);
        public abstract void Unselect(UnityEngine.UIElements.VisualElement selectionContainer);
    }

    public interface ISelection
    {
        public abstract System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.ISelectableGraphElement> Selection { get; }
        public abstract void AddToSelection(UnityEditor.GraphToolsFoundation.Overdrive.ISelectableGraphElement selectable);
        public abstract void ClearSelection();
        public abstract void RemoveFromSelection(UnityEditor.GraphToolsFoundation.Overdrive.ISelectableGraphElement selectable);
    }

    public interface ISingleInputPortNode : UnityEditor.GraphToolsFoundation.Overdrive.IDestroyable, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IInOutPortsNode, UnityEditor.GraphToolsFoundation.Overdrive.IMovable, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel, UnityEditor.GraphToolsFoundation.Overdrive.IPortNode
    {
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IPortModel InputPort { get; }
    }

    public interface ISingleOutputPortNode : UnityEditor.GraphToolsFoundation.Overdrive.IDestroyable, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IInOutPortsNode, UnityEditor.GraphToolsFoundation.Overdrive.IMovable, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel, UnityEditor.GraphToolsFoundation.Overdrive.IPortNode
    {
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IPortModel OutputPort { get; }
    }

    public interface IStickyNoteModel : UnityEditor.GraphToolsFoundation.Overdrive.IDestroyable, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IHasTitle, UnityEditor.GraphToolsFoundation.Overdrive.IMovable, UnityEditor.GraphToolsFoundation.Overdrive.IRenamable, UnityEditor.GraphToolsFoundation.Overdrive.IResizable
    {
        public abstract string Contents { get; set; }
        public abstract string TextSize { get; set; }
        public abstract string Theme { get; set; }
    }

    public interface IStringWrapperConstantModel : UnityEditor.GraphToolsFoundation.Overdrive.IConstant
    {
        public abstract string Label { get; }
        public abstract string StringValue { get; set; }
    }

    public class ItemizeNodeCommand : UnityEditor.GraphToolsFoundation.Overdrive.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.ISingleOutputPortNode>
    {
        public ItemizeNodeCommand() {}
        public ItemizeNodeCommand(params UnityEditor.GraphToolsFoundation.Overdrive.ISingleOutputPortNode[] models) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.ItemizeNodeCommand command);
    }

    public interface IToolbarProvider
    {
        public abstract bool ShowButton(string buttonName);
    }

    public interface ITypeMetadata
    {
        public abstract string FriendlyName { get; }
        public abstract bool IsClass { get; }
        public abstract bool IsEnum { get; }
        public abstract bool IsValueType { get; }
        public abstract string Namespace { get; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle TypeHandle { get; }
        public abstract bool IsAssignableFrom(System.Type type);
        public abstract bool IsAssignableFrom(UnityEditor.GraphToolsFoundation.Overdrive.ITypeMetadata metadata);
        public abstract bool IsAssignableTo(System.Type type);
        public abstract bool IsSubclassOf(System.Type type);
        public abstract bool IsSuperclassOf(System.Type type);
    }

    public interface ITypeMetadataResolver
    {
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.ITypeMetadata Resolve(UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle th);
    }

    public interface IValueBadgeModel : UnityEditor.GraphToolsFoundation.Overdrive.IBadgeModel, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel
    {
        public abstract string DisplayValue { get; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IPortModel ParentPortModel { get; }
    }

    public interface IVariableDeclarationMetadataModel
    {
    }

    public interface IVariableDeclarationModel : UnityEditor.GraphToolsFoundation.Overdrive.IDeclarationModel, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IHasTitle
    {
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle DataType { get; set; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IConstant InitializationModel { get; }
        public abstract bool IsExposed { get; set; }
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.ModifierFlags Modifiers { get; }
        public abstract string Tooltip { get; set; }
        public abstract string VariableName { get; }
        public abstract void CreateInitializationValue();
        public abstract T GetMetadataModel<T>() where T : UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationMetadataModel;
        public abstract void SetMetadataModel<T>(T value) where T : UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationMetadataModel;
    }

    public interface IVariableNodeModel : UnityEditor.GraphToolsFoundation.Overdrive.IDestroyable, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IHasDeclarationModel, UnityEditor.GraphToolsFoundation.Overdrive.IHasTitle, UnityEditor.GraphToolsFoundation.Overdrive.IInOutPortsNode, UnityEditor.GraphToolsFoundation.Overdrive.IMovable, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel, UnityEditor.GraphToolsFoundation.Overdrive.IPortNode, UnityEditor.GraphToolsFoundation.Overdrive.ISingleInputPortNode, UnityEditor.GraphToolsFoundation.Overdrive.ISingleOutputPortNode
    {
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel VariableDeclarationModel { get; }
        public abstract void UpdateTypeFromDeclaration();
    }

    [System.Runtime.CompilerServices.Extension] public static class IVariableNodeModelExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle GetDataType(UnityEditor.GraphToolsFoundation.Overdrive.IVariableNodeModel self);
    }

    public class LinkedNodesDependency : UnityEditor.GraphToolsFoundation.Overdrive.IDependency
    {
        public int count;
        public UnityEditor.GraphToolsFoundation.Overdrive.IPortModel DependentPort;
        public UnityEditor.GraphToolsFoundation.Overdrive.IPortModel ParentPort;
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.INodeModel DependentNode { get; }
        public LinkedNodesDependency() {}
    }

    public class LoadGraphAssetCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel Asset;
        public readonly string AssetPath;
        public readonly UnityEngine.GameObject BoundObject;
        public readonly long FileId;
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.LoadGraphAssetCommand.Type LoadType;
        public LoadGraphAssetCommand(UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel assetModel, UnityEngine.GameObject boundObject = default(UnityEngine.GameObject), UnityEditor.GraphToolsFoundation.Overdrive.LoadGraphAssetCommand.Type loadType = 0) {}
        public LoadGraphAssetCommand(string assetPath, UnityEngine.GameObject boundObject = default(UnityEngine.GameObject), UnityEditor.GraphToolsFoundation.Overdrive.LoadGraphAssetCommand.Type loadType = 0, long filedId = 0) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.LoadGraphAssetCommand command);
        public enum Type
        {
            public const UnityEditor.GraphToolsFoundation.Overdrive.LoadGraphAssetCommand.Type KeepHistory = 2;
            public const UnityEditor.GraphToolsFoundation.Overdrive.LoadGraphAssetCommand.Type PushOnStack = 1;
            public const UnityEditor.GraphToolsFoundation.Overdrive.LoadGraphAssetCommand.Type Replace = 0;
            public int value__;
        }
    }

    public class MainToolbar : UnityEditor.GraphToolsFoundation.Overdrive.Toolbar
    {
        public static readonly string BuildAllButton;
        public static readonly string EnableTracingButton;
        protected UnityEditor.UIElements.ToolbarBreadcrumbs m_Breadcrumb;
        protected UnityEditor.UIElements.ToolbarButton m_BuildAllButton;
        protected UnityEditor.UIElements.ToolbarToggle m_EnableTracingButton;
        protected UnityEditor.UIElements.ToolbarButton m_NewGraphButton;
        protected UnityEditor.UIElements.ToolbarButton m_OptionsButton;
        protected UnityEditor.UIElements.ToolbarButton m_SaveAllButton;
        protected UnityEditor.UIElements.ToolbarButton m_ShowBlackboardButton;
        protected UnityEditor.UIElements.ToolbarButton m_ShowMiniMapButton;
        public static readonly string NewGraphButton;
        public static readonly string OptionsButton;
        public static readonly string SaveAllButton;
        public static readonly string ShowBlackboardButton;
        public static readonly string ShowMiniMapButton;
        public MainToolbar(UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView) {}
        protected void BreadcrumbClickedEvent(int i);
        protected virtual void BuildOptionMenu(UnityEditor.GenericMenu menu);
        protected virtual string GetBreadcrumbLabel(int index);
        protected virtual void OnBreadcrumbClick(UnityEditor.GraphToolsFoundation.Overdrive.OpenedGraph graphToLoad);
        protected virtual void UpdateCommonMenu(bool enabled);
        public virtual void UpdateUI();
    }

    public struct MemberInfoValue : System.IEquatable<UnityEditor.GraphToolsFoundation.Overdrive.MemberInfoValue>
    {
        public readonly string Name;
        public MemberInfoValue(UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle reflectedType, UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle underlyingType, string name, System.Reflection.MemberTypes memberType) {}
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEditor.GraphToolsFoundation.Overdrive.MemberInfoValue other);
        public virtual int GetHashCode();
        public static bool operator ==(UnityEditor.GraphToolsFoundation.Overdrive.MemberInfoValue left, UnityEditor.GraphToolsFoundation.Overdrive.MemberInfoValue right);
        public static bool operator !=(UnityEditor.GraphToolsFoundation.Overdrive.MemberInfoValue left, UnityEditor.GraphToolsFoundation.Overdrive.MemberInfoValue right);
        public virtual string ToString();
    }

    [JetBrains.Annotations.PublicAPI] [System.Runtime.CompilerServices.Extension] public static class MemberInfoValueExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.MemberInfoValue ToMemberInfoValue(System.Reflection.MemberInfo mi);
    }

    public class MiniMap : UnityEditor.GraphToolsFoundation.Overdrive.GraphElement
    {
        public static readonly string anchoredModifierClassName;
        protected readonly UnityEngine.Color m_SelectedChildrenColor;
        public static readonly string ussClassName;
        public static readonly string windowedModifierClassName;
        public bool Anchored { get; set; }
        protected UnityEditor.GraphToolsFoundation.Overdrive.Dragger Dragger { get; set; }
        public float MaxHeight { get; set; }
        public float MaxWidth { get; set; }
        public bool Windowed { get; set; }
        public System.Action<string> ZoomFactorTextChanged { get; set; }
        public MiniMap() {}
        public virtual bool IsMovable();
    }

    public class MissingPort
    {
    }

    public abstract class ModelCommand<ModelType> : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public System.Collections.Generic.IReadOnlyList<ModelType> Models;
        protected ModelCommand(string undoString) {}
        protected ModelCommand(string undoStringSingular, string undoStringPlural, System.Collections.Generic.IReadOnlyList<ModelType> models) {}
    }

    public abstract class ModelCommand<ModelType, DataType> : UnityEditor.GraphToolsFoundation.Overdrive.ModelCommand<ModelType>
    {
        public DataType Value;
        protected ModelCommand(string undoString) {}
        protected ModelCommand(string undoStringSingular, string undoStringPlural, System.Collections.Generic.IReadOnlyList<ModelType> models, DataType value) {}
    }

    [System.Runtime.CompilerServices.Extension] public static class ModelDependencies
    {
        [System.Runtime.CompilerServices.Extension] public static void AddDependency(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ui);
        [System.Runtime.CompilerServices.Extension] public static System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IModelUI> GetDependencies(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model);
        [System.Runtime.CompilerServices.Extension] public static void RemoveDependency(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ui);
    }

    public enum ModelState
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.ModelState Disabled = 1;
        public const UnityEditor.GraphToolsFoundation.Overdrive.ModelState Enabled = 0;
        public int value__;
    }

    public abstract class ModelUI : UnityEditor.GraphToolsFoundation.Overdrive.Bridge.VisualElementBridge, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI
    {
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher CommandDispatcher { get; }
        public virtual string Context { get; }
        protected UnityEngine.UIElements.ContextualMenuManipulator ContextualMenuManipulator { get; set; }
        protected UnityEditor.GraphToolsFoundation.Overdrive.UIDependencies Dependencies { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.GraphView GraphView { get; protected set; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel Model { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.ModelUIPartList PartList { get; }
        protected ModelUI() {}
        public virtual void AddBackwardDependencies();
        public virtual void AddForwardDependencies();
        public virtual void AddModelDependencies();
        public virtual void AddToGraphView(UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView);
        protected virtual void BuildContextualMenu(UnityEngine.UIElements.ContextualMenuPopulateEvent evt);
        protected virtual void BuildElementUI();
        protected virtual void BuildPartList();
        public virtual void BuildUI();
        protected virtual void ClearElementUI();
        protected virtual void PostBuildUI();
        public virtual void RemoveFromGraphView();
        public virtual void Setup(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView, string context);
        public virtual void SetupBuildAndUpdate(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView, string context = default(string));
        protected virtual void UpdateElementFromModel();
        public virtual void UpdateFromModel();
    }

    public class ModelUIPartList : System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IModelUIPart>, System.Collections.IEnumerable
    {
        public ModelUIPartList() {}
        public void AppendPart(UnityEditor.GraphToolsFoundation.Overdrive.IModelUIPart child);
        public virtual System.Collections.Generic.IEnumerator<UnityEditor.GraphToolsFoundation.Overdrive.IModelUIPart> GetEnumerator();
        public UnityEditor.GraphToolsFoundation.Overdrive.IModelUIPart GetPart(string name);
        public void InsertPartAfter(string afterChild, UnityEditor.GraphToolsFoundation.Overdrive.IModelUIPart child);
        public void InsertPartBefore(string beforeChild, UnityEditor.GraphToolsFoundation.Overdrive.IModelUIPart child);
        public void RemovePart(string name);
        public void ReplacePart(string componentToReplace, UnityEditor.GraphToolsFoundation.Overdrive.IModelUIPart child);
    }

    [System.Flags] public enum ModifierFlags
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.ModifierFlags None = 0;
        public const UnityEditor.GraphToolsFoundation.Overdrive.ModifierFlags ReadOnly = 1;
        public const UnityEditor.GraphToolsFoundation.Overdrive.ModifierFlags ReadWrite = 4;
        public int value__;
        public const UnityEditor.GraphToolsFoundation.Overdrive.ModifierFlags WriteOnly = 2;
    }

    public class MoveEdgeControlPointCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public readonly int EdgeIndex;
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.IEditableEdge EdgeModel;
        public readonly UnityEngine.Vector2 NewPosition;
        public readonly float NewTightness;
        public MoveEdgeControlPointCommand() {}
        public MoveEdgeControlPointCommand(UnityEditor.GraphToolsFoundation.Overdrive.IEditableEdge edgeModel, int edgeIndex, UnityEngine.Vector2 newPosition, float newTightness) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.MoveEdgeControlPointCommand command);
    }

    public class MoveElementsCommand : UnityEditor.GraphToolsFoundation.Overdrive.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.IMovable, UnityEngine.Vector2>
    {
        public MoveElementsCommand() {}
        public MoveElementsCommand(UnityEngine.Vector2 delta, System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IMovable> models) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.MoveElementsCommand command);
    }

    public class Node : UnityEditor.GraphToolsFoundation.Overdrive.GraphElement, UnityEditor.GraphToolsFoundation.Overdrive.IHighlightable
    {
        public static readonly string disabledModifierUssClassName;
        public static readonly string disabledOverlayElementName;
        public static readonly string emptyModifierUssClassName;
        public static readonly string highlightedModifierUssClassName;
        public static readonly string notConnectedModifierUssClassName;
        public static readonly string portContainerPartName;
        public static readonly string readOnlyModifierUssClassName;
        public static readonly string selectionBorderElementName;
        public static readonly string titleContainerPartName;
        public static readonly string unusedModifierUssClassName;
        public static readonly string ussClassName;
        public static readonly string writeOnlyModifierUssClassName;
        public virtual UnityEngine.UIElements.VisualElement contentContainer { get; }
        public virtual bool Highlighted { get; set; }
        public UnityEditor.GraphToolsFoundation.Overdrive.INodeModel NodeModel { get; }
        public Node() {}
        protected virtual void BuildElementUI();
        protected virtual void BuildPartList();
        public virtual void EditTitle();
        public virtual bool IsSelected(UnityEngine.UIElements.VisualElement selectionContainer);
        public virtual void OnSelected();
        public virtual void OnUnselected();
        protected virtual void PostBuildUI();
        public virtual bool ShouldHighlightItemUsage(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel graphElementModel);
        protected virtual void UpdateElementFromModel();
    }

    public class NodeCollapseButtonPart : UnityEditor.GraphToolsFoundation.Overdrive.CollapseButtonPart
    {
        protected NodeCollapseButtonPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        public static UnityEditor.GraphToolsFoundation.Overdrive.NodeCollapseButtonPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI, string parentClassName);
        protected virtual void UpdatePartFromModel();
    }

    [System.Runtime.CompilerServices.Extension] public static class NodeDataCreationExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.INodeModel CreateConstantNode(UnityEditor.GraphToolsFoundation.Overdrive.IGraphNodeCreationData data, string constantName, UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle typeHandle);
        [System.Runtime.CompilerServices.Extension] public static T CreateNode<T>(UnityEditor.GraphToolsFoundation.Overdrive.IGraphNodeCreationData data, string name = default(string), System.Action<T> preDefineSetup = default(System.Action<T>)) where T : class, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel;
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.INodeModel CreateNode(UnityEditor.GraphToolsFoundation.Overdrive.IGraphNodeCreationData data, System.Type nodeType, string name = default(string), System.Action<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel> preDefineSetup = default(System.Action<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel>));
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.INodeModel CreateVariableNode(UnityEditor.GraphToolsFoundation.Overdrive.IGraphNodeCreationData data, UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel declarationModel);
    }

    public static class NodeModelDefaultImplementations
    {
        public static System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> GetConnectedEdges(UnityEditor.GraphToolsFoundation.Overdrive.IPortNode self);
        public static UnityEditor.GraphToolsFoundation.Overdrive.IPortModel GetInputPort(UnityEditor.GraphToolsFoundation.Overdrive.ISingleInputPortNode self);
        public static UnityEditor.GraphToolsFoundation.Overdrive.IPortModel GetOutputPort(UnityEditor.GraphToolsFoundation.Overdrive.ISingleOutputPortNode self);
    }

    [System.Runtime.CompilerServices.Extension] public static class NodeModelExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IPortModel AddDataInputPort<TDataType>(UnityEditor.GraphToolsFoundation.Overdrive.IInOutPortsNode self, string portName, string portId = default(string), UnityEditor.GraphToolsFoundation.Overdrive.PortModelOptions options = 0, TDataType defaultValue = default(TDataType));
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IPortModel AddDataInputPort(UnityEditor.GraphToolsFoundation.Overdrive.IInOutPortsNode self, string portName, UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle typeHandle, string portId = default(string), UnityEditor.GraphToolsFoundation.Overdrive.PortModelOptions options = 0, System.Action<UnityEditor.GraphToolsFoundation.Overdrive.IConstant> preDefine = default(System.Action<UnityEditor.GraphToolsFoundation.Overdrive.IConstant>));
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IPortModel AddDataOutputPort<TDataType>(UnityEditor.GraphToolsFoundation.Overdrive.IInOutPortsNode self, string portName, string portId = default(string));
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IPortModel AddDataOutputPort(UnityEditor.GraphToolsFoundation.Overdrive.IInOutPortsNode self, string portName, UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle typeHandle, string portId = default(string), UnityEditor.GraphToolsFoundation.Overdrive.PortModelOptions options = 0);
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IPortModel AddExecutionInputPort(UnityEditor.GraphToolsFoundation.Overdrive.IInOutPortsNode self, string portName, string portId = default(string));
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IPortModel AddExecutionOutputPort(UnityEditor.GraphToolsFoundation.Overdrive.IInOutPortsNode self, string portName, string portId = default(string));
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.IPortModel AddPlaceHolderPort(UnityEditor.GraphToolsFoundation.Overdrive.IInOutPortsNode self, UnityEditor.GraphToolsFoundation.Overdrive.Direction direction, string uniqueId);
        [System.Runtime.CompilerServices.Extension] public static System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> GetInputPorts(UnityEditor.GraphToolsFoundation.Overdrive.IInOutPortsNode self);
        [System.Runtime.CompilerServices.Extension] public static System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> GetOutputPorts(UnityEditor.GraphToolsFoundation.Overdrive.IInOutPortsNode self);
        [System.Runtime.CompilerServices.Extension] public static System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> GetPorts(UnityEditor.GraphToolsFoundation.Overdrive.IPortNode self, UnityEditor.GraphToolsFoundation.Overdrive.Direction direction, UnityEditor.GraphToolsFoundation.Overdrive.PortType portType);
        [System.Runtime.CompilerServices.Extension] public static void RevealReorderableEdgesOrder(UnityEditor.GraphToolsFoundation.Overdrive.IPortNode self, bool show, UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edgeToShow = default(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel));
    }

    public class NodeModelProxy<T> : UnityEngine.ScriptableObject, UnityEditor.GraphToolsFoundation.Overdrive.INodeModelProxy where T : UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel
    {
        [UnityEngine.SerializeReference] public T Model;
        public NodeModelProxy() {}
        public virtual UnityEngine.ScriptableObject ScriptableObject();
        public virtual void SetModel(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model);
    }

    [System.Runtime.CompilerServices.IsReadOnly] public struct NodeSearcherItemData : UnityEditor.GraphToolsFoundation.Overdrive.ISearcherItemData
    {
        public System.Type Type { get; }
        public NodeSearcherItemData(System.Type type) {}
    }

    [System.Runtime.CompilerServices.Extension] public static class NodeSerializationHelpers
    {
        [System.Runtime.CompilerServices.Extension] public static void DeserializeDictionaryFromLists<K, V>(System.Collections.Generic.Dictionary<K, V> dic, System.Collections.Generic.IReadOnlyList<K> keys, System.Collections.Generic.IReadOnlyList<V> values);
        [System.Runtime.CompilerServices.Extension] public static void SerializeDictionaryToLists<K, V>(System.Collections.Generic.IReadOnlyDictionary<K, V> dic, out System.Collections.Generic.List<K> keys, out System.Collections.Generic.List<V> values);
    }

    public abstract class OnboardingProvider
    {
        protected const string k_AssetExtension = asset;
        protected const string k_ButtonText = New {0};
        protected const string k_PromptToCreate = Create a new {0};
        protected const string k_PromptToCreateTitle = Create {0};
        protected OnboardingProvider() {}
        protected static UnityEngine.UIElements.VisualElement AddNewGraphButton<T>(UnityEditor.GraphToolsFoundation.Overdrive.IGraphTemplate template, string promptTitle = default(string), string buttonText = default(string), string prompt = default(string), string assetExtension = asset) where T : UnityEngine.ScriptableObject, UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel;
        public abstract UnityEngine.UIElements.VisualElement CreateOnboardingElements(UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher);
        public virtual bool GetGraphAndObjectFromSelection(UnityEditor.GraphToolsFoundation.Overdrive.GraphViewEditorWindow window, UnityEngine.Object selectedObject, out string assetPath, out UnityEngine.GameObject boundObject);
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(false, @"UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting", , )] public struct OpenedGraph
    {
        public UnityEngine.GameObject BoundObject { get; }
        public long FileId { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel GraphAssetModel { get; }
        public string GraphAssetModelPath { get; }
        public string GraphName { get; }
        public OpenedGraph(UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel graphAssetModel, UnityEngine.GameObject boundObject, long fileId = 0) {}
    }

    public enum Orientation
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.Orientation Horizontal = 0;
        public int value__;
        public const UnityEditor.GraphToolsFoundation.Overdrive.Orientation Vertical = 1;
    }

    public class PasteSerializedDataCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.CopyPasteData Data;
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.TargetInsertionInfo Info;
        public PasteSerializedDataCommand() {}
        public PasteSerializedDataCommand(UnityEditor.GraphToolsFoundation.Overdrive.TargetInsertionInfo info, UnityEditor.GraphToolsFoundation.Overdrive.CopyPasteData data) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.PasteSerializedDataCommand command);
    }

    public sealed class PersistedEditorState
    {
        public PersistedEditorState(string assetModelKey) {}
        public static void Flush();
        public T GetOrCreateAssetStateComponent<T>() where T : UnityEditor.GraphToolsFoundation.Overdrive.EditorStateComponent, new();
        public T GetOrCreateAssetViewStateComponent<T>(UnityEditor.GUID viewGUID) where T : UnityEditor.GraphToolsFoundation.Overdrive.AssetViewStateComponent, new();
        public T GetOrCreateViewStateComponent<T>(UnityEditor.GUID viewGUID) where T : UnityEditor.GraphToolsFoundation.Overdrive.ViewStateComponent, new();
        public static void RemoveViewState(UnityEditor.GUID viewGUID);
    }

    public class Pill : UnityEngine.UIElements.VisualElement
    {
        public static readonly string hasIconModifierClassName;
        public static readonly string highlightedModifierClassName;
        public static readonly string ussClassName;
        public bool Highlighted { set; }
        public UnityEngine.Texture Icon { set; }
        public string Text { set; }
        public Pill() {}
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEditor.GraphToolsFoundation.Overdrive.Pill, UnityEditor.GraphToolsFoundation.Overdrive.Pill.UxmlTraits>
        {
            public UxmlFactory() {}
        }
        public class UxmlTraits : UnityEngine.UIElements.VisualElement.UxmlTraits
        {
            public virtual System.Collections.Generic.IEnumerable<UnityEngine.UIElements.UxmlChildElementDescription> uxmlChildElementsDescription { get; }
            public UxmlTraits() {}
            public virtual void Init(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.IUxmlAttributes bag, UnityEngine.UIElements.CreationContext cc);
        }
    }

    public class Placemat : UnityEditor.GraphToolsFoundation.Overdrive.GraphElement, UnityEditor.GraphToolsFoundation.Overdrive.IResizableGraphElement
    {
        public static readonly string collapseButtonPartName;
        public static readonly string collapsedModifierUssClassName;
        public static readonly string resizerPartName;
        public static readonly string selectionBorderElementName;
        public static readonly string titleContainerPartName;
        public static readonly string ussClassName;
        public virtual UnityEngine.UIElements.VisualElement contentContainer { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.IPlacematModel PlacematModel { get; }
        public int ZOrder { get; }
        public Placemat() {}
        public virtual void AddForwardDependencies();
        protected virtual void BuildContextualMenu(UnityEngine.UIElements.ContextualMenuPopulateEvent evt);
        protected virtual void BuildElementUI();
        protected virtual void BuildPartList();
        public static bool ComputeElementBounds(ref UnityEngine.Rect pos, System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.GraphElement> elements, UnityEditor.GraphToolsFoundation.Overdrive.Placemat.MinSizePolicy ensureMinSize = 0);
        protected virtual void ExecuteDefaultActionAtTarget(UnityEngine.UIElements.EventBase evt);
        public virtual void OnResized(UnityEngine.Rect newRect, UnityEditor.GraphToolsFoundation.Overdrive.ResizeFlags resizeWhat);
        protected virtual void PostBuildUI();
        public virtual void SetPosition(UnityEngine.Rect newPos);
        protected virtual void UpdateElementFromModel();
        public enum MinSizePolicy
        {
            public const UnityEditor.GraphToolsFoundation.Overdrive.Placemat.MinSizePolicy DoNotEnsureMinSize = 1;
            public const UnityEditor.GraphToolsFoundation.Overdrive.Placemat.MinSizePolicy EnsureMinSize = 0;
            public int value__;
        }
    }

    public class PlacematContainer : UnityEditor.GraphToolsFoundation.Overdrive.GraphView.Layer
    {
        public static readonly string ussClassName;
        public System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.Placemat> Placemats { get; }
        public static int PlacematsLayer { get; }
        public PlacematContainer(UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView) {}
        public void AddPlacemat(UnityEditor.GraphToolsFoundation.Overdrive.Placemat placemat);
        public bool GetPortCenterOverride(UnityEditor.GraphToolsFoundation.Overdrive.Port port, out UnityEngine.Vector2 overriddenPosition);
        public void RemoveAllPlacemats();
        public void RemovePlacemat(UnityEditor.GraphToolsFoundation.Overdrive.Placemat placemat);
        public enum CycleDirection
        {
            public const UnityEditor.GraphToolsFoundation.Overdrive.PlacematContainer.CycleDirection Down = 1;
            public const UnityEditor.GraphToolsFoundation.Overdrive.PlacematContainer.CycleDirection Up = 0;
            public int value__;
        }
    }

    public class PluginRepository : System.IDisposable
    {
        public System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPluginHandler> RegisteredPlugins { get; }
        public virtual void Dispose();
        public System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPluginHandler> GetPluginHandlers();
        public void RegisterPlugins(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPluginHandler> plugins);
        public void UnregisterPlugins(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPluginHandler> except = default(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPluginHandler>));
    }

    public class Port : UnityEditor.GraphToolsFoundation.Overdrive.DropTarget
    {
        public static readonly string connectedModifierUssClassName;
        public static readonly string connectorPartName;
        public static readonly string constantEditorPartName;
        public static readonly string dropHighlightAcceptedClass;
        public static readonly string dropHighlightDeniedClass;
        public static readonly string hiddenModifierUssClassName;
        public static readonly string highlightedModifierUssClassName;
        public static readonly string inputModifierUssClassName;
        public static readonly string notConnectedModifierUssClassName;
        public static readonly string outputModifierUssClassName;
        public static readonly string portDataTypeClassNamePrefix;
        public static readonly string portTypeModifierClassNamePrefix;
        public static readonly string ussClassName;
        public static readonly string willConnectModifierUssClassName;
        public UnityEditor.GraphToolsFoundation.Overdrive.EdgeConnector EdgeConnector { get; protected set; }
        public bool Highlighted { set; }
        public UnityEditor.GraphToolsFoundation.Overdrive.Orientation Orientation { get; }
        public UnityEngine.Color PortColor { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.IPortModel PortModel { get; }
        public bool WillConnect { set; }
        public Port() {}
        public virtual void AddModelDependencies();
        protected virtual void BuildPartList();
        public virtual bool CanAcceptSelectionDrop(System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.ISelectableGraphElement> dragSelection);
        public UnityEngine.UIElements.VisualElement GetConnector();
        public UnityEngine.Vector3 GetGlobalCenter();
        protected virtual void OnDragEnd();
        public virtual void OnDragEnter(UnityEngine.UIElements.DragEnterEvent evt);
        public virtual void OnDragPerform(UnityEngine.UIElements.DragPerformEvent evt);
        protected virtual void OnDropBlackboardField(UnityEditor.GraphToolsFoundation.Overdrive.BlackboardField blackboardField, UnityEngine.Vector2 mousePosition);
        protected virtual void OnDropElement(UnityEditor.GraphToolsFoundation.Overdrive.ISelectableGraphElement selectable);
        protected virtual void PostBuildUI();
        protected virtual void UpdateElementFromModel();
    }

    public class PortalNodesDependency : UnityEditor.GraphToolsFoundation.Overdrive.IDependency
    {
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.INodeModel DependentNode { get; set; }
        public PortalNodesDependency() {}
    }

    public enum PortCapacity
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.PortCapacity Multi = 1;
        public const UnityEditor.GraphToolsFoundation.Overdrive.PortCapacity Single = 0;
        public int value__;
    }

    public class PortConnectorPart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        public static readonly string connectorCapUssName;
        public static readonly string connectorUssName;
        public static readonly string labelName;
        public static readonly string ussClassName;
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected PortConnectorPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement container);
        public static UnityEditor.GraphToolsFoundation.Overdrive.PortConnectorPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI, string parentClassName);
        protected virtual void PostBuildPartUI();
        protected virtual void UpdatePartFromModel();
    }

    public class PortConnectorWithIconPart : UnityEditor.GraphToolsFoundation.Overdrive.PortConnectorPart
    {
        public static readonly string iconUssName;
        protected PortConnectorWithIconPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement container);
        public static UnityEditor.GraphToolsFoundation.Overdrive.PortConnectorWithIconPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI, string parentClassName);
        protected virtual void PostBuildPartUI();
        protected virtual void UpdatePartFromModel();
    }

    public class PortConstantEditorPart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        public static readonly string constantEditorUssName;
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected PortConstantEditorPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement container);
        public static UnityEditor.GraphToolsFoundation.Overdrive.PortConstantEditorPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI, string parentClassName);
        protected virtual void UpdatePartFromModel();
    }

    public class PortContainer : UnityEditor.GraphToolsFoundation.Overdrive.Bridge.VisualElementBridge
    {
        public static readonly string ussClassName;
        public PortContainer() {}
        public void UpdatePorts(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> ports, UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher);
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEditor.GraphToolsFoundation.Overdrive.PortContainer>
        {
            public UxmlFactory() {}
        }
    }

    public class PortContainerPart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        public static readonly string portsUssName;
        public static readonly string ussClassName;
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected PortContainerPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement container);
        public static UnityEditor.GraphToolsFoundation.Overdrive.PortContainerPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI, string parentClassName);
        protected virtual void PostBuildPartUI();
        protected virtual void UpdatePartFromModel();
    }

    public enum PortMigrationResult
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.PortMigrationResult None = 0;
        public const UnityEditor.GraphToolsFoundation.Overdrive.PortMigrationResult PlaceholderNotNeeded = 1;
        public const UnityEditor.GraphToolsFoundation.Overdrive.PortMigrationResult PlaceholderPortAdded = 2;
        public const UnityEditor.GraphToolsFoundation.Overdrive.PortMigrationResult PlaceholderPortFailure = 3;
        public int value__;
    }

    public static class PortModelDefaultImplementations
    {
        public static System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> GetConnectedEdges(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel self);
        public static System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> GetConnectedPorts(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel self);
        public static bool IsConnectedTo(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel self, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel toPort);
    }

    [System.Runtime.CompilerServices.Extension] public static class PortModelExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static bool Equivalent(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel a, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel b);
        [System.Runtime.CompilerServices.Extension] public static bool IsConnected(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel self);
    }

    [System.Flags] public enum PortModelOptions
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.PortModelOptions Default = 0;
        public const UnityEditor.GraphToolsFoundation.Overdrive.PortModelOptions Hidden = 2;
        public const UnityEditor.GraphToolsFoundation.Overdrive.PortModelOptions NoEmbeddedConstant = 1;
        public const UnityEditor.GraphToolsFoundation.Overdrive.PortModelOptions None = 0;
        public int value__;
    }

    public class PortType : UnityEditor.GraphToolsFoundation.Overdrive.Enumeration
    {
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.PortType Data;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.PortType Execution;
        [JetBrains.Annotations.PublicAPI] protected static readonly int k_ToolBasePortTypeId;
        public static readonly UnityEditor.GraphToolsFoundation.Overdrive.PortType MissingPort;
        protected PortType(int id, string name) {}
    }

    public class Preferences
    {
        protected Preferences(string editorPreferencesPrefix) {}
        public static UnityEditor.GraphToolsFoundation.Overdrive.Preferences CreatePreferences(string editorPreferencesPrefix);
        public bool GetBool(UnityEditor.GraphToolsFoundation.Overdrive.BoolPref k);
        public int GetInt(UnityEditor.GraphToolsFoundation.Overdrive.IntPref k);
        protected void Initialize<TBool, TInt>() where TBool : UnityEditor.GraphToolsFoundation.Overdrive.BoolPref where TInt : UnityEditor.GraphToolsFoundation.Overdrive.IntPref;
        public void SetBool(UnityEditor.GraphToolsFoundation.Overdrive.BoolPref k, bool value);
        public void SetBoolNoEditorUpdate(UnityEditor.GraphToolsFoundation.Overdrive.BoolPref k, bool value);
        protected virtual void SetDefaultValues();
        public void SetInt(UnityEditor.GraphToolsFoundation.Overdrive.IntPref k, int value);
        public void SetIntNoEditorUpdate(UnityEditor.GraphToolsFoundation.Overdrive.IntPref k, int value);
        public void ToggleBool(UnityEditor.GraphToolsFoundation.Overdrive.BoolPref k);
    }

    public class PropertyElement : UnityEngine.UIElements.TemplateContainer
    {
        public UnityEngine.UIElements.Toggle Toggle;
        public UnityEditor.GraphToolsFoundation.Overdrive.PropertySearcherItem Item { get; set; }
        public PropertyElement(string templateId) {}
    }

    public class PropertySearcherItem : UnityEditor.Searcher.SearcherItem
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.PropertyElement Element;
        public bool Enabled;
        public UnityEditor.GraphToolsFoundation.Overdrive.MemberInfoValue MemberInfo { get; }
        public PropertySearcherItem(UnityEditor.GraphToolsFoundation.Overdrive.MemberInfoValue memberInfo, string path, int hashcode, string help = , System.Collections.Generic.List<UnityEditor.Searcher.SearcherItem> children = default(System.Collections.Generic.List<UnityEditor.Searcher.SearcherItem>)) {}
        public virtual int GetHashCode();
    }

    public class QuickFix
    {
        public string Description { get; }
        public System.Action<UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher> QuickFixAction { get; }
        public QuickFix(string description, System.Action<UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher> quickFixAction) {}
    }

    public class RectangleSelector : UnityEngine.UIElements.MouseManipulator
    {
        public RectangleSelector() {}
        public UnityEngine.Rect ComputeAxisAlignedBound(UnityEngine.Rect position, UnityEngine.Matrix4x4 transform);
        protected virtual void RegisterCallbacksOnTarget();
        protected virtual void UnregisterCallbacksFromTarget();
    }

    public static class RectUtils
    {
        public static UnityEngine.Rect Encompass(UnityEngine.Rect a, UnityEngine.Rect b);
        public static UnityEngine.Rect Inflate(UnityEngine.Rect a, float left, float top, float right, float bottom);
        public static bool IntersectsSegment(UnityEngine.Rect rect, UnityEngine.Vector2 p1, UnityEngine.Vector2 p2);
    }

    public class RemoveEdgeControlPointCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public readonly int EdgeIndex;
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.IEditableEdge EdgeModel;
        public RemoveEdgeControlPointCommand() {}
        public RemoveEdgeControlPointCommand(UnityEditor.GraphToolsFoundation.Overdrive.IEditableEdge edgeModel, int edgeIndex) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.RemoveEdgeControlPointCommand command);
    }

    public class RenameElementCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public string ElementName;
        public UnityEditor.GraphToolsFoundation.Overdrive.IRenamable RenamableModel;
        public RenameElementCommand() {}
        public RenameElementCommand(UnityEditor.GraphToolsFoundation.Overdrive.IRenamable renamableModel, string name) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.RenameElementCommand command);
    }

    public static class ReorderableEdgesPortDefaultImplementations
    {
        public static void MoveEdgeDown(UnityEditor.GraphToolsFoundation.Overdrive.IReorderableEdgesPort self, UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edge);
        public static void MoveEdgeFirst(UnityEditor.GraphToolsFoundation.Overdrive.IReorderableEdgesPort self, UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edge);
        public static void MoveEdgeLast(UnityEditor.GraphToolsFoundation.Overdrive.IReorderableEdgesPort self, UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edge);
        public static void MoveEdgeUp(UnityEditor.GraphToolsFoundation.Overdrive.IReorderableEdgesPort self, UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edge);
    }

    public class ReorderEdgeCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel EdgeModel;
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.ReorderEdgeCommand.ReorderType Type;
        public ReorderEdgeCommand() {}
        public ReorderEdgeCommand(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edgeModel, UnityEditor.GraphToolsFoundation.Overdrive.ReorderEdgeCommand.ReorderType type) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.ReorderEdgeCommand command);
        public enum ReorderType
        {
            public const UnityEditor.GraphToolsFoundation.Overdrive.ReorderEdgeCommand.ReorderType MoveDown = 2;
            public const UnityEditor.GraphToolsFoundation.Overdrive.ReorderEdgeCommand.ReorderType MoveFirst = 0;
            public const UnityEditor.GraphToolsFoundation.Overdrive.ReorderEdgeCommand.ReorderType MoveLast = 3;
            public const UnityEditor.GraphToolsFoundation.Overdrive.ReorderEdgeCommand.ReorderType MoveUp = 1;
            public int value__;
        }
    }

    public class ReorderGraphVariableDeclarationCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel InsertAfter;
        public readonly System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel> VariableDeclarationModelsToMove;
        public ReorderGraphVariableDeclarationCommand() {}
        public ReorderGraphVariableDeclarationCommand(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel> modelsToMove, UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel insertAfter) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.ReorderGraphVariableDeclarationCommand command);
    }

    public enum RequestGraphProcessingOptions
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.RequestGraphProcessingOptions Default = 0;
        public const UnityEditor.GraphToolsFoundation.Overdrive.RequestGraphProcessingOptions SaveGraph = 1;
        public int value__;
    }

    public class ResetElementColorCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public readonly System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel> NodeModels;
        public readonly System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IPlacematModel> PlacematModels;
        public ResetElementColorCommand() {}
        public ResetElementColorCommand(System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel> nodeModels, System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IPlacematModel> placematModels) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.ResetElementColorCommand command);
    }

    public class ResizableElement : UnityEngine.UIElements.VisualElement
    {
        public static readonly string ussClassName;
        public ResizableElement() {}
        public ResizableElement(string uiFile) {}
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEditor.GraphToolsFoundation.Overdrive.ResizableElement>
        {
            public UxmlFactory() {}
        }
    }

    [System.Flags] public enum ResizeFlags
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.ResizeFlags All = 15;
        public const UnityEditor.GraphToolsFoundation.Overdrive.ResizeFlags Height = 8;
        public const UnityEditor.GraphToolsFoundation.Overdrive.ResizeFlags Left = 1;
        public const UnityEditor.GraphToolsFoundation.Overdrive.ResizeFlags None = 0;
        public const UnityEditor.GraphToolsFoundation.Overdrive.ResizeFlags Top = 2;
        public int value__;
        public const UnityEditor.GraphToolsFoundation.Overdrive.ResizeFlags Width = 4;
    }

    public class Resizer : UnityEngine.UIElements.VisualElement
    {
        public static readonly string bothDirectionModifierClassName;
        public static readonly string horizontalModifierClassName;
        public static readonly string iconElementUssClassName;
        public static readonly string ussClassName;
        public static readonly string verticalModifierClassName;
        public UnityEngine.UIElements.MouseButton ActivateButton { get; set; }
        public Resizer() {}
        public Resizer(UnityEngine.Vector2 minimumSize, System.Action onResizedCallback = default(System.Action)) {}
    }

    [System.Flags] public enum ResizerDirection
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.ResizerDirection Bottom = 2;
        public const UnityEditor.GraphToolsFoundation.Overdrive.ResizerDirection Left = 4;
        public const UnityEditor.GraphToolsFoundation.Overdrive.ResizerDirection Right = 8;
        public const UnityEditor.GraphToolsFoundation.Overdrive.ResizerDirection Top = 1;
        public int value__;
    }

    public enum SearcherContext
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.SearcherContext Graph = 0;
        public const UnityEditor.GraphToolsFoundation.Overdrive.SearcherContext None = 2;
        public const UnityEditor.GraphToolsFoundation.Overdrive.SearcherContext Type = 1;
        public int value__;
    }

    public class SearcherFilter
    {
        public readonly System.Collections.Generic.List<UnityEditor.Searcher.LuceneSearcherDatabase.Filter> LuceneFilters;
        public static UnityEditor.GraphToolsFoundation.Overdrive.SearcherFilter Empty { get; }
        public SearcherFilter() {}
        public UnityEditor.GraphToolsFoundation.Overdrive.SearcherFilter WithFieldQuery(string field, object value, UnityEditor.Searcher.LuceneSearcherDatabase.FilterType type = 0);
    }

    public class SearcherGraphView : UnityEditor.GraphToolsFoundation.Overdrive.GraphView
    {
        public static readonly string ussClassName;
        public SearcherGraphView(UnityEditor.GraphToolsFoundation.Overdrive.GraphViewEditorWindow window, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher) {}
    }

    [System.AttributeUsage(4, AllowMultiple = true)] public class SearcherItemAttribute : System.Attribute
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.SearcherContext Context { get; }
        public string Path { get; }
        public System.Type StencilType { get; }
        public SearcherItemAttribute(System.Type stencilType, UnityEditor.GraphToolsFoundation.Overdrive.SearcherContext context, string path) {}
    }

    [JetBrains.Annotations.PublicAPI] [System.Runtime.CompilerServices.Extension] public static class SearcherItemCollectionExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static void AddAtPath(System.Collections.Generic.List<UnityEditor.Searcher.SearcherItem> items, UnityEditor.Searcher.SearcherItem item, string path = );
        [System.Runtime.CompilerServices.Extension] public static bool TryAddClassItem(System.Collections.Generic.List<UnityEditor.Searcher.SearcherItem> items, UnityEditor.Searcher.SearcherItem itemToAdd, UnityEditor.GraphToolsFoundation.Overdrive.ITypeMetadata meta, string parentName = );
        [System.Runtime.CompilerServices.Extension] public static bool TryAddEnumItem(System.Collections.Generic.List<UnityEditor.Searcher.SearcherItem> items, UnityEditor.Searcher.SearcherItem itemToAdd, UnityEditor.GraphToolsFoundation.Overdrive.ITypeMetadata meta, string parentName = );
    }

    [System.Runtime.CompilerServices.Extension] public static class SearcherItemExtensions
    {
        [JetBrains.Annotations.CanBeNull] [System.Runtime.CompilerServices.Extension] public static UnityEditor.Searcher.SearcherItem Find(UnityEditor.Searcher.SearcherItem item, string name);
    }

    public static class SearcherItemUtility
    {
        [JetBrains.Annotations.NotNull] public static UnityEditor.Searcher.SearcherItem GetItemFromPath([JetBrains.Annotations.NotNull] System.Collections.Generic.List<UnityEditor.Searcher.SearcherItem> items, string path);
    }

    public static class SearcherService
    {
        public static readonly System.Comparison<UnityEditor.Searcher.SearcherItem> TypeComparison;
        public static UnityEditor.GraphToolsFoundation.Overdrive.SearcherGraphView GraphView { get; }
        public static void ApplyDatabasesFilter<T>(System.Collections.Generic.List<UnityEditor.Searcher.SearcherDatabaseBase> databases, UnityEditor.GraphToolsFoundation.Overdrive.SearcherFilter filter) where T : UnityEditor.GraphToolsFoundation.Overdrive.ISearcherItemDataProvider;
        public static void FindInGraph(UnityEditor.EditorWindow host, UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graph, System.Action<UnityEditor.GraphToolsFoundation.Overdrive.FindInGraphAdapter.FindSearcherItem> highlightDelegate, System.Action<UnityEditor.GraphToolsFoundation.Overdrive.FindInGraphAdapter.FindSearcherItem> selectionDelegate);
        public static void ShowEdgeNodes(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edgeModel, UnityEngine.Vector2 position, System.Action<UnityEditor.GraphToolsFoundation.Overdrive.GraphNodeModelSearcherItem> callback);
        public static void ShowGraphNodes(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEngine.Vector2 position, System.Action<UnityEditor.GraphToolsFoundation.Overdrive.GraphNodeModelSearcherItem> callback);
        public static void ShowInputToGraphNodes(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel, UnityEngine.Vector2 position, System.Action<UnityEditor.GraphToolsFoundation.Overdrive.GraphNodeModelSearcherItem> callback);
        public static void ShowOutputToGraphNodes(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel, UnityEngine.Vector2 position, System.Action<UnityEditor.GraphToolsFoundation.Overdrive.GraphNodeModelSearcherItem> callback);
        public static void ShowTypes(System.Collections.Generic.List<UnityEditor.Searcher.SearcherDatabase> databases, UnityEngine.Vector2 position, System.Action<UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle, int> callback);
        public static void ShowValues(string title, System.Collections.Generic.IEnumerable<string> values, UnityEngine.Vector2 position, System.Action<string, int> callback);
        public static void ShowVariableTypes(UnityEditor.GraphToolsFoundation.Overdrive.Stencil stencil, UnityEngine.Vector2 position, System.Action<UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle, int> callback);
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(false, @"UnityEditor.GraphToolsFoundation.Overdrive.GraphElements", , )] public class SearchTreeEntry : System.IComparable<UnityEditor.GraphToolsFoundation.Overdrive.SearchTreeEntry>
    {
        public UnityEngine.GUIContent content;
        public int level;
        public object userData;
        public string name { get; }
        public SearchTreeEntry(UnityEngine.GUIContent content) {}
        public virtual int CompareTo(UnityEditor.GraphToolsFoundation.Overdrive.SearchTreeEntry o);
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(false, @"UnityEditor.GraphToolsFoundation.Overdrive.GraphElements", , )] public class SearchTreeGroupEntry : UnityEditor.GraphToolsFoundation.Overdrive.SearchTreeEntry
    {
        public SearchTreeGroupEntry(UnityEngine.GUIContent content, int level = 0) {}
    }

    [UnityEditor.InitializeOnLoad] public class SearchWindow : UnityEditor.EditorWindow
    {
        public SearchWindow() {}
        public static bool Open<T>(UnityEditor.GraphToolsFoundation.Overdrive.SearchWindowContext context, T provider) where T : UnityEngine.ScriptableObject, UnityEditor.GraphToolsFoundation.Overdrive.ISearchWindowProvider;
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(false, @"UnityEditor.GraphToolsFoundation.Overdrive.GraphElements", , )] public struct SearchWindowContext
    {
        public float requestedHeight { get; }
        public float requestedWidth { get; }
        public UnityEngine.Vector2 screenMousePosition { get; }
        public SearchWindowContext(UnityEngine.Vector2 screenMousePosition, float requestedWidth = 0, float requestedHeight = 0) {}
    }

    public class SelectionBorder : UnityEngine.UIElements.VisualElement
    {
        public static readonly string contentContainerElementName;
        public static readonly string ussClassName;
        public UnityEngine.UIElements.VisualElement ContentContainer { get; }
        public SelectionBorder() {}
    }

    public class SelectionDragger : UnityEditor.GraphToolsFoundation.Overdrive.Dragger
    {
        public const float maxPanSpeed = 10;
        public const float maxSpeedFactor = 2.5;
        public const float minSpeedFactor = 0.5;
        public const int panAreaWidth = 100;
        public const int panInterval = 10;
        public const int panSpeed = 4;
        public bool IsActive { get; }
        public SelectionDragger(UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView) {}
        protected void OnMouseDown(UnityEngine.UIElements.MouseDownEvent e);
        protected void OnMouseMove(UnityEngine.UIElements.MouseMoveEvent e);
        protected void OnMouseUp(UnityEngine.UIElements.MouseUpEvent evt);
        protected virtual void RegisterCallbacksOnTarget();
        protected virtual void UnregisterCallbacksFromTarget();
    }

    public class SelectionDropper : UnityEngine.UIElements.Manipulator
    {
        public UnityEngine.UIElements.MouseButton activateButton { get; set; }
        public bool clampToParentEdges { get; set; }
        public UnityEngine.Vector2 panSpeed { get; set; }
        public SelectionDropper() {}
        protected void OnMouseDown(UnityEngine.UIElements.MouseDownEvent e);
        protected void OnMouseMove(UnityEngine.UIElements.MouseMoveEvent e);
        protected void OnMouseUp(UnityEngine.UIElements.MouseUpEvent e);
        protected virtual void RegisterCallbacksOnTarget();
        protected virtual void UnregisterCallbacksFromTarget();
    }

    public class SelectionStateComponent : UnityEditor.GraphToolsFoundation.Overdrive.AssetViewStateComponent
    {
        public SelectionStateComponent() {}
        public virtual void ClearElementsToSelectUponCreation();
        public virtual void SelectElementsUponCreation(System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> graphElementModels, bool select);
        public virtual bool ShouldSelectElementUponCreation(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model);
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(false, @"UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting", , )] public struct SerializableGUID : System.IEquatable<UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID>
    {
        public bool Valid { get; }
        public SerializableGUID(string hashString) {}
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID other);
        public static UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID FromParts(System.UInt64 a, System.UInt64 b);
        public static UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID Generate();
        public virtual int GetHashCode();
        public static bool operator ==(UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID left, UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID right);
        public static UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID op_Implicit(UnityEditor.GUID guid);
        public static UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID op_Implicit(UnityEngine.Hash128 hash);
        public static UnityEditor.GUID op_Implicit(UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID sGuid);
        public static UnityEngine.Hash128 op_Implicit(UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID sGuid);
        public static bool operator !=(UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID left, UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID right);
        public System.ValueTuple<System.UInt64, System.UInt64> ToParts();
        public virtual string ToString();
    }

    public class SetEdgeEditModeCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.IEditableEdge EdgeModel;
        public readonly bool Value;
        public SetEdgeEditModeCommand() {}
        public SetEdgeEditModeCommand(UnityEditor.GraphToolsFoundation.Overdrive.IEditableEdge edgeModel, bool value) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.SetEdgeEditModeCommand command);
    }

    public class SetNodeCollapsedCommand : UnityEditor.GraphToolsFoundation.Overdrive.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel, bool>
    {
        public SetNodeCollapsedCommand() {}
        public SetNodeCollapsedCommand(System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel> models, bool value) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.SetNodeCollapsedCommand command);
    }

    public class SetNodeEnabledStateCommand : UnityEditor.GraphToolsFoundation.Overdrive.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel, UnityEditor.GraphToolsFoundation.Overdrive.ModelState>
    {
        public SetNodeEnabledStateCommand() {}
        public SetNodeEnabledStateCommand(UnityEditor.GraphToolsFoundation.Overdrive.INodeModel[] nodeModel, UnityEditor.GraphToolsFoundation.Overdrive.ModelState state) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.SetNodeEnabledStateCommand command);
    }

    public class SetPlacematCollapsedCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public readonly bool Collapse;
        public readonly System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> CollapsedElements;
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.IPlacematModel PlacematModel;
        public SetPlacematCollapsedCommand() {}
        public SetPlacematCollapsedCommand(UnityEditor.GraphToolsFoundation.Overdrive.IPlacematModel placematModel, bool collapse, System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> collapsedElements) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.SetPlacematCollapsedCommand command);
    }

    public delegate UnityEditor.GraphToolsFoundation.Overdrive.ShortcutHandled ShortcutDelegate(UnityEngine.UIElements.KeyDownEvent evt);

    public enum ShortcutHandled
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.ShortcutHandled Handled = 1;
        public const UnityEditor.GraphToolsFoundation.Overdrive.ShortcutHandled NotHandled = 0;
        public int value__;
    }

    public class ShortcutHandler : UnityEngine.UIElements.Manipulator
    {
        public ShortcutHandler(System.Collections.Generic.Dictionary<UnityEngine.Event, UnityEditor.GraphToolsFoundation.Overdrive.ShortcutDelegate> dictionary) {}
        protected virtual void RegisterCallbacksOnTarget();
        protected virtual void UnregisterCallbacksFromTarget();
    }

    public class SimpleSearcherAdapter : UnityEditor.Searcher.SearcherAdapter
    {
        public virtual bool HasDetailsPanel { get; }
        public SimpleSearcherAdapter(string title) {}
    }

    public class SinglePortContainerPart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected SinglePortContainerPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement container);
        public static UnityEditor.GraphToolsFoundation.Overdrive.SinglePortContainerPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI, string parentClassName);
        protected virtual void UpdatePartFromModel();
    }

    [System.Flags] public enum SpawnFlags
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.SpawnFlags Default = 0;
        public const UnityEditor.GraphToolsFoundation.Overdrive.SpawnFlags None = 0;
        public const UnityEditor.GraphToolsFoundation.Overdrive.SpawnFlags Orphan = 4;
        public const UnityEditor.GraphToolsFoundation.Overdrive.SpawnFlags Reserved0 = 1;
        public const UnityEditor.GraphToolsFoundation.Overdrive.SpawnFlags Reserved1 = 2;
        public int value__;
    }

    [System.Runtime.CompilerServices.Extension] public static class SpawnFlagsExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static bool IsOrphan(UnityEditor.GraphToolsFoundation.Overdrive.SpawnFlags f);
    }

    public class SplitEdgeAndInsertExistingNodeCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel EdgeModel;
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.IInOutPortsNode NodeModel;
        public SplitEdgeAndInsertExistingNodeCommand() {}
        public SplitEdgeAndInsertExistingNodeCommand(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edgeModel, UnityEditor.GraphToolsFoundation.Overdrive.IInOutPortsNode nodeModel) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.SplitEdgeAndInsertExistingNodeCommand command);
    }

    [System.Obsolete(@"2021-01-05 State was renamed to GraphToolState (UnityUpgradable) -> GraphToolState")] public class State
    {
        public State(UnityEditor.GUID graphViewEditorWindowGUID, UnityEditor.GraphToolsFoundation.Overdrive.Preferences preferences) {}
    }

    [System.Obsolete(@"2021-01-05 StateExtensions was renamed to GraphToolStateExtensions (UnityUpgradable) -> GraphToolStateExtensions")] public static class StateExtensions
    {
    }

    [JetBrains.Annotations.PublicAPI] public abstract class Stencil
    {
        [UnityEngine.SerializeReference] public UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel GraphModel;
        protected UnityEditor.GraphToolsFoundation.Overdrive.ISearcherDatabaseProvider m_SearcherDatabaseProvider;
        protected UnityEditor.GraphToolsFoundation.Overdrive.IToolbarProvider m_ToolbarProvider;
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IDebugger Debugger { get; }
        public virtual System.Collections.Generic.IEnumerable<System.Type> EventTypes { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.GraphContext GraphContext { get; }
        public virtual bool MoveNodeDependenciesByDefault { get; }
        protected Stencil() {}
        public virtual bool CanPasteNode(UnityEditor.GraphToolsFoundation.Overdrive.INodeModel originalModel, UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graph);
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IConstant CreateConstantValue(UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle constantTypeHandle);
        public virtual bool CreateDependencyFromEdge(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel model, out UnityEditor.GraphToolsFoundation.Overdrive.LinkedNodesDependency linkedNodesDependency, out UnityEditor.GraphToolsFoundation.Overdrive.INodeModel parent);
        protected virtual UnityEditor.GraphToolsFoundation.Overdrive.GraphContext CreateGraphContext();
        public virtual UnityEngine.GraphToolsFoundation.Overdrive.IGraphProcessor CreateGraphProcessor();
        public virtual void CreateNodesFromPort(UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel, UnityEngine.Vector2 localPosition, UnityEngine.Vector2 worldPosition, System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> edgesToDelete);
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel ExtractVariableFromGraphElement(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElement element);
        public virtual System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.ITypeMetadata> GetAssembliesTypesMetadata();
        public virtual System.Type GetConstantNodeValueType(UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle typeHandle);
        public virtual System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel> GetEntryPoints(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
        [System.Runtime.CompilerServices.IteratorStateMachine(typeof(UnityEditor.GraphToolsFoundation.Overdrive.Stencil.<GetGraphProcessingPluginHandlers>d__21))] public virtual System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPluginHandler> GetGraphProcessingPluginHandlers(UnityEngine.GraphToolsFoundation.Overdrive.GraphProcessingOptions getGraphProcessingOptions);
        public virtual System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel> GetLinkedPortals(UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel model);
        public virtual string GetNodeDocumentation(UnityEditor.Searcher.SearcherItem node, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model);
        public virtual System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel> GetPortalDependencies(UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel model);
        public virtual bool GetPortCapacity(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel, out UnityEditor.GraphToolsFoundation.Overdrive.PortCapacity capacity);
        [JetBrains.Annotations.CanBeNull] public virtual UnityEditor.Searcher.ISearcherAdapter GetSearcherAdapter(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel, string title, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel contextPortModel = default(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel));
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.ISearcherDatabaseProvider GetSearcherDatabaseProvider();
        [JetBrains.Annotations.CanBeNull] public virtual UnityEditor.GraphToolsFoundation.Overdrive.ISearcherFilterProvider GetSearcherFilterProvider();
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle GetThisType();
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IToolbarProvider GetToolbarProvider();
        public virtual bool MigrateNode(UnityEditor.GraphToolsFoundation.Overdrive.INodeModel nodeModel, out UnityEditor.GraphToolsFoundation.Overdrive.INodeModel migrated);
        public virtual void OnDragAndDropVariableDeclarations(UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, System.Collections.Generic.List<System.ValueTuple<UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel, UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID, UnityEngine.Vector2>> variablesToCreate);
        public virtual void OnGraphProcessingFailed(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel, UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingResult results);
        public virtual void OnGraphProcessingStarted(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
        public virtual void OnGraphProcessingSucceeded(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel, UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingResult results);
        public virtual void OnInspectorGUI();
        public virtual void PreProcessGraph(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
        public virtual bool RequiresInitialization(UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel decl);
        public bool RequiresInspectorInitialization(UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel decl);
    }

    public class StickyNote : UnityEditor.GraphToolsFoundation.Overdrive.GraphElement, UnityEditor.GraphToolsFoundation.Overdrive.IResizableGraphElement
    {
        public static readonly string contentContainerPartName;
        public static readonly UnityEngine.Vector2 defaultSize;
        public static readonly string disabledOverlayElementName;
        public static readonly string resizerPartName;
        public static readonly string selectionBorderElementName;
        public static readonly string titleContainerPartName;
        public static readonly string ussClassName;
        public virtual UnityEngine.UIElements.VisualElement contentContainer { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.IStickyNoteModel StickyNoteModel { get; }
        public StickyNote() {}
        protected virtual void BuildElementUI();
        protected virtual void BuildPartList();
        [System.Runtime.CompilerServices.IteratorStateMachine(typeof(UnityEditor.GraphToolsFoundation.Overdrive.StickyNote.<GetSizes>d__21))] public static System.Collections.Generic.IEnumerable<string> GetSizes();
        [System.Runtime.CompilerServices.IteratorStateMachine(typeof(UnityEditor.GraphToolsFoundation.Overdrive.StickyNote.<GetThemes>d__20))] public static System.Collections.Generic.IEnumerable<string> GetThemes();
        public virtual void OnResized(UnityEngine.Rect newRect, UnityEditor.GraphToolsFoundation.Overdrive.ResizeFlags resizeWhat);
        protected virtual void PostBuildUI();
        protected virtual void UpdateElementFromModel();
        public class UxmlFactory : UnityEngine.UIElements.UxmlFactory<UnityEditor.GraphToolsFoundation.Overdrive.StickyNote>
        {
            public UxmlFactory() {}
        }
    }

    public class StickyNoteContentPart : UnityEditor.GraphToolsFoundation.Overdrive.BaseModelUIPart
    {
        public virtual UnityEngine.UIElements.VisualElement Root { get; }
        protected UnityEditor.GraphToolsFoundation.Overdrive.EditableLabel TextLabel { get; set; }
        protected StickyNoteContentPart(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI ownerElement, string parentClassName) {}
        protected virtual void BuildPartUI(UnityEngine.UIElements.VisualElement container);
        public static UnityEditor.GraphToolsFoundation.Overdrive.StickyNoteContentPart Create(string name, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI, string parentClassName);
        protected void OnRename(UnityEngine.UIElements.ChangeEvent<string> e);
        protected virtual void UpdatePartFromModel();
    }

    public enum StickyNoteFontSize
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.StickyNoteFontSize Huge = 3;
        public const UnityEditor.GraphToolsFoundation.Overdrive.StickyNoteFontSize Large = 2;
        public const UnityEditor.GraphToolsFoundation.Overdrive.StickyNoteFontSize Medium = 1;
        public const UnityEditor.GraphToolsFoundation.Overdrive.StickyNoteFontSize Small = 0;
        public int value__;
    }

    public enum StickyNoteTheme
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.StickyNoteTheme Black = 1;
        public const UnityEditor.GraphToolsFoundation.Overdrive.StickyNoteTheme Blue = 5;
        public const UnityEditor.GraphToolsFoundation.Overdrive.StickyNoteTheme Classic = 0;
        public const UnityEditor.GraphToolsFoundation.Overdrive.StickyNoteTheme Dark = 2;
        public const UnityEditor.GraphToolsFoundation.Overdrive.StickyNoteTheme Green = 4;
        public const UnityEditor.GraphToolsFoundation.Overdrive.StickyNoteTheme Orange = 3;
        public const UnityEditor.GraphToolsFoundation.Overdrive.StickyNoteTheme Purple = 7;
        public const UnityEditor.GraphToolsFoundation.Overdrive.StickyNoteTheme Red = 6;
        public const UnityEditor.GraphToolsFoundation.Overdrive.StickyNoteTheme Teal = 8;
        public int value__;
    }

    [System.Obsolete(@"2021-01-05 Store was renamed to CommandDispatcher (UnityUpgradable) -> CommandDispatcher", true)] public sealed class Store
    {
        public Store(UnityEditor.GraphToolsFoundation.Overdrive.State state) {}
    }

    [System.Obsolete(@"2021-01-05 StoreHelper was renamed to CommandDispatcherHelper (UnityUpgradable) -> CommandDispatcherHelper", true)] public static class StoreHelper
    {
    }

    [System.Runtime.CompilerServices.Extension] public static class StringExtensions
    {
        public static string CodifyString(string str);
        [System.Runtime.CompilerServices.Extension] public static bool IsCSharpKeyword(string name);
        [System.Runtime.CompilerServices.Extension] public static string Nicify(string value);
        [System.Runtime.CompilerServices.Extension] public static string ToUnityNameFormat(string userName);
    }

    [System.Runtime.CompilerServices.Extension] public static class StringUtilsExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static string ToCamelCase(string text);
        [System.Runtime.CompilerServices.Extension] public static string ToKebabCase(string text);
        [System.Runtime.CompilerServices.Extension] public static string ToPascalCase(string text);
        [System.Runtime.CompilerServices.Extension] public static string ToSnakeCase(string text);
        [System.Runtime.CompilerServices.Extension] public static string ToTrainCase(string text);
        [System.Runtime.CompilerServices.Extension] public static string WithUssElement(string blockName, string elementName);
        [System.Runtime.CompilerServices.Extension] public static string WithUssModifier(string blockName, string modifier);
    }

    [System.Runtime.CompilerServices.IsReadOnly] public struct TagSearcherItemData : UnityEditor.GraphToolsFoundation.Overdrive.ISearcherItemData
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.CommonSearcherTags Tag { get; }
        public TagSearcherItemData(UnityEditor.GraphToolsFoundation.Overdrive.CommonSearcherTags tag) {}
    }

    public struct TargetInsertionInfo
    {
        public UnityEngine.Vector2 Delta;
        public string OperationName;
    }

    public static class TaskUtility
    {
        public static System.Collections.Concurrent.ConcurrentBag<TOutput> RunTasks<TInput, TOutput>(System.Collections.Generic.List<TInput> items, System.Action<TInput, System.Collections.Concurrent.ConcurrentBag<TOutput>> action);
    }

    public class ToggleEdgePortsCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel[] EdgeModels;
        public ToggleEdgePortsCommand(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel[] edgeModels) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState previousGraphToolState, UnityEditor.GraphToolsFoundation.Overdrive.ToggleEdgePortsCommand command);
    }

    public class ToggleLockConstantNodeCommand : UnityEditor.GraphToolsFoundation.Overdrive.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.IConstantNodeModel>
    {
        public ToggleLockConstantNodeCommand() {}
        public ToggleLockConstantNodeCommand(params UnityEditor.GraphToolsFoundation.Overdrive.IConstantNodeModel[] constantNodeModels) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.ToggleLockConstantNodeCommand command);
    }

    public class TogglePortsCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public TogglePortsCommand() {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState previousGraphToolState, UnityEditor.GraphToolsFoundation.Overdrive.TogglePortsCommand command);
    }

    public class ToggleTracingCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public ToggleTracingCommand() {}
        public ToggleTracingCommand(bool value) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState state, UnityEditor.GraphToolsFoundation.Overdrive.ToggleTracingCommand command);
    }

    public class TokenNode : UnityEditor.GraphToolsFoundation.Overdrive.Node
    {
        public static readonly string constantEditorPartName;
        public static readonly string constantModifierUssClassName;
        public static readonly string inputPortContainerPartName;
        public static readonly string outputPortContainerPartName;
        public static readonly string portalEntryModifierUssClassName;
        public static readonly string portalExitModifierUssClassName;
        public static readonly string portalModifierUssClassName;
        public static readonly string titleIconContainerPartName;
        public static readonly string tokenModifierUssClassName;
        public static readonly string variableModifierUssClassName;
        public TokenNode() {}
        protected virtual void BuildPartList();
        public virtual bool IsRenamable();
        protected virtual void PostBuildUI();
        public virtual bool ShouldHighlightItemUsage(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel elementModel);
    }

    public class Toolbar : UnityEditor.UIElements.Toolbar
    {
        protected readonly UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher m_CommandDispatcher;
        protected readonly UnityEditor.GraphToolsFoundation.Overdrive.GraphView m_GraphView;
        public static readonly string ussClassName;
        public Toolbar(UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher, UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView) {}
    }

    [System.Runtime.CompilerServices.Extension] public static class ToolbarExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static void ChangeClickEvent(UnityEditor.UIElements.ToolbarButton button, System.Action newClickEvent);
        [System.Runtime.CompilerServices.Extension] public static void CreateOrUpdateItem(UnityEditor.UIElements.ToolbarBreadcrumbs breadcrumbs, int index, string itemLabel, System.Action<int> clickedEvent);
        [System.Runtime.CompilerServices.Extension] public static void TrimItems(UnityEditor.UIElements.ToolbarBreadcrumbs breadcrumbs, int countToKeep);
    }

    public class ToolbarProvider : UnityEditor.GraphToolsFoundation.Overdrive.IToolbarProvider
    {
        public ToolbarProvider() {}
        public virtual bool ShowButton(string buttonName);
    }

    public class TracingStateComponent : UnityEditor.GraphToolsFoundation.Overdrive.AssetViewStateComponent
    {
        public int CurrentTracingFrame;
        public int CurrentTracingStep;
        public int CurrentTracingTarget;
        public int MaxTracingStep;
        public bool TracingEnabled;
        public System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.TracingStep> DebuggingData { get; set; }
        public TracingStateComponent() {}
    }

    public struct TracingStep
    {
        public string ErrorMessage;
        public UnityEditor.GraphToolsFoundation.Overdrive.INodeModel NodeModel;
        public UnityEditor.GraphToolsFoundation.Overdrive.IPortModel PortModel;
        public byte Progress;
        public UnityEditor.GraphToolsFoundation.Overdrive.TracingStepType Type;
        public string ValueString;
        public static UnityEditor.GraphToolsFoundation.Overdrive.TracingStep Error(UnityEditor.GraphToolsFoundation.Overdrive.INodeModel nodeModel, string error);
        public static UnityEditor.GraphToolsFoundation.Overdrive.TracingStep ExecutedNode(UnityEditor.GraphToolsFoundation.Overdrive.INodeModel nodeModel1, byte progress);
        public static UnityEditor.GraphToolsFoundation.Overdrive.TracingStep ReadValue(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel, string valueString);
        public static UnityEditor.GraphToolsFoundation.Overdrive.TracingStep TriggeredPort(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel);
        public static UnityEditor.GraphToolsFoundation.Overdrive.TracingStep WrittenValue(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel, string valueString);
    }

    public enum TracingStepType
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.TracingStepType Error = 5;
        public const UnityEditor.GraphToolsFoundation.Overdrive.TracingStepType ExecutedNode = 1;
        public const UnityEditor.GraphToolsFoundation.Overdrive.TracingStepType None = 0;
        public const UnityEditor.GraphToolsFoundation.Overdrive.TracingStepType ReadValue = 4;
        public const UnityEditor.GraphToolsFoundation.Overdrive.TracingStepType TriggeredPort = 2;
        public byte value__;
        public const UnityEditor.GraphToolsFoundation.Overdrive.TracingStepType WrittenValue = 3;
    }

    [System.Runtime.CompilerServices.Extension] public static class TypeExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static string FriendlyName(System.Type type, bool expandGeneric = True);
        [System.Runtime.CompilerServices.Extension] public static bool HasNumericConversionTo(System.Type self, System.Type other);
        [System.Runtime.CompilerServices.Extension] public static bool IsNumeric(System.Type self);
    }

    [JetBrains.Annotations.PublicAPI] [UnityEngine.Scripting.APIUpdating.MovedFrom(false, @"UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting", , )] public struct TypeHandle : System.IComparable<UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle>, System.IEquatable<UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle>
    {
        public string Identification;
        public static UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle Bool { get; }
        public static UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle Char { get; }
        public static UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle Double { get; }
        public static UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle ExecutionFlow { get; }
        public static UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle Float { get; }
        public static UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle GameObject { get; }
        public static UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle Int { get; }
        public bool IsValid { get; }
        public static UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle Long { get; }
        public static UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle MissingPort { get; }
        public static UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle MissingType { get; }
        public string Name { get; }
        public static UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle Object { get; }
        public static UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle Quaternion { get; }
        public static UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle String { get; }
        public static UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle UInt { get; }
        public static UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle Unknown { get; }
        public static UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle Vector2 { get; }
        public static UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle Vector3 { get; }
        public static UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle Vector4 { get; }
        public static UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle Void { get; }
        public virtual int CompareTo(UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle other);
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle other);
        public virtual int GetHashCode();
        public UnityEditor.GraphToolsFoundation.Overdrive.ITypeMetadata GetMetadata(UnityEditor.GraphToolsFoundation.Overdrive.ITypeMetadataResolver resolver);
        public UnityEditor.GraphToolsFoundation.Overdrive.ITypeMetadata GetMetadata(UnityEditor.GraphToolsFoundation.Overdrive.Stencil stencil);
        public bool IsAssignableFrom(UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle other, UnityEditor.GraphToolsFoundation.Overdrive.Stencil stencil);
        public static bool operator ==(UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle left, UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle right);
        public static bool operator !=(UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle left, UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle right);
        public System.Type Resolve();
        public virtual string ToString();
    }

    [JetBrains.Annotations.PublicAPI] [System.Runtime.CompilerServices.Extension] public static class TypeHandleExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle GenerateTypeHandle(System.Type t);
    }

    public class TypeMetadata : UnityEditor.GraphToolsFoundation.Overdrive.ITypeMetadata
    {
        public virtual string FriendlyName { get; }
        public virtual bool IsClass { get; }
        public virtual bool IsEnum { get; }
        public virtual bool IsValueType { get; }
        public virtual string Namespace { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle TypeHandle { get; }
        public TypeMetadata(UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle typeHandle, System.Type type) {}
        public virtual bool IsAssignableFrom(System.Type type);
        public virtual bool IsAssignableFrom(UnityEditor.GraphToolsFoundation.Overdrive.ITypeMetadata metadata);
        public virtual bool IsAssignableTo(System.Type t);
        public virtual bool IsSubclassOf(System.Type t);
        public virtual bool IsSuperclassOf(System.Type t);
    }

    public class TypeMetadataResolver : UnityEditor.GraphToolsFoundation.Overdrive.ITypeMetadataResolver
    {
        public TypeMetadataResolver() {}
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.ITypeMetadata Resolve(UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle th);
    }

    public class TypeSearcherAdapter : UnityEditor.GraphToolsFoundation.Overdrive.SimpleSearcherAdapter
    {
        public TypeSearcherAdapter(string title) {}
    }

    [JetBrains.Annotations.PublicAPI] public class TypeSearcherDatabase
    {
        public TypeSearcherDatabase() {}
        public static UnityEditor.Searcher.SearcherDatabase FromItems(System.Collections.Generic.IEnumerable<UnityEditor.Searcher.SearcherItem> items);
        public static UnityEditor.Searcher.SearcherDatabase FromTypes(UnityEditor.GraphToolsFoundation.Overdrive.Stencil stencil, System.Collections.Generic.IEnumerable<System.Type> types);
    }

    public sealed class TypeSearcherItem : UnityEditor.Searcher.SearcherItem, UnityEditor.GraphToolsFoundation.Overdrive.ISearcherItemDataProvider
    {
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.ISearcherItemData Data { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle Type { get; }
        public TypeSearcherItem(UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle type, string name, System.Collections.Generic.List<UnityEditor.Searcher.SearcherItem> children = default(System.Collections.Generic.List<UnityEditor.Searcher.SearcherItem>)) {}
    }

    [System.Runtime.CompilerServices.IsReadOnly] public struct TypeSearcherItemData : UnityEditor.GraphToolsFoundation.Overdrive.ISearcherItemData
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle Type { get; }
        public TypeSearcherItemData(UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle type) {}
    }

    public static class TypeSerializer
    {
        public static UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle GenerateCustomTypeHandle(string uniqueId);
        public static UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle GenerateCustomTypeHandle(System.Type t, string customUniqueId);
        public static UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle GenerateTypeHandle<T>();
        public static UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle GenerateTypeHandle(System.Type t);
        public static System.Type ResolveType(UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle th);
    }

    public class UIDependencies
    {
        public UIDependencies(UnityEditor.GraphToolsFoundation.Overdrive.IModelUI owner) {}
        public void AddBackwardDependency(UnityEditor.GraphToolsFoundation.Overdrive.IModelUI dependency, UnityEditor.GraphToolsFoundation.Overdrive.DependencyType dependencyType);
        public void AddForwardDependency(UnityEditor.GraphToolsFoundation.Overdrive.IModelUI dependency, UnityEditor.GraphToolsFoundation.Overdrive.DependencyType dependencyType);
        public void AddModelDependency(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model);
        public void ClearDependencyLists();
        public void OnCustomStyleResolved(UnityEngine.UIElements.CustomStyleResolvedEvent evt);
        public void OnDetachedFromPanel(UnityEngine.UIElements.DetachFromPanelEvent evt);
        public void OnGeometryChanged(UnityEngine.UIElements.GeometryChangedEvent evt);
        public void UpdateDependencyLists();
    }

    [System.Runtime.CompilerServices.Extension] public static class UIForModel
    {
        public static void AddOrReplaceGraphElement(UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI);
        [JetBrains.Annotations.CanBeNull] [System.Runtime.CompilerServices.Extension] public static T GetUI<T>(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel model, UnityEditor.GraphToolsFoundation.Overdrive.GraphView graphView, string context = default(string)) where T : class, UnityEditor.GraphToolsFoundation.Overdrive.IModelUI;
        public static void RemoveGraphElement(UnityEditor.GraphToolsFoundation.Overdrive.IModelUI modelUI);
    }

    public enum UIRebuildType
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.UIRebuildType Complete = 2;
        public const UnityEditor.GraphToolsFoundation.Overdrive.UIRebuildType None = 0;
        public const UnityEditor.GraphToolsFoundation.Overdrive.UIRebuildType Partial = 1;
        public int value__;
    }

    public class Unknown
    {
    }

    public class UpdateConstantNodeValueCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.IConstant Constant;
        public UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel OwnerModel;
        public object Value;
        public UpdateConstantNodeValueCommand() {}
        public UpdateConstantNodeValueCommand(UnityEditor.GraphToolsFoundation.Overdrive.IConstant constant, object value, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel owner) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.UpdateConstantNodeValueCommand command);
    }

    public class UpdateExposedCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public bool Exposed;
        public UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel VariableDeclarationModel;
        public UpdateExposedCommand() {}
        public UpdateExposedCommand(UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel variableDeclarationModel, bool exposed) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.UpdateExposedCommand command);
    }

    public class UpdateModelPropertyValueCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel GraphElementModel;
        public object NewValue;
        public string Path;
        public UpdateModelPropertyValueCommand() {}
        public UpdateModelPropertyValueCommand(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel graphElementModel, Unity.Properties.PropertyPath path, object newValue) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.UpdateModelPropertyValueCommand command);
    }

    public class UpdatePortConstantCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public object NewValue;
        public UnityEditor.GraphToolsFoundation.Overdrive.IPortModel PortModel;
        public UpdatePortConstantCommand() {}
        public UpdatePortConstantCommand(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel, object newValue) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.UpdatePortConstantCommand command);
    }

    public class UpdateStickyNoteCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public readonly string Contents;
        public readonly UnityEditor.GraphToolsFoundation.Overdrive.IStickyNoteModel StickyNoteModel;
        public readonly string Title;
        public UpdateStickyNoteCommand() {}
        public UpdateStickyNoteCommand(UnityEditor.GraphToolsFoundation.Overdrive.IStickyNoteModel stickyNoteModel, string title, string contents) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.UpdateStickyNoteCommand command);
    }

    public class UpdateStickyNoteTextSizeCommand : UnityEditor.GraphToolsFoundation.Overdrive.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.IStickyNoteModel, string>
    {
        public UpdateStickyNoteTextSizeCommand() {}
        public UpdateStickyNoteTextSizeCommand(UnityEditor.GraphToolsFoundation.Overdrive.IStickyNoteModel[] stickyNoteModels, string textSize) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.UpdateStickyNoteTextSizeCommand command);
    }

    public class UpdateStickyNoteThemeCommand : UnityEditor.GraphToolsFoundation.Overdrive.ModelCommand<UnityEditor.GraphToolsFoundation.Overdrive.IStickyNoteModel, string>
    {
        public UpdateStickyNoteThemeCommand() {}
        public UpdateStickyNoteThemeCommand(UnityEditor.GraphToolsFoundation.Overdrive.IStickyNoteModel[] stickyNoteModels, string theme) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.UpdateStickyNoteThemeCommand command);
    }

    public class UpdateTooltipCommand : UnityEditor.GraphToolsFoundation.Overdrive.Command
    {
        public string Tooltip;
        public UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel VariableDeclarationModel;
        public UpdateTooltipCommand() {}
        public UpdateTooltipCommand(UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel variableDeclarationModel, string tooltip) {}
        public static void DefaultCommandHandler(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, UnityEditor.GraphToolsFoundation.Overdrive.UpdateTooltipCommand command);
    }

    public class ValueBadge : UnityEditor.GraphToolsFoundation.Overdrive.Badge
    {
        public static readonly string ussClassName;
        public ValueBadge() {}
        protected virtual void Attach();
        protected virtual void BuildElementUI();
        protected virtual void PostBuildUI();
        protected virtual void UpdateElementFromModel();
    }

    public enum Verbosity
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.Verbosity Errors = 0;
        public int value__;
        public const UnityEditor.GraphToolsFoundation.Overdrive.Verbosity Verbose = 1;
    }

    public abstract class ViewStateComponent : UnityEditor.GraphToolsFoundation.Overdrive.EditorStateComponent
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID ViewGUID { get; set; }
        protected ViewStateComponent() {}
    }

    [System.Runtime.CompilerServices.Extension] public static class VisualElementExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.Rect GetRect(UnityEngine.UIElements.VisualElement ve);
        [System.Runtime.CompilerServices.Extension] public static void PrefixRemoveFromClassList(UnityEngine.UIElements.VisualElement ve, string classNamePrefix);
        [System.Runtime.CompilerServices.Extension] public static void ReplaceManipulator<T>(UnityEngine.UIElements.VisualElement ve, ref T manipulator, T newManipulator) where T : UnityEngine.UIElements.Manipulator;
    }

    public class WindowStateComponent : UnityEditor.GraphToolsFoundation.Overdrive.ViewStateComponent
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.OpenedGraph CurrentGraph { get; set; }
        public UnityEditor.GraphToolsFoundation.Overdrive.OpenedGraph LastOpenedGraph { get; }
        public System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.OpenedGraph> SubGraphStack { get; }
        public WindowStateComponent() {}
        public void ClearHistory();
        public void PushCurrentGraph();
        public void TruncateHistory(int length);
    }
}

namespace UnityEditor.GraphToolsFoundation.Overdrive.BasicModel
{
    public class AnimationClipConstant : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.Constant<UnityEngine.AnimationClip>
    {
        public AnimationClipConstant() {}
    }

    public class AnyConstant : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.Constant<object>
    {
        public virtual System.Type Type { get; }
        public AnyConstant() {}
    }

    public class BadgeModel : UnityEditor.GraphToolsFoundation.Overdrive.IBadgeModel, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel
    {
        protected System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.Capabilities> m_Capabilities;
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel AssetModel { get; set; }
        public virtual System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.Capabilities> Capabilities { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel GraphModel { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID Guid { get; set; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel ParentModel { get; }
        public BadgeModel(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel parentModel) {}
        public virtual void AssignNewGuid();
    }

    public static class BasicModelReducers
    {
        public static void Register(UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher dispatcher);
    }

    public class BlackboardGraphModel : UnityEditor.GraphToolsFoundation.Overdrive.IBlackboardGraphModel, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel
    {
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel AssetModel { get; set; }
        public virtual System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.Capabilities> Capabilities { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel GraphModel { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID Guid { get; set; }
        public virtual System.Collections.Generic.IEnumerable<string> SectionNames { get; }
        public virtual bool Valid { get; }
        public BlackboardGraphModel() {}
        public virtual void AssignNewGuid();
        public virtual string GetBlackboardSubTitle();
        public virtual string GetBlackboardTitle();
        public virtual System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel> GetSectionRows(string sectionName);
        public virtual void PopulateCreateMenu(string sectionName, UnityEditor.GenericMenu menu, UnityEditor.GraphToolsFoundation.Overdrive.CommandDispatcher commandDispatcher);
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(@"UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting")] public class BooleanConstant : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.Constant<bool>
    {
        public BooleanConstant() {}
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(@"UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting")] public class ColorConstant : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.Constant<UnityEngine.Color>
    {
        public ColorConstant() {}
    }

    public abstract class Constant<T> : UnityEditor.GraphToolsFoundation.Overdrive.IConstant
    {
        [UnityEngine.SerializeField] protected T m_Value;
        public virtual object DefaultValue { get; }
        public virtual object ObjectValue { get; set; }
        public virtual System.Type Type { get; }
        public T Value { get; set; }
        protected Constant() {}
        protected virtual T FromObject(object value);
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(@"UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting")] public sealed class ConstantNodeModel : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.NodeModel, UnityEditor.GraphToolsFoundation.Overdrive.IConstantNodeModel, UnityEditor.GraphToolsFoundation.Overdrive.IDestroyable, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IHasMainOutputPort, UnityEditor.GraphToolsFoundation.Overdrive.IInOutPortsNode, UnityEditor.GraphToolsFoundation.Overdrive.IMovable, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel, UnityEditor.GraphToolsFoundation.Overdrive.IPortNode, UnityEditor.GraphToolsFoundation.Overdrive.ISingleOutputPortNode
    {
        public virtual bool IsLocked { get; set; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IPortModel MainOutputPort { get; }
        public virtual object ObjectValue { get; set; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IPortModel OutputPort { get; }
        public virtual string Title { get; }
        public virtual System.Type Type { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IConstant Value { get; set; }
        public ConstantNodeModel() {}
        public UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.ConstantNodeModel Clone();
        protected virtual void OnDefineNode();
        public virtual void PredefineSetup();
        public virtual void SetValue<T>(T value);
        public virtual string ToString();
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(@"UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting.GraphViewModel")] public class DataEdgePortalEntryModel : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.EdgePortalModel, UnityEditor.GraphToolsFoundation.Overdrive.IDestroyable, UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalEntryModel, UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IHasDeclarationModel, UnityEditor.GraphToolsFoundation.Overdrive.IHasMainInputPort, UnityEditor.GraphToolsFoundation.Overdrive.IHasTitle, UnityEditor.GraphToolsFoundation.Overdrive.IInOutPortsNode, UnityEditor.GraphToolsFoundation.Overdrive.IMovable, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel, UnityEditor.GraphToolsFoundation.Overdrive.IPortNode, UnityEditor.GraphToolsFoundation.Overdrive.ISingleInputPortNode
    {
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IPortModel InputPort { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IPortModel MainInputPort { get; }
        public DataEdgePortalEntryModel() {}
        protected virtual void InitCapabilities();
        protected virtual void OnDefineNode();
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(@"UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting.GraphViewModel")] public class DataEdgePortalExitModel : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.EdgePortalModel, UnityEditor.GraphToolsFoundation.Overdrive.IDestroyable, UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalExitModel, UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IHasDeclarationModel, UnityEditor.GraphToolsFoundation.Overdrive.IHasMainOutputPort, UnityEditor.GraphToolsFoundation.Overdrive.IHasTitle, UnityEditor.GraphToolsFoundation.Overdrive.IInOutPortsNode, UnityEditor.GraphToolsFoundation.Overdrive.IMovable, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel, UnityEditor.GraphToolsFoundation.Overdrive.IPortNode, UnityEditor.GraphToolsFoundation.Overdrive.ISingleOutputPortNode
    {
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IPortModel MainOutputPort { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IPortModel OutputPort { get; }
        public DataEdgePortalExitModel() {}
        public virtual bool CanCreateOppositePortal();
        protected virtual void OnDefineNode();
    }

    public class DeclarationModel : UnityEditor.GraphToolsFoundation.Overdrive.IDeclarationModel, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IGuidUpdate, UnityEditor.GraphToolsFoundation.Overdrive.IHasTitle, UnityEditor.GraphToolsFoundation.Overdrive.IRenamable, UnityEngine.ISerializationCallbackReceiver
    {
        protected System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.Capabilities> m_Capabilities;
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel AssetModel { get; set; }
        public virtual System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.Capabilities> Capabilities { get; }
        public virtual string DisplayTitle { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel GraphModel { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID Guid { get; set; }
        public virtual string Title { get; set; }
        public DeclarationModel() {}
        public virtual void AssignGuid(string guidString);
        public virtual void AssignNewGuid();
        protected virtual void InitCapabilities();
        public virtual void OnAfterDeserialize();
        public virtual void OnBeforeSerialize();
        public virtual void Rename(string newName);
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(@"UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting")] public class DoubleConstant : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.Constant<double>
    {
        public DoubleConstant() {}
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(@"UnityEditor.GraphToolsFoundation.Overdrive.Model")] public class EdgeControlPointModel : UnityEditor.GraphToolsFoundation.Overdrive.IEdgeControlPointModel
    {
        public virtual UnityEngine.Vector2 Position { get; set; }
        public virtual float Tightness { get; set; }
        public EdgeControlPointModel() {}
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(@"UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting.GraphViewModel")] public class EdgeModel : UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel, UnityEditor.GraphToolsFoundation.Overdrive.IEditableEdge, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IMovable, UnityEngine.ISerializationCallbackReceiver
    {
        protected System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.Capabilities> m_Capabilities;
        [UnityEngine.SerializeField] protected string m_EdgeLabel;
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel AssetModel { get; set; }
        public virtual System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.Capabilities> Capabilities { get; }
        public virtual System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeControlPointModel> EdgeControlPoints { get; }
        public virtual string EdgeLabel { get; set; }
        public virtual bool EditMode { get; set; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID FromNodeGuid { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IPortModel FromPort { get; set; }
        public virtual string FromPortId { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel GraphModel { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID Guid { get; set; }
        public virtual UnityEngine.Vector2 Position { get; set; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID ToNodeGuid { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IPortModel ToPort { get; set; }
        public virtual string ToPortId { get; }
        public EdgeModel() {}
        public virtual void AssignNewGuid();
        protected virtual void InitCapabilities();
        public virtual void InsertEdgeControlPoint(int atIndex, UnityEngine.Vector2 point, float tightness);
        public virtual void ModifyEdgeControlPoint(int index, UnityEngine.Vector2 point, float tightness);
        public virtual void Move(UnityEngine.Vector2 delta);
        public virtual void OnAfterDeserialize();
        public virtual void OnBeforeSerialize();
        public virtual void RemoveEdgeControlPoint(int index);
        public virtual void ResetPorts();
        public virtual void SetPorts(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel toPortModel, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel fromPortModel);
        public virtual string ToString();
        public virtual System.ValueTuple<UnityEditor.GraphToolsFoundation.Overdrive.PortMigrationResult, UnityEditor.GraphToolsFoundation.Overdrive.PortMigrationResult> TryMigratePorts(out UnityEditor.GraphToolsFoundation.Overdrive.INodeModel inputNode, out UnityEditor.GraphToolsFoundation.Overdrive.INodeModel outputNode);
    }

    public abstract class EdgePortalModel : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.NodeModel, UnityEditor.GraphToolsFoundation.Overdrive.ICloneable, UnityEditor.GraphToolsFoundation.Overdrive.IDestroyable, UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IHasDeclarationModel, UnityEditor.GraphToolsFoundation.Overdrive.IHasTitle, UnityEditor.GraphToolsFoundation.Overdrive.IMovable, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel, UnityEditor.GraphToolsFoundation.Overdrive.IRenamable
    {
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IDeclarationModel DeclarationModel { get; set; }
        public virtual int EvaluationOrder { get; protected set; }
        public virtual string Title { get; }
        public EdgePortalModel() {}
        public virtual bool CanCreateOppositePortal();
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel Clone();
        protected virtual void InitCapabilities();
        public virtual void Rename(string newName);
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(@"UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting")] public class EnumConstant : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.Constant<UnityEditor.GraphToolsFoundation.Overdrive.EnumValueReference>
    {
        public virtual object DefaultValue { get; }
        public UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle EnumType { get; }
        public System.Enum EnumValue { get; }
        public EnumConstant() {}
        protected virtual UnityEditor.GraphToolsFoundation.Overdrive.EnumValueReference FromObject(object value);
    }

    public class ErrorBadgeModel : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.BadgeModel, UnityEditor.GraphToolsFoundation.Overdrive.IBadgeModel, UnityEditor.GraphToolsFoundation.Overdrive.IErrorBadgeModel, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel
    {
        [UnityEngine.SerializeField] protected string m_ErrorMessage;
        public virtual string ErrorMessage { get; }
        public ErrorBadgeModel(UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel parentModel) {}
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(@"UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting.GraphViewModel")] public class ExecutionEdgePortalEntryModel : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.EdgePortalModel, UnityEditor.GraphToolsFoundation.Overdrive.IDestroyable, UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalEntryModel, UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IHasDeclarationModel, UnityEditor.GraphToolsFoundation.Overdrive.IHasMainExecutionInputPort, UnityEditor.GraphToolsFoundation.Overdrive.IHasTitle, UnityEditor.GraphToolsFoundation.Overdrive.IInOutPortsNode, UnityEditor.GraphToolsFoundation.Overdrive.IMovable, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel, UnityEditor.GraphToolsFoundation.Overdrive.IPortNode, UnityEditor.GraphToolsFoundation.Overdrive.ISingleInputPortNode
    {
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IPortModel ExecutionInputPort { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IPortModel InputPort { get; }
        public ExecutionEdgePortalEntryModel() {}
        protected virtual void OnDefineNode();
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(@"UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting.GraphViewModel")] public class ExecutionEdgePortalExitModel : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.EdgePortalModel, UnityEditor.GraphToolsFoundation.Overdrive.IDestroyable, UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalExitModel, UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IHasDeclarationModel, UnityEditor.GraphToolsFoundation.Overdrive.IHasMainExecutionOutputPort, UnityEditor.GraphToolsFoundation.Overdrive.IHasTitle, UnityEditor.GraphToolsFoundation.Overdrive.IInOutPortsNode, UnityEditor.GraphToolsFoundation.Overdrive.IMovable, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel, UnityEditor.GraphToolsFoundation.Overdrive.IPortNode, UnityEditor.GraphToolsFoundation.Overdrive.ISingleOutputPortNode
    {
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IPortModel ExecutionOutputPort { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IPortModel OutputPort { get; }
        public ExecutionEdgePortalExitModel() {}
        protected virtual void OnDefineNode();
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(@"UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting")] public class FloatConstant : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.Constant<float>
    {
        public FloatConstant() {}
    }

    public abstract class GraphModel : System.IDisposable, UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel, UnityEngine.ISerializationCallbackReceiver
    {
        [UnityEngine.SerializeReference] protected System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> m_GraphEdgeModels;
        [UnityEngine.SerializeReference] protected System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel> m_GraphNodeModels;
        [UnityEngine.SerializeReference] protected System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.IPlacematModel> m_GraphPlacematModels;
        [UnityEngine.SerializeReference] protected System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.IDeclarationModel> m_GraphPortalModels;
        [UnityEngine.SerializeReference] protected System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.IStickyNoteModel> m_GraphStickyNoteModels;
        [UnityEngine.SerializeReference] protected System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel> m_GraphVariableModels;
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel AssetModel { get; set; }
        public virtual System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IBadgeModel> BadgeModels { get; }
        public virtual System.Type DefaultStencilType { get; }
        public virtual System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> EdgeModels { get; }
        public virtual string Name { get; set; }
        public virtual System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel> NodeModels { get; }
        public virtual System.Collections.Generic.IReadOnlyDictionary<UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel> NodesByGuid { get; }
        protected UnityEditor.GraphToolsFoundation.Overdrive.Stencil OldSerializedStencil { get; }
        public virtual System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IPlacematModel> PlacematModels { get; }
        public virtual System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IDeclarationModel> PortalDeclarations { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.Stencil Stencil { get; }
        public virtual System.Type StencilType { get; set; }
        public virtual System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IStickyNoteModel> StickyNoteModels { get; }
        public virtual System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel> VariableDeclarations { get; }
        protected GraphModel() {}
        public virtual void AddBadge(UnityEditor.GraphToolsFoundation.Overdrive.IBadgeModel badgeModel);
        public void AddNode(UnityEditor.GraphToolsFoundation.Overdrive.INodeModel nodeModel);
        public virtual bool CheckIntegrity(UnityEditor.GraphToolsFoundation.Overdrive.Verbosity errors);
        public virtual void CloneGraph(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel sourceGraphModel);
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IConstantNodeModel CreateConstantNode(UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle constantTypeHandle, string constantName, UnityEngine.Vector2 position, UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID guid = default(UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID), System.Action<UnityEditor.GraphToolsFoundation.Overdrive.IConstantNodeModel> preDefine = default(System.Action<UnityEditor.GraphToolsFoundation.Overdrive.IConstantNodeModel>), UnityEditor.GraphToolsFoundation.Overdrive.SpawnFlags spawnFlags = 0);
        public EdgeT CreateEdge<EdgeT>(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel toPort, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel fromPort) where EdgeT : UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel, new();
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel CreateEdge(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel toPort, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel fromPort);
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalEntryModel CreateEntryPortalFromEdge(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edgeModel);
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalExitModel CreateExitPortalFromEdge(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edgeModel);
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IDeclarationModel CreateGraphPortalDeclaration(string portalName, UnityEditor.GraphToolsFoundation.Overdrive.SpawnFlags spawnFlags = 0);
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel CreateGraphVariableDeclaration(UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle variableDataType, string variableName, UnityEditor.GraphToolsFoundation.Overdrive.ModifierFlags modifierFlags, bool isExposed, UnityEditor.GraphToolsFoundation.Overdrive.IConstant initializationModel = default(UnityEditor.GraphToolsFoundation.Overdrive.IConstant), UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID guid = default(UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID));
        protected void CreateItemizedNode(int nodeOffset, ref UnityEditor.GraphToolsFoundation.Overdrive.IPortModel outputPortModel);
        public virtual void CreateItemizedNode(UnityEditor.GraphToolsFoundation.Overdrive.GraphToolState graphToolState, int nodeOffset, ref UnityEditor.GraphToolsFoundation.Overdrive.IPortModel outputPortModel);
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.INodeModel CreateNode(System.Type nodeTypeToCreate, string nodeName, UnityEngine.Vector2 position, UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID guid = default(UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID), System.Action<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel> preDefineSetup = default(System.Action<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel>), UnityEditor.GraphToolsFoundation.Overdrive.SpawnFlags spawnFlags = 0);
        protected virtual UnityEditor.GraphToolsFoundation.Overdrive.INodeModel CreateNodeInternal(System.Type nodeTypeToCreate, string nodeName, UnityEngine.Vector2 position, UnityEditor.GraphToolsFoundation.Overdrive.SpawnFlags spawnFlags = 0, System.Action<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel> preDefineSetup = default(System.Action<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel>), UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID guid = default(UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID));
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel CreateOppositePortal(UnityEditor.GraphToolsFoundation.Overdrive.IEdgePortalModel edgePortalModel, UnityEngine.Vector2 position, UnityEditor.GraphToolsFoundation.Overdrive.SpawnFlags spawnFlags = 0);
        protected EdgeT CreateOrphanEdge<EdgeT>(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel toPort, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel fromPort) where EdgeT : UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel, new();
        protected StickyNoteT CreateOrphanStickyNote<StickyNoteT>(UnityEngine.Rect position) where StickyNoteT : UnityEditor.GraphToolsFoundation.Overdrive.IStickyNoteModel, new();
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IPlacematModel CreatePlacemat(UnityEngine.Rect position, UnityEditor.GraphToolsFoundation.Overdrive.SpawnFlags spawnFlags = 0);
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IStickyNoteModel CreateStickyNote(UnityEngine.Rect position, UnityEditor.GraphToolsFoundation.Overdrive.SpawnFlags spawnFlags = 0);
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IVariableNodeModel CreateVariableNode(UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel declarationModel, UnityEngine.Vector2 position, UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID guid = default(UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID), UnityEditor.GraphToolsFoundation.Overdrive.SpawnFlags spawnFlags = 0);
        public virtual System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> DeleteBadges();
        public virtual System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> DeleteBadgesOfType<T>() where T : UnityEditor.GraphToolsFoundation.Overdrive.IBadgeModel;
        public virtual System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> DeleteEdges(System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> edgeModels);
        public virtual System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> DeleteNodes(System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.INodeModel> nodeModels, bool deleteConnections);
        public virtual System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> DeletePlacemats(System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IPlacematModel> placematModels);
        public virtual System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> DeleteStickyNotes(System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IStickyNoteModel> stickyNoteModels);
        public virtual System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> DeleteVariableDeclarations(System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel> variableModels, bool deleteUsages);
        public virtual void Dispose();
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel DuplicateEdge(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel sourceEdge, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel targetInputNode, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel targetOutputNode);
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel DuplicateGraphVariableDeclaration(UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel sourceModel);
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.INodeModel DuplicateNode(UnityEditor.GraphToolsFoundation.Overdrive.INodeModel sourceNode, UnityEngine.Vector2 delta);
        public virtual System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> GetCompatiblePorts(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel startPortModel);
        protected virtual bool IsCompatiblePort(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel startPortModel, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel compatiblePortModel);
        protected virtual void MigrateNodes();
        public virtual void OnAfterDeserialize();
        public virtual void OnAfterDeserializeAssetModel();
        public virtual void OnBeforeSerialize();
        public virtual void OnDisable();
        public virtual void OnEnable();
        public void RemoveBadge(UnityEditor.GraphToolsFoundation.Overdrive.IBadgeModel badgeModel);
        public virtual void UndoRedoPerformed();
    }

    public class GraphProcessingErrorBadgeModel : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.ErrorBadgeModel
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.QuickFix Fix { get; }
        public GraphProcessingErrorBadgeModel(UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingError error) {}
    }

    public class GraphTemplate<TStencil> : UnityEditor.GraphToolsFoundation.Overdrive.IGraphTemplate where TStencil : UnityEditor.GraphToolsFoundation.Overdrive.Stencil
    {
        public virtual string DefaultAssetName { get; }
        public virtual string GraphTypeName { get; }
        public virtual System.Type StencilType { get; }
        public GraphTemplate(string graphName = Graph) {}
        public virtual void InitBasicGraph(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(@"UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting")] public class IntConstant : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.Constant<int>
    {
        public IntConstant() {}
    }

    public class MeshConstant : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.Constant<UnityEngine.Mesh>
    {
        public MeshConstant() {}
    }

    public abstract class NodeModel : UnityEditor.GraphToolsFoundation.Overdrive.ICollapsible, UnityEditor.GraphToolsFoundation.Overdrive.IDestroyable, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IGuidUpdate, UnityEditor.GraphToolsFoundation.Overdrive.IHasProgress, UnityEditor.GraphToolsFoundation.Overdrive.IHasTitle, UnityEditor.GraphToolsFoundation.Overdrive.IInOutPortsNode, UnityEditor.GraphToolsFoundation.Overdrive.IMovable, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel, UnityEditor.GraphToolsFoundation.Overdrive.IPortNode, UnityEngine.ISerializationCallbackReceiver
    {
        protected System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.Capabilities> m_Capabilities;
        [UnityEngine.HideInInspector] [UnityEngine.SerializeField] protected UnityEditor.GraphToolsFoundation.Overdrive.GraphAssetModel m_GraphAssetModel;
        protected UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.OrderedPorts m_PreviousInputs;
        protected UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.OrderedPorts m_PreviousOutputs;
        public virtual bool AllowSelfConnect { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel AssetModel { get; set; }
        public virtual System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.Capabilities> Capabilities { get; }
        public virtual bool Collapsed { get; set; }
        public virtual UnityEngine.Color Color { get; set; }
        public virtual string DataTypeString { get; }
        public virtual bool Destroyed { get; }
        public virtual string DisplayTitle { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel GraphModel { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID Guid { get; set; }
        public virtual bool HasProgress { get; }
        public virtual bool HasUserColor { get; set; }
        public virtual string IconTypeString { get; }
        public System.Collections.Generic.IReadOnlyDictionary<string, UnityEditor.GraphToolsFoundation.Overdrive.IConstant> InputConstantsById { get; }
        public virtual System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> InputsByDisplayOrder { get; }
        public virtual System.Collections.Generic.IReadOnlyDictionary<string, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> InputsById { get; }
        public virtual System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> OutputsByDisplayOrder { get; }
        public virtual System.Collections.Generic.IReadOnlyDictionary<string, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> OutputsById { get; }
        public virtual System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> Ports { get; }
        public virtual UnityEngine.Vector2 Position { get; set; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.ModelState State { get; set; }
        protected UnityEditor.GraphToolsFoundation.Overdrive.Stencil Stencil { get; }
        public virtual string Title { get; set; }
        public virtual string Tooltip { get; set; }
        public virtual string VariableString { get; }
        public NodeModel() {}
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IPortModel AddInputPort(string portName, UnityEditor.GraphToolsFoundation.Overdrive.PortType portType, UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle dataType, string portId = default(string), UnityEditor.GraphToolsFoundation.Overdrive.PortModelOptions options = 0, System.Action<UnityEditor.GraphToolsFoundation.Overdrive.IConstant> preDefine = default(System.Action<UnityEditor.GraphToolsFoundation.Overdrive.IConstant>));
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IPortModel AddOutputPort(string portName, UnityEditor.GraphToolsFoundation.Overdrive.PortType portType, UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle dataType, string portId = default(string), UnityEditor.GraphToolsFoundation.Overdrive.PortModelOptions options = 0);
        public virtual void AssignNewGuid();
        public UnityEditor.GraphToolsFoundation.Overdrive.IConstantNodeModel CloneConstant(UnityEditor.GraphToolsFoundation.Overdrive.IConstantNodeModel source);
        public void CloneInputConstants();
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IPortModel CreatePort(UnityEditor.GraphToolsFoundation.Overdrive.Direction direction, string portName, UnityEditor.GraphToolsFoundation.Overdrive.PortType portType, UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle dataType, string portId, UnityEditor.GraphToolsFoundation.Overdrive.PortModelOptions options);
        public void DefineNode();
        public virtual void DeletePort(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel, bool removeFromOrderedPorts = False);
        public virtual void Destroy();
        public virtual System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> GetConnectedEdges();
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.PortCapacity GetPortCapacity(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel);
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IPortModel GetPortFitToConnectTo(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel);
        protected virtual void InitCapabilities();
        public virtual void Move(UnityEngine.Vector2 delta);
        public virtual void OnAfterDeserialize();
        public virtual void OnAfterDeserializeAssetModel();
        public virtual void OnBeforeSerialize();
        public virtual void OnConnection(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel selfConnectedPortModel, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel otherConnectedPortModel);
        public virtual void OnCreateNode();
        protected virtual void OnDefineNode();
        public virtual void OnDisconnection(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel selfConnectedPortModel, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel otherConnectedPortModel);
        public virtual void OnDuplicateNode(UnityEditor.GraphToolsFoundation.Overdrive.INodeModel sourceNode);
        protected virtual void OnPreDefineNode();
        protected void UpdateConstantForInput(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel inputPort, System.Action<UnityEditor.GraphToolsFoundation.Overdrive.IConstant> preDefine = default(System.Action<UnityEditor.GraphToolsFoundation.Overdrive.IConstant>));
    }

    [JetBrains.Annotations.PublicAPI] [System.Reflection.DefaultMember(@"Item")] public class OrderedPorts : System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel>>, System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<string, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel>>, System.Collections.Generic.IReadOnlyCollection<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel>, System.Collections.Generic.IReadOnlyDictionary<string, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel>, System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel>, System.Collections.IEnumerable
    {
        public virtual int Count { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IPortModel this[string key] { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IPortModel this[int index] { get; }
        public virtual System.Collections.Generic.IEnumerable<string> Keys { get; }
        public virtual System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> Values { get; }
        public OrderedPorts(int capacity = 0) {}
        public void Add(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel);
        public virtual bool ContainsKey(string key);
        public virtual System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel>> GetEnumerator();
        public bool Remove(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel portModel);
        public void SwapPortsOrder(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel a, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel b);
        public virtual bool TryGetValue(string key, out UnityEditor.GraphToolsFoundation.Overdrive.IPortModel value);
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(@"UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting.GraphViewModel")] public class PlacematModel : UnityEditor.GraphToolsFoundation.Overdrive.ICollapsible, UnityEditor.GraphToolsFoundation.Overdrive.IDestroyable, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IGuidUpdate, UnityEditor.GraphToolsFoundation.Overdrive.IHasTitle, UnityEditor.GraphToolsFoundation.Overdrive.IMovable, UnityEditor.GraphToolsFoundation.Overdrive.IPlacematModel, UnityEditor.GraphToolsFoundation.Overdrive.IRenamable, UnityEditor.GraphToolsFoundation.Overdrive.IResizable, UnityEngine.ISerializationCallbackReceiver
    {
        public static readonly UnityEngine.Color defaultColor;
        protected System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.Capabilities> m_Capabilities;
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel AssetModel { get; set; }
        public virtual System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.Capabilities> Capabilities { get; }
        public virtual bool Collapsed { get; set; }
        public virtual UnityEngine.Color Color { get; set; }
        public virtual bool Destroyed { get; }
        public virtual string DisplayTitle { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel GraphModel { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID Guid { get; set; }
        public virtual System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel> HiddenElements { get; set; }
        public System.Collections.Generic.List<string> HiddenElementsGuid { get; set; }
        public virtual UnityEngine.Vector2 Position { get; set; }
        public virtual UnityEngine.Rect PositionAndSize { get; set; }
        public virtual string Title { get; set; }
        public virtual int ZOrder { get; set; }
        public PlacematModel() {}
        public virtual void AssignNewGuid();
        public virtual void Destroy();
        protected virtual void InitCapabilities();
        public virtual void Move(UnityEngine.Vector2 delta);
        public virtual void OnAfterDeserialize();
        public virtual void OnBeforeSerialize();
        public virtual void Rename(string newName);
        public virtual void ResetColor();
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(@"UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting.GraphViewModel")] public class PortModel : UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IHasTitle, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel, UnityEditor.GraphToolsFoundation.Overdrive.IReorderableEdgesPort, UnityEngine.ISerializationCallbackReceiver
    {
        protected System.Collections.Generic.List<UnityEditor.GraphToolsFoundation.Overdrive.Capabilities> m_Capabilities;
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel AssetModel { get; set; }
        public virtual System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.Capabilities> Capabilities { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.PortCapacity Capacity { get; }
        public virtual bool CreateEmbeddedValueIfNeeded { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle DataTypeHandle { get; set; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.Direction Direction { get; set; }
        public virtual bool DisableEmbeddedValueEditor { get; }
        public virtual string DisplayTitle { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IConstant EmbeddedValue { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel GraphModel { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID Guid { get; set; }
        public virtual bool HasReorderableEdges { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IPortNode NodeModel { get; set; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.PortModelOptions Options { get; set; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.Orientation Orientation { get; set; }
        public virtual System.Type PortDataType { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.PortType PortType { get; set; }
        public virtual string Title { get; set; }
        public virtual string ToolTip { get; set; }
        public virtual string UniqueName { get; set; }
        public PortModel() {}
        public virtual void AssignNewGuid();
        public virtual System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel> GetConnectedEdges();
        public virtual System.Collections.Generic.IEnumerable<UnityEditor.GraphToolsFoundation.Overdrive.IPortModel> GetConnectedPorts();
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.PortCapacity GetDefaultCapacity();
        protected virtual void InitCapabilities();
        public virtual bool IsConnectedTo(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel toPort);
        public virtual void MoveEdgeDown(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edge);
        public virtual void MoveEdgeFirst(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edge);
        public virtual void MoveEdgeLast(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edge);
        public virtual void MoveEdgeUp(UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel edge);
        public virtual void OnAfterDeserialize();
        public virtual void OnBeforeSerialize();
        public virtual string ToString();
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(@"UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting")] public class QuaternionConstant : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.Constant<UnityEngine.Quaternion>
    {
        public virtual object DefaultValue { get; }
        public QuaternionConstant() {}
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(@"UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting.GraphViewModel")] public class StickyNoteModel : UnityEditor.GraphToolsFoundation.Overdrive.IDestroyable, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IGuidUpdate, UnityEditor.GraphToolsFoundation.Overdrive.IHasTitle, UnityEditor.GraphToolsFoundation.Overdrive.IMovable, UnityEditor.GraphToolsFoundation.Overdrive.IRenamable, UnityEditor.GraphToolsFoundation.Overdrive.IResizable, UnityEditor.GraphToolsFoundation.Overdrive.IStickyNoteModel, UnityEngine.ISerializationCallbackReceiver
    {
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel AssetModel { get; set; }
        public virtual System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.Capabilities> Capabilities { get; }
        public virtual string Contents { get; set; }
        public virtual bool Destroyed { get; }
        public virtual string DisplayTitle { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel GraphModel { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID Guid { get; set; }
        public virtual UnityEngine.Vector2 Position { get; set; }
        public virtual UnityEngine.Rect PositionAndSize { get; set; }
        public virtual string TextSize { get; set; }
        public virtual string Theme { get; set; }
        public virtual string Title { get; set; }
        public StickyNoteModel() {}
        public virtual void AssignNewGuid();
        public virtual void Destroy();
        protected virtual void InitCapabilities();
        public virtual void Move(UnityEngine.Vector2 delta);
        public virtual void OnAfterDeserialize();
        public virtual void OnBeforeSerialize();
        public virtual void Rename(string newName);
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(@"UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting")] public class StringConstant : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.Constant<string>
    {
        public StringConstant() {}
    }

    public class Texture2DConstant : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.Constant<UnityEngine.Texture2D>
    {
        public Texture2DConstant() {}
    }

    public class Texture3DConstant : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.Constant<UnityEngine.Texture3D>
    {
        public Texture3DConstant() {}
    }

    public static class TypeToConstantMapper
    {
        public static System.Type GetConstantNodeType(UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle typeHandle);
    }

    public class ValueBadgeModel : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.BadgeModel, UnityEditor.GraphToolsFoundation.Overdrive.IBadgeModel, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IValueBadgeModel
    {
        public virtual string DisplayValue { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IPortModel ParentPortModel { get; }
        public ValueBadgeModel(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel parentModel, string value) {}
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(@"UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting")] public class VariableDeclarationModel : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.DeclarationModel, UnityEditor.GraphToolsFoundation.Overdrive.IDeclarationModel, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IHasTitle, UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel
    {
        public UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.VariableFlags variableFlags;
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle DataType { get; set; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IConstant InitializationModel { get; protected set; }
        public virtual bool IsExposed { get; set; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.ModifierFlags Modifiers { get; set; }
        public virtual string Tooltip { get; set; }
        public virtual string VariableName { get; protected set; }
        public string VariableString { get; }
        public VariableDeclarationModel() {}
        public static UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.VariableDeclarationModel Create(string variableName, UnityEditor.GraphToolsFoundation.Overdrive.TypeHandle dataType, bool isExposed, UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.GraphModel graph, UnityEditor.GraphToolsFoundation.Overdrive.ModifierFlags modifierFlags, UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.VariableFlags variableFlags = 0, UnityEditor.GraphToolsFoundation.Overdrive.IConstant initializationModel = default(UnityEditor.GraphToolsFoundation.Overdrive.IConstant), UnityEditor.GraphToolsFoundation.Overdrive.SpawnFlags spawnFlags = 0, UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID guid = default(UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID));
        public virtual void CreateInitializationValue();
        public virtual bool Equals(object obj);
        public virtual int GetHashCode();
        public virtual T GetMetadataModel<T>() where T : UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationMetadataModel;
        public virtual void SetMetadataModel<T>(T value) where T : UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationMetadataModel;
    }

    [System.Flags] public enum VariableFlags
    {
        public const UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.VariableFlags Generated = 1;
        public const UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.VariableFlags Hidden = 2;
        public const UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.VariableFlags None = 0;
        public int value__;
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(@"UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting")] public class VariableNodeModel : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.NodeModel, UnityEditor.GraphToolsFoundation.Overdrive.ICloneable, UnityEditor.GraphToolsFoundation.Overdrive.IDestroyable, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel, UnityEditor.GraphToolsFoundation.Overdrive.IHasDeclarationModel, UnityEditor.GraphToolsFoundation.Overdrive.IHasMainOutputPort, UnityEditor.GraphToolsFoundation.Overdrive.IHasTitle, UnityEditor.GraphToolsFoundation.Overdrive.IInOutPortsNode, UnityEditor.GraphToolsFoundation.Overdrive.IMovable, UnityEditor.GraphToolsFoundation.Overdrive.INodeModel, UnityEditor.GraphToolsFoundation.Overdrive.IPortNode, UnityEditor.GraphToolsFoundation.Overdrive.IRenamable, UnityEditor.GraphToolsFoundation.Overdrive.ISingleInputPortNode, UnityEditor.GraphToolsFoundation.Overdrive.ISingleOutputPortNode, UnityEditor.GraphToolsFoundation.Overdrive.IVariableNodeModel
    {
        protected UnityEditor.GraphToolsFoundation.Overdrive.IPortModel m_MainPortModel;
        public virtual string DataTypeString { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IDeclarationModel DeclarationModel { get; set; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IPortModel InputPort { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IPortModel MainOutputPort { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IPortModel OutputPort { get; }
        public virtual string Title { get; }
        public virtual string Tooltip { get; set; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IVariableDeclarationModel VariableDeclarationModel { get; }
        public virtual string VariableString { get; }
        public VariableNodeModel() {}
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel Clone();
        protected virtual void InitCapabilities();
        protected virtual void OnDefineNode();
        public virtual void Rename(string newName);
        public virtual void UpdateTypeFromDeclaration();
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(@"UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting")] public class Vector2Constant : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.Constant<UnityEngine.Vector2>
    {
        public Vector2Constant() {}
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(@"UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting")] public class Vector3Constant : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.Constant<UnityEngine.Vector3>
    {
        public Vector3Constant() {}
    }

    [UnityEngine.Scripting.APIUpdating.MovedFrom(@"UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting")] public class Vector4Constant : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.Constant<UnityEngine.Vector4>
    {
        public Vector4Constant() {}
    }
}

namespace UnityEditor.GraphToolsFoundation.Overdrive.InternalModels
{
    public class GhostEdgeModel : UnityEditor.GraphToolsFoundation.Overdrive.IEdgeModel, UnityEditor.GraphToolsFoundation.Overdrive.IGhostEdge, UnityEditor.GraphToolsFoundation.Overdrive.IGraphElementModel
    {
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphAssetModel AssetModel { get; set; }
        public virtual System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.Capabilities> Capabilities { get; }
        public virtual string EdgeLabel { get; set; }
        public virtual UnityEngine.Vector2 EndPoint { get; set; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID FromNodeGuid { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IPortModel FromPort { get; set; }
        public virtual string FromPortId { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel GraphModel { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID Guid { get; set; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.SerializableGUID ToNodeGuid { get; }
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.IPortModel ToPort { get; set; }
        public virtual string ToPortId { get; }
        public GhostEdgeModel(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel) {}
        public virtual void AssignNewGuid();
        public virtual void ResetPorts();
        public virtual void SetPorts(UnityEditor.GraphToolsFoundation.Overdrive.IPortModel toPortModel, UnityEditor.GraphToolsFoundation.Overdrive.IPortModel fromPortModel);
        public virtual System.ValueTuple<UnityEditor.GraphToolsFoundation.Overdrive.PortMigrationResult, UnityEditor.GraphToolsFoundation.Overdrive.PortMigrationResult> TryMigratePorts(out UnityEditor.GraphToolsFoundation.Overdrive.INodeModel inputNode, out UnityEditor.GraphToolsFoundation.Overdrive.INodeModel outputNode);
    }
}

namespace UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting
{
    public class Port : UnityEditor.GraphToolsFoundation.Overdrive.Port
    {
        public static readonly string portExecutionActiveModifierUssClassName;
        public bool ExecutionPortActive { set; }
        public Port() {}
        public virtual bool CanAcceptSelectionDrop(System.Collections.Generic.IReadOnlyList<UnityEditor.GraphToolsFoundation.Overdrive.ISelectableGraphElement> dragSelection);
        protected virtual void PostBuildUI();
    }
}

namespace UnityEditor.GraphToolsFoundation.Overdrive.VisualScripting.Plugins
{
    public class DebuggingErrorBadgeModel : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.ErrorBadgeModel
    {
        public DebuggingErrorBadgeModel(UnityEditor.GraphToolsFoundation.Overdrive.TracingStep step) {}
    }

    public class DebuggingValueBadgeModel : UnityEditor.GraphToolsFoundation.Overdrive.BasicModel.ValueBadgeModel
    {
        public DebuggingValueBadgeModel(UnityEditor.GraphToolsFoundation.Overdrive.TracingStep step) {}
    }

    public class DebugInstrumentationHandler : UnityEditor.GraphToolsFoundation.Overdrive.IPluginHandler
    {
        public DebugInstrumentationHandler() {}
        public virtual void OptionsMenu(UnityEditor.GenericMenu menu);
        public virtual void Register(UnityEditor.GraphToolsFoundation.Overdrive.GraphViewEditorWindow window);
        public virtual void Unregister();
    }
}

namespace UnityEngine.GraphToolsFoundation.Overdrive
{
    [JetBrains.Annotations.PublicAPI] [System.Flags] public enum GraphProcessingOptions
    {
        public const UnityEngine.GraphToolsFoundation.Overdrive.GraphProcessingOptions Default = 0;
        public const UnityEngine.GraphToolsFoundation.Overdrive.GraphProcessingOptions ImplementationOnly = 8;
        public const UnityEngine.GraphToolsFoundation.Overdrive.GraphProcessingOptions LiveEditing = 4;
        public const UnityEngine.GraphToolsFoundation.Overdrive.GraphProcessingOptions Profiling = 2;
        public const UnityEngine.GraphToolsFoundation.Overdrive.GraphProcessingOptions Tracing = 1;
        public int value__;
    }

    public interface IGraphProcessor
    {
        public abstract UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingResult ProcessGraph(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
    }

    public class NoOpGraphProcessor : UnityEngine.GraphToolsFoundation.Overdrive.IGraphProcessor
    {
        public NoOpGraphProcessor() {}
        public virtual UnityEditor.GraphToolsFoundation.Overdrive.GraphProcessingResult ProcessGraph(UnityEditor.GraphToolsFoundation.Overdrive.IGraphModel graphModel);
    }
}
